nohup: ignoring input
[2023-08-28 20:15:18,410] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
The following values were not passed to `accelerate launch` and had defaults used instead:
		More than one GPU was found, enabling multi-GPU training.
		If this was unintended please pass in `--num_processes=1`.
	`--dynamo_backend` was set to a value of `'no'`
To avoid this warning pass in values for each of the problematic parameters or run `accelerate config`.
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
[2023-08-28 20:15:23,200] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-08-28 20:15:23,218] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-08-28 20:15:23,226] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-08-28 20:15:23,244] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Using flash attention v2
Using flash attention v2
Using flash attention v2
Using flash attention v2
[2023-08-28 20:15:24,581] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-08-28 20:15:24,581] [INFO] [comm.py:616:init_distributed] cdb=None
[2023-08-28 20:15:24,591] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-08-28 20:15:24,591] [INFO] [comm.py:616:init_distributed] cdb=None
[2023-08-28 20:15:24,597] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-08-28 20:15:24,597] [INFO] [comm.py:616:init_distributed] cdb=None
[2023-08-28 20:15:24,597] [INFO] [comm.py:643:init_distributed] Initializing TorchBackend in DeepSpeed with backend nccl
[2023-08-28 20:15:24,626] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-08-28 20:15:24,627] [INFO] [comm.py:616:init_distributed] cdb=None
08/28/2023 20:15:24 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 2
Local process index: 2
Device: cuda:2

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

08/28/2023 20:15:24 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 0
Local process index: 0
Device: cuda:0

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

08/28/2023 20:15:24 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 3
Local process index: 3
Device: cuda:3

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

08/28/2023 20:15:24 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 1
Local process index: 1
Device: cuda:1

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

loading configuration file /data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936/config.json
Model config LlamaConfig {
  "_name_or_path": "/data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936",
  "architectures": [
    "LlamaForCausalLM"
  ],
  "bos_token_id": 1,
  "eos_token_id": 2,
  "hidden_act": "silu",
  "hidden_size": 5120,
  "initializer_range": 0.02,
  "intermediate_size": 13824,
  "max_position_embeddings": 4096,
  "model_type": "llama",
  "num_attention_heads": 40,
  "num_hidden_layers": 40,
  "num_key_value_heads": 40,
  "pad_token_id": 0,
  "pretraining_tp": 1,
  "rms_norm_eps": 1e-05,
  "rope_scaling": null,
  "tie_word_embeddings": false,
  "torch_dtype": "float16",
  "transformers_version": "4.31.0",
  "use_cache": true,
  "vocab_size": 32000
}

loading file tokenizer.model
loading file added_tokens.json
loading file special_tokens_map.json
loading file tokenizer_config.json
loading weights file /data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936/model.safetensors.index.json
Detected DeepSpeed ZeRO-3: activating zero.init() for this model
Generate config GenerationConfig {
  "_from_model_config": true,
  "bos_token_id": 1,
  "eos_token_id": 2,
  "pad_token_id": 0,
  "transformers_version": "4.31.0"
}

[2023-08-28 20:15:29,442] [INFO] [partition_parameters.py:326:__exit__] finished initializing model with 13.02B parameters
Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:01,  1.44it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:01,  1.43it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:01,  1.36it/s]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:03<00:02,  2.16s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:03<00:02,  2.16s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:03<00:02,  2.16s/it]Loading checkpoint shards:  33%|███▎      | 1/3 [00:05<00:10,  5.21s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.66s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.38s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.66s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.38s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.67s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.39s/it]
Loading checkpoint shards:  67%|██████▋   | 2/3 [00:11<00:05,  5.70s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:15<00:00,  5.17s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:15<00:00,  5.27s/it]
All model checkpoint weights were used when initializing LlamaForCausalLM.

All the weights of LlamaForCausalLM were initialized from the model checkpoint at /data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936.
If your task is similar to the task the model of the checkpoint was trained on, you can already use LlamaForCausalLM for predictions without further training.
Generation config file not found, using a generation config created from the model config.
Assigning <s> to the bos_token key of the tokenizer
Assigning </s> to the eos_token key of the tokenizer
Assigning <unk> to the unk_token key of the tokenizer
Assigning <pad> to the pad_token key of the tokenizer
Adding <pad> to the vocabulary
08/28/2023 20:15:47 - INFO - __main__ - Sample 14149 of the training set: {'input_ids': tensor([    1,  1128,  1784,  1422,   395, 29946, 29905,  3706, 29871, 29946,
        29938,  7049,  5069,  9976,   526,   599, 29871, 29896, 29915, 29879,
          322,   448, 29896, 29915, 29879,   505,   278,  2875,   393,   278,
         2533,   310,   278,  9976,   297,  1269,  1948,   338, 29871, 29900,
          322,   278,  2533,   310,   278,  9976,   297,  1269,  1897,   338,
        29871, 29900, 29973,    13, 29902,   817,   304,  2302,   278,  1353,
          310,  5837,   304,   564,  3881,  9475, 29871, 29896, 29915, 29879,
          322,  9475,   448, 29896, 29915, 29879,   297,   263,   395, 29946,
        29905,  3706, 29871, 29946, 29938,  6856,   577,   393,  1269,  1948,
          322,  1269,  1897,   756,   385,  5186,  1353,   310, 29871, 29896,
        29915, 29879,   322,   448, 29896, 29915, 29879, 29889,    13, 29902,
         8369,   393,   445,   338,  7126,   304,  9138,   278,  1353,   310,
         5837,   304,  8877,   278,   731,   310, 29871, 29896, 29953, 11909,
          297,   278,  6856,   964,  3023, 27639,   310,  2159,  3023, 29892,
         1316,   393,  1269, 11306,  3743,   697,  2602,   515,  1269,  1948,
          322,  1269,  1897, 29889,    13]), 'labels': tensor([-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        6374, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, 8178]), 'attention_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])}.
08/28/2023 20:15:47 - INFO - __main__ - Sample 77345 of the training set: {'input_ids': tensor([    1,  2803,   395, 29888, 29898, 29916,  3892,  1165, 29985, 29906,
        29974, 29890, 29916, 29974, 29883,  1628,   988,   395, 29874,  1628,
          395, 29890,  1628,   322,   395, 29883, 29938,   526, 11920, 29889,
        12142,   393,   395, 29888, 29898, 29896,  3892, 29900,  1628,   395,
        29945, 29900, 29966, 29888, 29898, 29955, 29897, 29966, 29953, 29900,
         1628,   395, 29955, 29900, 29966, 29888, 29898, 29947, 29897, 29966,
        29947, 29900,  1628,   395, 29945, 29900, 29900, 29900, 29895, 29966,
        29888, 29898, 29896, 29900, 29900, 29897, 29966, 29945, 29900, 29900,
        29900, 29898, 29895, 29974, 29896,  1262,   363,   777,  6043,   395,
        29895,  1504,  1724,   338,   395, 29895, 15485,    13, 29902,  8369,
          393,   395, 29888, 29898, 29896,  3892, 29900,  1628,   607,  2794,
          393,  2427, 29916, 29899, 29896,  1262,   338,   263,  7329,   310,
          395, 29888, 29898, 29916,  4935,    13,  7058,   338, 29892,   306,
          508,  2436,   395, 29888, 29898, 29916,  3892, 29898, 29916, 29899,
        29896,  5033,  8235, 29974, 29872,  1262,   363,   777, 11920,   395,
        29881, 29938,   322,   395, 29872,  1504,    13, 29902,   884,  8369,
          393,   278, 16127,   310,   395, 29888, 29898, 29916,  1262,   526,
        11920, 29892,   607,  2794,   393,   395, 29881, 29938,   322,   395,
        29872, 29938,  1818,   367, 11920,   408,  1532, 29889,    13,  4013,
        13071,   278,  1950,  1819,   310,   395, 29881, 29938,   322,   395,
        29872,  1504,    13,  1762,  1284,   395, 29881, 29938,   322,   395,
        29872,  1628,   306,   508, 18665,   297,  1790,   995,   310,   395,
        29916, 29938,   363,   607,   306,  1073,   395, 29888, 29898, 29916,
         4935,    13,  2831,  1342, 29892,   395, 29888, 29898, 29955,  1262,
          338,  1546,   395, 29945, 29900, 29938,   322,   395, 29953, 29900,
         1628,   577,   306,   508,  2436,  2427, 29955, 29899, 29896,  5033,
        29955, 29881, 29974, 29872,  3892, 29888, 29898, 29955,  1262,   322,
        21092,   372,   304,   395, 29953, 29898, 29955, 29881, 29974, 29872,
         3892, 29888, 29898, 29955,  4935,    13, 10454, 29892,   395, 29953,
        29898, 29955, 29881, 29974, 29872,  1262,  1818,   367,   263,  2999,
          310,   395, 29953, 29938,   322,  1546,   395, 29945, 29900, 29938,
          322,   395, 29953, 29900,  1504,    13,  1576,   871,  2473,  2701,
          310,   395, 29953, 29938,   297,   393,  3464,   526,   395, 29945,
        29946, 29938,   322,   395, 29953, 29900,  1504,    13]), 'labels': tensor([-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, 6374, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        6374, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, 8178]), 'attention_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1])}.
08/28/2023 20:15:47 - INFO - __main__ - Sample 10993 of the training set: {'input_ids': tensor([    1,  2803,   395, 29916, 29938,   322,   395, 29891, 29938,   367,
         1855,  3694,  1316,   393,    13, 29905, 29961, 29946, 29916, 29985,
        29906,   718, 29871, 29947,  3594,   718, 29871, 29945, 29891, 29985,
        29906,   353, 29871, 29896,  7790, 29962, 12024,   395, 29885, 29938,
          322,   395, 29924, 29938,   367,   278,  9212,   322,  7472,  1819,
          310,   395, 29906, 29916, 29985, 29906,   718, 29871, 29941,  3594,
          718, 29871, 29906, 29891, 29985, 29906,  8209,  8307, 29889, 29871,
        10987,   278,  3234,   395, 29885, 29924,  7449,    13, 29902,  8369,
          393,   278,  2183,  6306,   338,   263,   378,   293,  4004, 29892,
          322,   372,  3430,   763,   385,   560,  5843, 29889,    13]), 'labels': tensor([-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, 8178]), 'attention_mask': tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1])}.
08/28/2023 20:15:47 - INFO - accelerate.accelerator - Updating DeepSpeed's gradient accumulation steps to 16 from 1.
[2023-08-28 20:15:47,911] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed info: version=0.10.0, git-hash=unknown, git-branch=unknown
08/28/2023 20:15:47 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 0
08/28/2023 20:15:47 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 2
08/28/2023 20:15:47 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 1
08/28/2023 20:15:47 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 3
08/28/2023 20:15:47 - INFO - torch.distributed.distributed_c10d - Rank 3: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
08/28/2023 20:15:47 - INFO - torch.distributed.distributed_c10d - Rank 2: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
08/28/2023 20:15:47 - INFO - torch.distributed.distributed_c10d - Rank 1: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
08/28/2023 20:15:47 - INFO - torch.distributed.distributed_c10d - Rank 0: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
[2023-08-28 20:15:48,610] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Flops Profiler Enabled: False
[2023-08-28 20:15:48,611] [INFO] [logging.py:96:log_dist] [Rank 0] Removing param_group that has no 'params' in the client Optimizer
[2023-08-28 20:15:48,611] [INFO] [logging.py:96:log_dist] [Rank 0] Using client Optimizer as basic optimizer
[2023-08-28 20:15:48,627] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Basic Optimizer = AdamW
[2023-08-28 20:15:48,627] [INFO] [utils.py:54:is_zero_supported_optimizer] Checking ZeRO support for optimizer=AdamW type=<class 'torch.optim.adamw.AdamW'>
[2023-08-28 20:15:48,627] [INFO] [logging.py:96:log_dist] [Rank 0] Creating fp16 ZeRO stage 3 optimizer, MiCS is enabled False, Hierarchical params gather False
[2023-08-28 20:15:48,627] [INFO] [logging.py:96:log_dist] [Rank 0] Creating torch.bfloat16 ZeRO stage 3 optimizer
[2023-08-28 20:15:48,753] [INFO] [utils.py:785:see_memory_usage] Stage 3 initialize beginning
[2023-08-28 20:15:48,754] [INFO] [utils.py:786:see_memory_usage] MA 6.75 GB         Max_MA 7.45 GB         CA 8.89 GB         Max_CA 9 GB 
[2023-08-28 20:15:48,754] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 78.05 GB, percent = 7.7%
[2023-08-28 20:15:48,756] [INFO] [stage3.py:117:__init__] Reduce bucket size 26214400
[2023-08-28 20:15:48,756] [INFO] [stage3.py:118:__init__] Prefetch bucket size 23592960
[2023-08-28 20:15:48,838] [INFO] [utils.py:785:see_memory_usage] DeepSpeedZeRoOffload initialize [begin]
[2023-08-28 20:15:48,838] [INFO] [utils.py:786:see_memory_usage] MA 6.75 GB         Max_MA 6.75 GB         CA 8.89 GB         Max_CA 9 GB 
[2023-08-28 20:15:48,838] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 78.05 GB, percent = 7.7%
Parameter Offload: Total persistent parameters: 414720 in 81 params
[2023-08-28 20:15:48,935] [INFO] [utils.py:785:see_memory_usage] DeepSpeedZeRoOffload initialize [end]
[2023-08-28 20:15:48,935] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.83 GB         CA 8.89 GB         Max_CA 9 GB 
[2023-08-28 20:15:48,935] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 78.05 GB, percent = 7.7%
[2023-08-28 20:15:49,016] [INFO] [utils.py:785:see_memory_usage] Before creating fp16 partitions
[2023-08-28 20:15:49,016] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.29 GB         CA 8.89 GB         Max_CA 9 GB 
[2023-08-28 20:15:49,016] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 78.06 GB, percent = 7.7%
[2023-08-28 20:15:54,096] [INFO] [utils.py:785:see_memory_usage] After creating fp16 partitions: 4
[2023-08-28 20:15:54,097] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.29 GB         CA 7.02 GB         Max_CA 9 GB 
[2023-08-28 20:15:54,097] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 96.31 GB, percent = 9.6%
[2023-08-28 20:15:54,216] [INFO] [utils.py:785:see_memory_usage] Before creating fp32 partitions
[2023-08-28 20:15:54,216] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.29 GB         CA 7.02 GB         Max_CA 7 GB 
[2023-08-28 20:15:54,216] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 96.31 GB, percent = 9.6%
[2023-08-28 20:15:55,307] [INFO] [utils.py:785:see_memory_usage] After creating fp32 partitions
[2023-08-28 20:15:55,308] [INFO] [utils.py:786:see_memory_usage] MA 18.42 GB         Max_MA 19.43 GB         CA 22.03 GB         Max_CA 22 GB 
[2023-08-28 20:15:55,308] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 84.17 GB, percent = 8.4%
[2023-08-28 20:15:55,768] [INFO] [utils.py:785:see_memory_usage] Before initializing optimizer states
[2023-08-28 20:15:55,768] [INFO] [utils.py:786:see_memory_usage] MA 18.42 GB         Max_MA 18.42 GB         CA 22.03 GB         Max_CA 22 GB 
[2023-08-28 20:15:55,769] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 78.07 GB, percent = 7.8%
[2023-08-28 20:15:55,950] [INFO] [utils.py:785:see_memory_usage] After initializing optimizer states
[2023-08-28 20:15:55,950] [INFO] [utils.py:786:see_memory_usage] MA 42.66 GB         Max_MA 52.24 GB         CA 63.35 GB         Max_CA 63 GB 
[2023-08-28 20:15:55,950] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 78.07 GB, percent = 7.8%
[2023-08-28 20:15:56,004] [INFO] [stage3.py:424:_setup_for_real_optimizer] optimizer state initialized
[2023-08-28 20:15:56,248] [INFO] [utils.py:785:see_memory_usage] After initializing ZeRO optimizer
[2023-08-28 20:15:56,249] [INFO] [utils.py:786:see_memory_usage] MA 48.77 GB         Max_MA 49.38 GB         CA 70.29 GB         Max_CA 70 GB 
[2023-08-28 20:15:56,249] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 78.04 GB, percent = 7.7%
[2023-08-28 20:15:56,249] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Final Optimizer = AdamW
[2023-08-28 20:15:56,249] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed using client LR scheduler
[2023-08-28 20:15:56,249] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed LR Scheduler = None
[2023-08-28 20:15:56,249] [INFO] [logging.py:96:log_dist] [Rank 0] step=0, skipped=0, lr=[0.0], mom=[(0.9, 0.999)]
[2023-08-28 20:15:56,250] [INFO] [config.py:960:print] DeepSpeedEngine configuration:
[2023-08-28 20:15:56,250] [INFO] [config.py:964:print]   activation_checkpointing_config  {
    "partition_activations": false, 
    "contiguous_memory_optimization": false, 
    "cpu_checkpointing": false, 
    "number_checkpoints": null, 
    "synchronize_checkpoint_boundary": false, 
    "profile": false
}
[2023-08-28 20:15:56,250] [INFO] [config.py:964:print]   aio_config ................... {'block_size': 1048576, 'queue_depth': 8, 'thread_count': 1, 'single_submit': False, 'overlap_events': True}
[2023-08-28 20:15:56,250] [INFO] [config.py:964:print]   amp_enabled .................. False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   amp_params ................... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   autotuning_config ............ {
    "enabled": false, 
    "start_step": null, 
    "end_step": null, 
    "metric_path": null, 
    "arg_mappings": null, 
    "metric": "throughput", 
    "model_info": null, 
    "results_dir": "autotuning_results", 
    "exps_dir": "autotuning_exps", 
    "overwrite": true, 
    "fast": true, 
    "start_profile_step": 3, 
    "end_profile_step": 5, 
    "tuner_type": "gridsearch", 
    "tuner_early_stopping": 5, 
    "tuner_num_trials": 50, 
    "model_info_path": null, 
    "mp_size": 1, 
    "max_train_batch_size": null, 
    "min_train_batch_size": 1, 
    "max_train_micro_batch_size_per_gpu": 1.024000e+03, 
    "min_train_micro_batch_size_per_gpu": 1, 
    "num_tuning_micro_batch_sizes": 3
}
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   bfloat16_enabled ............. True
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   checkpoint_parallel_write_pipeline  False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   checkpoint_tag_validation_enabled  True
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   checkpoint_tag_validation_fail  False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   comms_config ................. <deepspeed.comm.config.DeepSpeedCommsConfig object at 0x7f9da5e02560>
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   communication_data_type ...... None
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   compression_config ........... {'weight_quantization': {'shared_parameters': {'enabled': False, 'quantizer_kernel': False, 'schedule_offset': 0, 'quantize_groups': 1, 'quantize_verbose': False, 'quantization_type': 'symmetric', 'quantize_weight_in_forward': False, 'rounding': 'nearest', 'fp16_mixed_quantize': False, 'quantize_change_ratio': 0.001}, 'different_groups': {}}, 'activation_quantization': {'shared_parameters': {'enabled': False, 'quantization_type': 'symmetric', 'range_calibration': 'dynamic', 'schedule_offset': 1000}, 'different_groups': {}}, 'sparse_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'row_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'head_pruning': {'shared_parameters': {'enabled': False, 'method': 'topk', 'schedule_offset': 1000}, 'different_groups': {}}, 'channel_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'layer_reduction': {'enabled': False}}
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   curriculum_enabled_legacy .... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   curriculum_params_legacy ..... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   data_efficiency_config ....... {'enabled': False, 'seed': 1234, 'data_sampling': {'enabled': False, 'num_epochs': 1000, 'num_workers': 0, 'curriculum_learning': {'enabled': False}}, 'data_routing': {'enabled': False, 'random_ltd': {'enabled': False, 'layer_token_lr_schedule': {'enabled': False}}}}
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   data_efficiency_enabled ...... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   dataloader_drop_last ......... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   disable_allgather ............ False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   dump_state ................... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   dynamic_loss_scale_args ...... None
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   eigenvalue_enabled ........... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   eigenvalue_gas_boundary_resolution  1
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   eigenvalue_layer_name ........ bert.encoder.layer
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   eigenvalue_layer_num ......... 0
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   eigenvalue_max_iter .......... 100
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   eigenvalue_stability ......... 1e-06
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   eigenvalue_tol ............... 0.01
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   eigenvalue_verbose ........... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   elasticity_enabled ........... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   flops_profiler_config ........ {
    "enabled": false, 
    "recompute_fwd_factor": 0.0, 
    "profile_step": 1, 
    "module_depth": -1, 
    "top_modules": 1, 
    "detailed": true, 
    "output_file": null
}
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   fp16_auto_cast ............... None
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   fp16_enabled ................. False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   fp16_master_weights_and_gradients  False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   global_rank .................. 0
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   grad_accum_dtype ............. None
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   gradient_accumulation_steps .. 16
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   gradient_clipping ............ 1.0
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   gradient_predivide_factor .... 1.0
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   hybrid_engine ................ enabled=False max_out_tokens=512 inference_tp_size=1 release_inference_cache=False pin_parameters=True tp_gather_partition_size=8
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   initial_dynamic_scale ........ 1
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   load_universal_checkpoint .... False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   loss_scale ................... 1.0
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   memory_breakdown ............. False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   mics_hierarchial_params_gather  False
[2023-08-28 20:15:56,251] [INFO] [config.py:964:print]   mics_shard_size .............. -1
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   monitor_config ............... tensorboard=TensorBoardConfig(enabled=False, output_path='', job_name='DeepSpeedJobName') wandb=WandbConfig(enabled=False, group=None, team=None, project='deepspeed') csv_monitor=CSVConfig(enabled=False, output_path='', job_name='DeepSpeedJobName') enabled=False
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   nebula_config ................ {
    "enabled": false, 
    "persistent_storage_path": null, 
    "persistent_time_interval": 100, 
    "num_of_version_in_retention": 2, 
    "enable_nebula_load": true, 
    "load_path": null
}
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   optimizer_legacy_fusion ...... False
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   optimizer_name ............... None
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   optimizer_params ............. None
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   pipeline ..................... {'stages': 'auto', 'partition': 'best', 'seed_layers': False, 'activation_checkpoint_interval': 0}
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   pld_enabled .................. False
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   pld_params ................... False
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   prescale_gradients ........... False
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   scheduler_name ............... None
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   scheduler_params ............. None
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   sparse_attention ............. None
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   sparse_gradients_enabled ..... False
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   steps_per_print .............. inf
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   train_batch_size ............. 128
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   train_micro_batch_size_per_gpu  2
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   use_node_local_storage ....... False
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   wall_clock_breakdown ......... False
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   world_size ................... 4
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   zero_allow_untested_optimizer  True
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   zero_config .................. stage=3 contiguous_gradients=True reduce_scatter=True reduce_bucket_size=26214400 allgather_partitions=True allgather_bucket_size=500,000,000 overlap_comm=True load_from_fp32_weights=True elastic_checkpoint=False offload_param=None offload_optimizer=None sub_group_size=1000000000 cpu_offload_param=None cpu_offload_use_pin_memory=None cpu_offload=None prefetch_bucket_size=23592960 param_persistence_threshold=51200 model_persistence_threshold=sys.maxsize max_live_parameters=1000000000 max_reuse_distance=1000000000 gather_16bit_weights_on_model_save=True stage3_gather_fp16_weights_on_model_save=False ignore_unused_parameters=True legacy_stage1=False round_robin_gradients=False zero_hpz_partition_size=1 zero_quantized_weights=False zero_quantized_gradients=False mics_shard_size=-1 mics_hierarchical_params_gather=False memory_efficient_linear=True
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   zero_enabled ................. True
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   zero_force_ds_cpu_optimizer .. True
[2023-08-28 20:15:56,252] [INFO] [config.py:964:print]   zero_optimization_stage ...... 3
[2023-08-28 20:15:56,252] [INFO] [config.py:950:print_user_config]   json = {
    "bf16": {
        "enabled": true
    }, 
    "zero_optimization": {
        "stage": 3, 
        "overlap_comm": true, 
        "contiguous_gradients": true, 
        "sub_group_size": 1.000000e+09, 
        "reduce_bucket_size": 2.621440e+07, 
        "stage3_prefetch_bucket_size": 2.359296e+07, 
        "stage3_param_persistence_threshold": 5.120000e+04, 
        "stage3_max_live_parameters": 1.000000e+09, 
        "stage3_max_reuse_distance": 1.000000e+09, 
        "stage3_gather_16bit_weights_on_model_save": true
    }, 
    "gradient_accumulation_steps": 16, 
    "gradient_clipping": 1.0, 
    "steps_per_print": inf, 
    "train_batch_size": 128, 
    "train_micro_batch_size_per_gpu": 2, 
    "wall_clock_breakdown": false, 
    "fp16": {
        "enabled": false
    }, 
    "zero_allow_untested_optimizer": true
}
wandb: Currently logged in as: kidrain61. Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: Tracking run with wandb version 0.15.8
wandb: Run data is saved locally in /data/users/zhangjunlei/tyx/wandb/wandb/run-20230828_201558-ncd5korp
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run 2023-08-28-1
wandb: ⭐️ View project at https://wandb.ai/kidrain61/open_instruct
wandb: 🚀 View run at https://wandb.ai/kidrain61/open_instruct/runs/ncd5korp
08/28/2023 20:16:03 - INFO - __main__ - ***** Running training *****
08/28/2023 20:16:03 - INFO - __main__ -   Num examples = 87012
08/28/2023 20:16:03 - INFO - __main__ -   Num Epochs = 3
08/28/2023 20:16:03 - INFO - __main__ -   Instantaneous batch size per device = 2
08/28/2023 20:16:03 - INFO - __main__ -   Total train batch size (w. parallel, distributed & accumulation) = 128
08/28/2023 20:16:03 - INFO - __main__ -   Gradient Accumulation steps = 16
08/28/2023 20:16:03 - INFO - __main__ -   Total optimization steps = 2040
  0%|          | 0/2040 [00:00<?, ?it/s][2023-08-28 20:16:22,881] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 1/2040 [00:19<11:09:05, 19.69s/it]08/28/2023 20:16:22 - INFO - __main__ -   Step: 1, LR: 3.278688524590164e-07, Loss: 18.366628646850586
[2023-08-28 20:16:40,956] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 2/2040 [00:37<10:36:30, 18.74s/it]08/28/2023 20:16:40 - INFO - __main__ -   Step: 2, LR: 6.557377049180328e-07, Loss: 18.16778564453125
[2023-08-28 20:16:57,960] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 3/2040 [00:54<10:09:18, 17.95s/it]08/28/2023 20:16:57 - INFO - __main__ -   Step: 3, LR: 9.836065573770493e-07, Loss: 18.33402442932129
[2023-08-28 20:17:12,458] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 4/2040 [01:09<9:22:47, 16.59s/it] 08/28/2023 20:17:12 - INFO - __main__ -   Step: 4, LR: 1.3114754098360657e-06, Loss: 18.23031997680664
[2023-08-28 20:17:30,857] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 5/2040 [01:27<9:44:42, 17.24s/it]08/28/2023 20:17:30 - INFO - __main__ -   Step: 5, LR: 1.6393442622950819e-06, Loss: 18.215923309326172
[2023-08-28 20:17:47,183] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 6/2040 [01:43<9:33:53, 16.93s/it]08/28/2023 20:17:47 - INFO - __main__ -   Step: 6, LR: 1.9672131147540985e-06, Loss: 17.894573211669922
[2023-08-28 20:18:04,236] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 7/2040 [02:01<9:34:58, 16.97s/it]08/28/2023 20:18:04 - INFO - __main__ -   Step: 7, LR: 2.295081967213115e-06, Loss: 16.997112274169922
[2023-08-28 20:18:21,612] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 8/2040 [02:18<9:39:04, 17.10s/it]08/28/2023 20:18:21 - INFO - __main__ -   Step: 8, LR: 2.6229508196721314e-06, Loss: 16.83635902404785
[2023-08-28 20:18:38,194] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 9/2040 [02:35<9:33:19, 16.94s/it]08/28/2023 20:18:38 - INFO - __main__ -   Step: 9, LR: 2.9508196721311478e-06, Loss: 12.870062828063965
[2023-08-28 20:18:55,676] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 10/2040 [02:52<9:38:44, 17.11s/it]08/28/2023 20:18:55 - INFO - __main__ -   Step: 10, LR: 3.2786885245901638e-06, Loss: 12.311760902404785
[2023-08-28 20:19:12,934] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 11/2040 [03:09<9:40:01, 17.15s/it]08/28/2023 20:19:12 - INFO - __main__ -   Step: 11, LR: 3.6065573770491806e-06, Loss: 11.333155632019043
[2023-08-28 20:19:28,123] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 12/2040 [03:24<9:19:33, 16.56s/it]08/28/2023 20:19:28 - INFO - __main__ -   Step: 12, LR: 3.934426229508197e-06, Loss: 3.817458391189575
[2023-08-28 20:19:44,608] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 13/2040 [03:41<9:18:33, 16.53s/it]08/28/2023 20:19:44 - INFO - __main__ -   Step: 13, LR: 4.2622950819672135e-06, Loss: 3.108931541442871
[2023-08-28 20:20:02,350] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 14/2040 [03:59<9:30:36, 16.90s/it]08/28/2023 20:20:02 - INFO - __main__ -   Step: 14, LR: 4.59016393442623e-06, Loss: 2.183156967163086
[2023-08-28 20:20:17,551] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 15/2040 [04:14<9:13:03, 16.39s/it]08/28/2023 20:20:17 - INFO - __main__ -   Step: 15, LR: 4.918032786885246e-06, Loss: 2.090681552886963
[2023-08-28 20:20:36,196] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 16/2040 [04:33<9:35:42, 17.07s/it]08/28/2023 20:20:36 - INFO - __main__ -   Step: 16, LR: 5.245901639344263e-06, Loss: 1.1593329906463623
[2023-08-28 20:20:51,736] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 17/2040 [04:48<9:19:57, 16.61s/it]08/28/2023 20:20:51 - INFO - __main__ -   Step: 17, LR: 5.573770491803278e-06, Loss: 0.773868978023529
[2023-08-28 20:21:06,435] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 18/2040 [05:03<9:00:20, 16.03s/it]08/28/2023 20:21:06 - INFO - __main__ -   Step: 18, LR: 5.9016393442622956e-06, Loss: 1.6604927778244019
[2023-08-28 20:21:22,932] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 19/2040 [05:19<9:04:45, 16.17s/it]08/28/2023 20:21:22 - INFO - __main__ -   Step: 19, LR: 6.229508196721312e-06, Loss: 1.5874550342559814
[2023-08-28 20:21:39,589] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 20/2040 [05:36<9:09:23, 16.32s/it]08/28/2023 20:21:39 - INFO - __main__ -   Step: 20, LR: 6.5573770491803276e-06, Loss: 0.8264721632003784
[2023-08-28 20:21:57,930] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 21/2040 [05:54<9:29:32, 16.93s/it]08/28/2023 20:21:57 - INFO - __main__ -   Step: 21, LR: 6.885245901639345e-06, Loss: 0.8386383056640625
[2023-08-28 20:22:12,967] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 22/2040 [06:09<9:10:11, 16.36s/it]08/28/2023 20:22:12 - INFO - __main__ -   Step: 22, LR: 7.213114754098361e-06, Loss: 0.8495973348617554
[2023-08-28 20:22:29,950] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 23/2040 [06:26<9:16:13, 16.55s/it]08/28/2023 20:22:29 - INFO - __main__ -   Step: 23, LR: 7.540983606557377e-06, Loss: 0.7530717253684998
[2023-08-28 20:22:46,412] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 24/2040 [06:43<9:15:06, 16.52s/it]08/28/2023 20:22:46 - INFO - __main__ -   Step: 24, LR: 7.868852459016394e-06, Loss: 0.7055044770240784
[2023-08-28 20:23:03,384] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 25/2040 [07:00<9:19:21, 16.66s/it]08/28/2023 20:23:03 - INFO - __main__ -   Step: 25, LR: 8.19672131147541e-06, Loss: 0.7617897391319275
[2023-08-28 20:23:20,859] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 26/2040 [07:17<9:27:20, 16.90s/it]08/28/2023 20:23:20 - INFO - __main__ -   Step: 26, LR: 8.524590163934427e-06, Loss: 0.6900375485420227
[2023-08-28 20:23:37,642] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 27/2040 [07:34<9:25:51, 16.87s/it]08/28/2023 20:23:37 - INFO - __main__ -   Step: 27, LR: 8.852459016393443e-06, Loss: 0.8280249238014221
[2023-08-28 20:23:55,181] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 28/2040 [07:51<9:32:20, 17.07s/it]08/28/2023 20:23:55 - INFO - __main__ -   Step: 28, LR: 9.18032786885246e-06, Loss: 0.8011626601219177
[2023-08-28 20:24:11,004] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 29/2040 [08:07<9:19:33, 16.69s/it]08/28/2023 20:24:11 - INFO - __main__ -   Step: 29, LR: 9.508196721311476e-06, Loss: 0.687086284160614
[2023-08-28 20:24:29,203] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 30/2040 [08:26<9:34:23, 17.15s/it]08/28/2023 20:24:29 - INFO - __main__ -   Step: 30, LR: 9.836065573770493e-06, Loss: 0.6577595472335815
[2023-08-28 20:24:46,990] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 31/2040 [08:43<9:40:32, 17.34s/it]08/28/2023 20:24:46 - INFO - __main__ -   Step: 31, LR: 1.0163934426229509e-05, Loss: 0.6904876828193665
WARNING:torch.distributed.elastic.agent.server.api:Received 15 death signal, shutting down workers
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 2218923 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 2218924 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 2218925 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 2218926 closing signal SIGTERM
Traceback (most recent call last):
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/bin/accelerate", line 8, in <module>
    sys.exit(main())
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/accelerate/commands/accelerate_cli.py", line 45, in main
    args.func(args)
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/accelerate/commands/launch.py", line 964, in launch_command
    deepspeed_launcher(args)
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/accelerate/commands/launch.py", line 687, in deepspeed_launcher
    distrib_run.run(args)
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/distributed/run.py", line 785, in run
    elastic_launch(
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 134, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 241, in launch_agent
    result = agent.run()
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/distributed/elastic/metrics/api.py", line 129, in wrapper
    result = f(*args, **kwargs)
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/api.py", line 723, in run
    result = self._invoke_run(role)
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/api.py", line 864, in _invoke_run
    time.sleep(monitor_interval)
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/api.py", line 62, in _terminate_process_handler
    raise SignalException(f"Process {os.getpid()} got signal: {sigval}", sigval=sigval)
torch.distributed.elastic.multiprocessing.api.SignalException: Process 2218766 got signal: 15
