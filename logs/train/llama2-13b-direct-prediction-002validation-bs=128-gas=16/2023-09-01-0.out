nohup: ignoring input
[2023-09-01 00:30:34,171] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
The following values were not passed to `accelerate launch` and had defaults used instead:
		More than one GPU was found, enabling multi-GPU training.
		If this was unintended please pass in `--num_processes=1`.
	`--dynamo_backend` was set to a value of `'no'`
To avoid this warning pass in values for each of the problematic parameters or run `accelerate config`.
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
[2023-09-01 00:30:39,742] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-09-01 00:30:39,763] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-09-01 00:30:39,775] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-09-01 00:30:39,779] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-09-01 00:30:41,210] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-09-01 00:30:41,211] [INFO] [comm.py:616:init_distributed] cdb=None
[2023-09-01 00:30:41,211] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-09-01 00:30:41,211] [INFO] [comm.py:616:init_distributed] cdb=None
[2023-09-01 00:30:41,228] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-09-01 00:30:41,229] [INFO] [comm.py:616:init_distributed] cdb=None
[2023-09-01 00:30:41,229] [INFO] [comm.py:643:init_distributed] Initializing TorchBackend in DeepSpeed with backend nccl
[2023-09-01 00:30:41,233] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-09-01 00:30:41,233] [INFO] [comm.py:616:init_distributed] cdb=None
09/01/2023 00:30:41 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 0
Local process index: 0
Device: cuda:0

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

09/01/2023 00:30:41 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 2
Local process index: 2
Device: cuda:2

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

09/01/2023 00:30:41 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 3
Local process index: 3
Device: cuda:3

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

09/01/2023 00:30:41 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 1
Local process index: 1
Device: cuda:1

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

loading configuration file /data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936/config.json
Model config LlamaConfig {
  "_name_or_path": "/data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936",
  "architectures": [
    "LlamaForCausalLM"
  ],
  "bos_token_id": 1,
  "eos_token_id": 2,
  "hidden_act": "silu",
  "hidden_size": 5120,
  "initializer_range": 0.02,
  "intermediate_size": 13824,
  "max_position_embeddings": 4096,
  "model_type": "llama",
  "num_attention_heads": 40,
  "num_hidden_layers": 40,
  "num_key_value_heads": 40,
  "pad_token_id": 0,
  "pretraining_tp": 1,
  "rms_norm_eps": 1e-05,
  "rope_scaling": null,
  "tie_word_embeddings": false,
  "torch_dtype": "float16",
  "transformers_version": "4.31.0",
  "use_cache": true,
  "vocab_size": 32000
}

loading file tokenizer.model
loading file added_tokens.json
loading file special_tokens_map.json
loading file tokenizer_config.json
You are using the legacy behaviour of the <class 'transformers.models.llama.tokenization_llama.LlamaTokenizer'>. This means that tokens that come after special tokens will not be properly handled. We recommend you to read the related pull request available at https://github.com/huggingface/transformers/pull/24565
loading weights file /data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936/model.safetensors.index.json
Detected DeepSpeed ZeRO-3: activating zero.init() for this model
Generate config GenerationConfig {
  "_from_model_config": true,
  "bos_token_id": 1,
  "eos_token_id": 2,
  "pad_token_id": 0,
  "transformers_version": "4.31.0"
}

[2023-09-01 00:30:55,842] [INFO] [partition_parameters.py:326:__exit__] finished initializing model with 13.02B parameters
Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:00,  2.14it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:01,  1.98it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:01,  1.99it/s]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:03<00:02,  2.21s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:03<00:02,  2.21s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:03<00:02,  2.21s/it]Loading checkpoint shards:  33%|███▎      | 1/3 [00:05<00:10,  5.18s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.65s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.36s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.65s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.36s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.66s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.36s/it]
Loading checkpoint shards:  67%|██████▋   | 2/3 [00:11<00:05,  5.80s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:16<00:00,  5.43s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:16<00:00,  5.47s/it]
All model checkpoint weights were used when initializing LlamaForCausalLM.

All the weights of LlamaForCausalLM were initialized from the model checkpoint at /data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936.
If your task is similar to the task the model of the checkpoint was trained on, you can already use LlamaForCausalLM for predictions without further training.
Generation config file not found, using a generation config created from the model config.
Assigning <s> to the bos_token key of the tokenizer
Assigning </s> to the eos_token key of the tokenizer
Assigning <unk> to the unk_token key of the tokenizer
Assigning <pad> to the pad_token key of the tokenizer
Adding <pad> to the vocabulary
09/01/2023 00:31:13 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 1
09/01/2023 00:31:13 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 3
09/01/2023 00:31:13 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 2
09/01/2023 00:31:14 - INFO - __main__ - Sample 18115 of the training set: {'input_ids': tensor([    1,   395,  2882,  6530, 29938,   338,   263,  4943,   260, 27280,
        17143,  1617,   313,  1266,  3367,  6825, 11451,  2572,   333,   467,
        29871,   960,   395, 29924, 29938,   338,   278,  7145,  3149,   310,
          779,  6875, 29912,  6530,  4429,   769,   825,   338,   779, 13161,
        29905,  2521,   319,  9486, 15485,    13, 29902,   864,   304,  1284,
          278, 11959,   310,   278, 11564,   322, 20114, 11192,   310,   278,
         1492, 17205,   395,  5194, 29933,  1504,    13]), 'labels': tensor([-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, 8178])}.
09/01/2023 00:31:14 - INFO - __main__ - Sample 46430 of the training set: {'input_ids': tensor([    1, 10987,   278,  1855, 16778,   310,    13, 29905, 29961, 29916,
        29985, 29946,   448, 29871, 29906, 29916, 29985, 29941,   448,   921,
          718, 29871, 29906,   353, 29871, 29900,  7790, 29962,    13, 29902,
         8369,   393,   445, 10159,   756,  3023,  4958, 29892,   577,   306,
         4997,   565,   306,   508,  7329,   372,   491, 27270, 29889,    13,
        29902,  1018,   304,  2318,   278,   937,  1023,  4958,   322,   278,
         1833,  1023,  4958,  4208, 29892,   322,  1106,   363,   263,  3619,
         7329,   297,  1269,  2318, 29889,    13,   797,   278,   937,  2318,
        29892,   306,   508,  7329,   714,   921, 29985, 29941, 29892,   322,
          297,   278,  1473,  2318, 29892,   306,   508,  7329,   714,   448,
        29896, 29892,  6820,   592,    13, 29905, 29961, 29916, 29985, 29941,
        29898, 29916,   448, 29871, 29906, 29897,   448, 29871, 29896, 29898,
        29916,   448, 29871, 29906, 29897,   353, 29871, 29900,  7790, 29962,
           13, 10454,   306,  1074,   393,   306,   505,   263,  3619,  7329,
          310,   313, 29916,   448, 29871, 29906, 29897,   297,  1716,  4958,
        29892,   577,   306,   508,  7329,   393,   714,   408,  1532, 29892,
         6820,   592,    13, 29905, 15625, 29916,   448, 29871, 29906,  5033,
        29916, 29985, 29941,   448, 29871, 29896, 29897,   353, 29871, 29900,
         7790, 29962,    13, 10454,   306,   505,   263,  3234,   310,  1023,
        13879,  5186,   304,  5225, 29892,   577,   306,   508,   671,   278,
         5225,  3234,  2875,   304,   731,  1269,  7329,  5186,   304,  5225,
          322,  4505,   363,   921, 29889,    13, 29020,   921,   448, 29871,
        29906,  5186,   304,  5225, 29892,   306,   679,   921,   353, 29871,
        29906,   408,   697,  1855,  3876, 29889,    13, 29020,   921, 29985,
        29941,   448, 29871, 29896,  5186,   304,  5225, 29892,   306,   679,
          921, 29985, 29941,   353, 29871, 29896, 29892,   607,  2794,   921,
          353, 29871, 29896,   338,  1790,  1855,  3876, 29889,    13, 17245,
        29892,   921, 29985, 29941,   448, 29871, 29896,   338,   884,   263,
         4328,   310, 13630,   267, 29892,   577,   306,   508,  7329,   372,
         4340,   773,   278,  7063,    13, 29905, 29961, 29874, 29985, 29941,
          448,   289, 29985, 29941,   353,   313, 29874,   448,   289,  5033,
        29874, 29985, 29906,   718,   633,   718,   289, 29985, 29906,   467,
        18899,    13,   797,   445,  1206, 29892,   263,   353,   921,   322,
          289,   353, 29871, 29896, 29892,   577,   306,   679,    13, 29905,
        29961, 29916, 29985, 29941,   448, 29871, 29896,   353,   313, 29916,
          448, 29871, 29896,  5033, 29916, 29985, 29906,   718,   921,   718,
        29871, 29896, 29897,   353, 29871, 29900,  7790, 29962,    13, 29902,
         2307,  1476,   921,   353, 29871, 29896,   408,   263,  3876,   515,
          278,   937,  7329, 29892,   577,   306,   871,   817,   304,  1106,
          472,   278,  1473,  7329, 29892,   921, 29985, 29906,   718,   921,
          718, 29871, 29896, 29889,    13,  4013,   338,   263, 25904,  6306,
        29892,   577,   306,   508,   671,   278, 25904,  7063,   304,  1284,
          278, 16778, 29892,   565,   896,  1863, 29889,    13,  1576, 25904,
         7063,   338,    13, 29905, 29961, 29916,   353,   320,  1154,  8499,
        29890,   320,  3358,   320,  3676, 29912, 29890, 29985, 29906,   448,
        29871, 29946,   562,  7585, 29906, 29874,  7570, 29962,    13,  3062,
          263, 29892,   289, 29892,   322,   274,   526,   278, 16127,   310,
          278, 25904,  6306,    13, 29905, 29961,  1165, 29985, 29906,   718,
          289, 29916,   718,   274,   353, 29871, 29900,  7790, 29962,    13,
          797,   445,  1206, 29892,   263,   353, 29871, 29896, 29892,   289,
          353, 29871, 29896, 29892,   322,   274,   353, 29871, 29896, 29892,
          577,   306, 18665,  1438,  1819,   964,   278,  7063,   322,   679,
           13, 29905, 29961, 29916,   353,   320,  1154,  8499, 29896,   320,
         3358,   320,  3676, 29912, 29896, 29985, 29906,   448, 29871, 29946,
        29898, 29896,  5033, 29896, 29897,  7585, 29906, 29898, 29896, 29512,
        18899,    13,  8942,   572,  9215, 29892,   306,   679,    13, 29905,
        29961, 29916,   353,   320,  1154,  8499, 29896,   320,  3358,   320,
         3676,  8499, 29941,  7585, 29906,  1836, 18899,    13, 10454,   306,
         8369,   393,   306,   505,   263,  8178,  1353,  1090,   278,  6862,
         3876, 29892,   607,  2794,   727,   526,   694,  1855, 16778,   515,
          445,  7329, 29889,    13,  8439,  1079, 29892,   278,   871,  1855,
        16778,   310,   278,  2441,  6306,   526,   921,   353, 29871, 29906,
          322,   921,   353, 29871, 29896, 29889,    13, 29937,   673,    13,
           13, 29906, 29892, 29871, 29896,    13]), 'labels': tensor([-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, 6374,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, 6374,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100, 6374])}.
09/01/2023 00:31:14 - INFO - __main__ - Sample 28243 of the training set: {'input_ids': tensor([    1,   319,  5112,   513,  4871,   338,   263,  1353,   393,   338,
          278,  1021,   746,  1303,   363,  2935,   322, 28953, 29892,  1316,
          408,   395, 29946, 29941, 29906, 29941, 29946,  1504,  1724,   338,
          278, 19087,  5320, 29899, 26204,  5112,   513,  4871,   393,   338,
         8572,  1821,   491,   395, 29896, 29896, 15485,    13,  1762,  1284,
          278, 19087,  5320, 29899, 26204,  5112,   513,  4871, 29892,   306,
          864,   304,  1369,   411,   278, 19087,  1950, 13340,   297,   278,
         2175,  3242,   322,  1492,  3242, 11909, 29892,   607,   526,   395,
        29896, 29938,   322,   395, 29896,  1504,    13, 11760, 29892,   304,
         1207,   278,  1353,  8572,  1821,   491,   395, 29896, 29896,  1628,
          306,   817,   304,   671,   278,  8572,  4127,  5751,   363,   395,
        29896, 29896,  1628,   607,  4083,   393,   278,  4328,  1546,   278,
         2533,   310,   278,  7736, 29899,  3283,   287, 13340,   322,   278,
         2533,   310,   278,  1584, 29899,  3283,   287, 13340,  1818,   367,
          263,  2999,   310,   395, 29896, 29896,  1504,    13,  6295, 29892,
          565,   278,  1353,   338,   395, 29896,   370, 29896,  1628,   988,
          395, 29874, 29938,   322,   395, 29890, 29938,   526,   278,  7256,
        13340, 29892,   769,   306,   505,  2427, 29896,   718,   289, 29897,
          448,   313, 29874,   718, 29871, 29896, 29897,   353, 29871, 29900,
         1628,   395, 29896, 29896,  1628,   470, 15727, 29896, 29896,  1628,
         8679,   373,   278,  1819,   310,   395, 29874, 29938,   322,   395,
        29890,  1504,    13]), 'labels': tensor([-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, 8178])}.
09/01/2023 00:31:14 - INFO - accelerate.accelerator - Since you passed both train and evaluation dataloader, `is_train_batch_min` (here True will decide the `train_batch_size` (2).
09/01/2023 00:31:14 - INFO - accelerate.accelerator - Updating DeepSpeed's gradient accumulation steps to 16 from 1.
[2023-09-01 00:31:14,601] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed info: version=0.10.0, git-hash=unknown, git-branch=unknown
09/01/2023 00:31:14 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 0
09/01/2023 00:31:14 - INFO - torch.distributed.distributed_c10d - Rank 0: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
09/01/2023 00:31:14 - INFO - torch.distributed.distributed_c10d - Rank 3: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
09/01/2023 00:31:14 - INFO - torch.distributed.distributed_c10d - Rank 1: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
09/01/2023 00:31:14 - INFO - torch.distributed.distributed_c10d - Rank 2: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
[2023-09-01 00:31:15,338] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Flops Profiler Enabled: False
[2023-09-01 00:31:15,339] [INFO] [logging.py:96:log_dist] [Rank 0] Removing param_group that has no 'params' in the client Optimizer
[2023-09-01 00:31:15,339] [INFO] [logging.py:96:log_dist] [Rank 0] Using client Optimizer as basic optimizer
[2023-09-01 00:31:15,355] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Basic Optimizer = AdamW
[2023-09-01 00:31:15,355] [INFO] [utils.py:54:is_zero_supported_optimizer] Checking ZeRO support for optimizer=AdamW type=<class 'torch.optim.adamw.AdamW'>
[2023-09-01 00:31:15,355] [INFO] [logging.py:96:log_dist] [Rank 0] Creating fp16 ZeRO stage 3 optimizer, MiCS is enabled False, Hierarchical params gather False
[2023-09-01 00:31:15,355] [INFO] [logging.py:96:log_dist] [Rank 0] Creating torch.bfloat16 ZeRO stage 3 optimizer
[2023-09-01 00:31:15,495] [INFO] [utils.py:785:see_memory_usage] Stage 3 initialize beginning
[2023-09-01 00:31:15,496] [INFO] [utils.py:786:see_memory_usage] MA 6.75 GB         Max_MA 7.45 GB         CA 9.02 GB         Max_CA 9 GB 
[2023-09-01 00:31:15,496] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 87.87 GB, percent = 8.7%
[2023-09-01 00:31:15,498] [INFO] [stage3.py:117:__init__] Reduce bucket size 26214400
[2023-09-01 00:31:15,498] [INFO] [stage3.py:118:__init__] Prefetch bucket size 23592960
[2023-09-01 00:31:15,591] [INFO] [utils.py:785:see_memory_usage] DeepSpeedZeRoOffload initialize [begin]
[2023-09-01 00:31:15,591] [INFO] [utils.py:786:see_memory_usage] MA 6.75 GB         Max_MA 6.75 GB         CA 9.02 GB         Max_CA 9 GB 
[2023-09-01 00:31:15,591] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 87.87 GB, percent = 8.7%
Parameter Offload: Total persistent parameters: 414720 in 81 params
[2023-09-01 00:31:15,704] [INFO] [utils.py:785:see_memory_usage] DeepSpeedZeRoOffload initialize [end]
[2023-09-01 00:31:15,704] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.83 GB         CA 9.02 GB         Max_CA 9 GB 
[2023-09-01 00:31:15,704] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 87.87 GB, percent = 8.7%
[2023-09-01 00:31:15,800] [INFO] [utils.py:785:see_memory_usage] Before creating fp16 partitions
[2023-09-01 00:31:15,800] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.29 GB         CA 9.02 GB         Max_CA 9 GB 
[2023-09-01 00:31:15,801] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 87.88 GB, percent = 8.7%
[2023-09-01 00:31:21,235] [INFO] [utils.py:785:see_memory_usage] After creating fp16 partitions: 4
[2023-09-01 00:31:21,236] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.29 GB         CA 6.89 GB         Max_CA 9 GB 
[2023-09-01 00:31:21,236] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 93.97 GB, percent = 9.3%
[2023-09-01 00:31:21,359] [INFO] [utils.py:785:see_memory_usage] Before creating fp32 partitions
[2023-09-01 00:31:21,359] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.29 GB         CA 6.89 GB         Max_CA 7 GB 
[2023-09-01 00:31:21,360] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 93.97 GB, percent = 9.3%
[2023-09-01 00:31:21,501] [INFO] [utils.py:785:see_memory_usage] After creating fp32 partitions
[2023-09-01 00:31:21,502] [INFO] [utils.py:786:see_memory_usage] MA 18.42 GB         Max_MA 19.43 GB         CA 21.9 GB         Max_CA 22 GB 
[2023-09-01 00:31:21,502] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 93.97 GB, percent = 9.3%
[2023-09-01 00:31:22,058] [INFO] [utils.py:785:see_memory_usage] Before initializing optimizer states
[2023-09-01 00:31:22,058] [INFO] [utils.py:786:see_memory_usage] MA 18.42 GB         Max_MA 18.42 GB         CA 21.9 GB         Max_CA 22 GB 
[2023-09-01 00:31:22,058] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 87.87 GB, percent = 8.7%
[2023-09-01 00:31:22,219] [INFO] [utils.py:785:see_memory_usage] After initializing optimizer states
[2023-09-01 00:31:22,220] [INFO] [utils.py:786:see_memory_usage] MA 42.66 GB         Max_MA 52.24 GB         CA 63.22 GB         Max_CA 63 GB 
[2023-09-01 00:31:22,220] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 87.87 GB, percent = 8.7%
[2023-09-01 00:31:22,266] [INFO] [stage3.py:424:_setup_for_real_optimizer] optimizer state initialized
[2023-09-01 00:31:22,515] [INFO] [utils.py:785:see_memory_usage] After initializing ZeRO optimizer
[2023-09-01 00:31:22,515] [INFO] [utils.py:786:see_memory_usage] MA 48.77 GB         Max_MA 49.38 GB         CA 70.3 GB         Max_CA 70 GB 
[2023-09-01 00:31:22,515] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 87.88 GB, percent = 8.7%
[2023-09-01 00:31:22,515] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Final Optimizer = AdamW
[2023-09-01 00:31:22,515] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed using client LR scheduler
[2023-09-01 00:31:22,515] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed LR Scheduler = None
[2023-09-01 00:31:22,516] [INFO] [logging.py:96:log_dist] [Rank 0] step=0, skipped=0, lr=[0.0], mom=[(0.9, 0.999)]
[2023-09-01 00:31:22,516] [INFO] [config.py:960:print] DeepSpeedEngine configuration:
[2023-09-01 00:31:22,516] [INFO] [config.py:964:print]   activation_checkpointing_config  {
    "partition_activations": false, 
    "contiguous_memory_optimization": false, 
    "cpu_checkpointing": false, 
    "number_checkpoints": null, 
    "synchronize_checkpoint_boundary": false, 
    "profile": false
}
[2023-09-01 00:31:22,516] [INFO] [config.py:964:print]   aio_config ................... {'block_size': 1048576, 'queue_depth': 8, 'thread_count': 1, 'single_submit': False, 'overlap_events': True}
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   amp_enabled .................. False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   amp_params ................... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   autotuning_config ............ {
    "enabled": false, 
    "start_step": null, 
    "end_step": null, 
    "metric_path": null, 
    "arg_mappings": null, 
    "metric": "throughput", 
    "model_info": null, 
    "results_dir": "autotuning_results", 
    "exps_dir": "autotuning_exps", 
    "overwrite": true, 
    "fast": true, 
    "start_profile_step": 3, 
    "end_profile_step": 5, 
    "tuner_type": "gridsearch", 
    "tuner_early_stopping": 5, 
    "tuner_num_trials": 50, 
    "model_info_path": null, 
    "mp_size": 1, 
    "max_train_batch_size": null, 
    "min_train_batch_size": 1, 
    "max_train_micro_batch_size_per_gpu": 1.024000e+03, 
    "min_train_micro_batch_size_per_gpu": 1, 
    "num_tuning_micro_batch_sizes": 3
}
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   bfloat16_enabled ............. True
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   checkpoint_parallel_write_pipeline  False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   checkpoint_tag_validation_enabled  True
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   checkpoint_tag_validation_fail  False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   comms_config ................. <deepspeed.comm.config.DeepSpeedCommsConfig object at 0x7f2cc48d2410>
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   communication_data_type ...... None
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   compression_config ........... {'weight_quantization': {'shared_parameters': {'enabled': False, 'quantizer_kernel': False, 'schedule_offset': 0, 'quantize_groups': 1, 'quantize_verbose': False, 'quantization_type': 'symmetric', 'quantize_weight_in_forward': False, 'rounding': 'nearest', 'fp16_mixed_quantize': False, 'quantize_change_ratio': 0.001}, 'different_groups': {}}, 'activation_quantization': {'shared_parameters': {'enabled': False, 'quantization_type': 'symmetric', 'range_calibration': 'dynamic', 'schedule_offset': 1000}, 'different_groups': {}}, 'sparse_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'row_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'head_pruning': {'shared_parameters': {'enabled': False, 'method': 'topk', 'schedule_offset': 1000}, 'different_groups': {}}, 'channel_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'layer_reduction': {'enabled': False}}
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   curriculum_enabled_legacy .... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   curriculum_params_legacy ..... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   data_efficiency_config ....... {'enabled': False, 'seed': 1234, 'data_sampling': {'enabled': False, 'num_epochs': 1000, 'num_workers': 0, 'curriculum_learning': {'enabled': False}}, 'data_routing': {'enabled': False, 'random_ltd': {'enabled': False, 'layer_token_lr_schedule': {'enabled': False}}}}
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   data_efficiency_enabled ...... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   dataloader_drop_last ......... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   disable_allgather ............ False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   dump_state ................... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   dynamic_loss_scale_args ...... None
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   eigenvalue_enabled ........... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   eigenvalue_gas_boundary_resolution  1
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   eigenvalue_layer_name ........ bert.encoder.layer
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   eigenvalue_layer_num ......... 0
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   eigenvalue_max_iter .......... 100
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   eigenvalue_stability ......... 1e-06
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   eigenvalue_tol ............... 0.01
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   eigenvalue_verbose ........... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   elasticity_enabled ........... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   flops_profiler_config ........ {
    "enabled": false, 
    "recompute_fwd_factor": 0.0, 
    "profile_step": 1, 
    "module_depth": -1, 
    "top_modules": 1, 
    "detailed": true, 
    "output_file": null
}
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   fp16_auto_cast ............... None
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   fp16_enabled ................. False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   fp16_master_weights_and_gradients  False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   global_rank .................. 0
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   grad_accum_dtype ............. None
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   gradient_accumulation_steps .. 16
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   gradient_clipping ............ 1.0
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   gradient_predivide_factor .... 1.0
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   hybrid_engine ................ enabled=False max_out_tokens=512 inference_tp_size=1 release_inference_cache=False pin_parameters=True tp_gather_partition_size=8
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   initial_dynamic_scale ........ 1
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   load_universal_checkpoint .... False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   loss_scale ................... 1.0
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   memory_breakdown ............. False
[2023-09-01 00:31:22,517] [INFO] [config.py:964:print]   mics_hierarchial_params_gather  False
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   mics_shard_size .............. -1
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   monitor_config ............... tensorboard=TensorBoardConfig(enabled=False, output_path='', job_name='DeepSpeedJobName') wandb=WandbConfig(enabled=False, group=None, team=None, project='deepspeed') csv_monitor=CSVConfig(enabled=False, output_path='', job_name='DeepSpeedJobName') enabled=False
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   nebula_config ................ {
    "enabled": false, 
    "persistent_storage_path": null, 
    "persistent_time_interval": 100, 
    "num_of_version_in_retention": 2, 
    "enable_nebula_load": true, 
    "load_path": null
}
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   optimizer_legacy_fusion ...... False
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   optimizer_name ............... None
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   optimizer_params ............. None
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   pipeline ..................... {'stages': 'auto', 'partition': 'best', 'seed_layers': False, 'activation_checkpoint_interval': 0}
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   pld_enabled .................. False
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   pld_params ................... False
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   prescale_gradients ........... False
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   scheduler_name ............... None
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   scheduler_params ............. None
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   sparse_attention ............. None
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   sparse_gradients_enabled ..... False
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   steps_per_print .............. inf
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   train_batch_size ............. 128
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   train_micro_batch_size_per_gpu  2
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   use_node_local_storage ....... False
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   wall_clock_breakdown ......... False
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   world_size ................... 4
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   zero_allow_untested_optimizer  True
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   zero_config .................. stage=3 contiguous_gradients=True reduce_scatter=True reduce_bucket_size=26214400 allgather_partitions=True allgather_bucket_size=500,000,000 overlap_comm=True load_from_fp32_weights=True elastic_checkpoint=False offload_param=None offload_optimizer=None sub_group_size=1000000000 cpu_offload_param=None cpu_offload_use_pin_memory=None cpu_offload=None prefetch_bucket_size=23592960 param_persistence_threshold=51200 model_persistence_threshold=sys.maxsize max_live_parameters=1000000000 max_reuse_distance=1000000000 gather_16bit_weights_on_model_save=True stage3_gather_fp16_weights_on_model_save=False ignore_unused_parameters=True legacy_stage1=False round_robin_gradients=False zero_hpz_partition_size=1 zero_quantized_weights=False zero_quantized_gradients=False mics_shard_size=-1 mics_hierarchical_params_gather=False memory_efficient_linear=True
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   zero_enabled ................. True
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   zero_force_ds_cpu_optimizer .. True
[2023-09-01 00:31:22,518] [INFO] [config.py:964:print]   zero_optimization_stage ...... 3
[2023-09-01 00:31:22,518] [INFO] [config.py:950:print_user_config]   json = {
    "bf16": {
        "enabled": true
    }, 
    "zero_optimization": {
        "stage": 3, 
        "overlap_comm": true, 
        "contiguous_gradients": true, 
        "sub_group_size": 1.000000e+09, 
        "reduce_bucket_size": 2.621440e+07, 
        "stage3_prefetch_bucket_size": 2.359296e+07, 
        "stage3_param_persistence_threshold": 5.120000e+04, 
        "stage3_max_live_parameters": 1.000000e+09, 
        "stage3_max_reuse_distance": 1.000000e+09, 
        "stage3_gather_16bit_weights_on_model_save": true
    }, 
    "gradient_accumulation_steps": 16, 
    "gradient_clipping": 1.0, 
    "steps_per_print": inf, 
    "train_batch_size": 128, 
    "train_micro_batch_size_per_gpu": 2, 
    "wall_clock_breakdown": false, 
    "fp16": {
        "enabled": false
    }, 
    "zero_allow_untested_optimizer": true
}
wandb: Currently logged in as: kidrain61. Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: | Waiting for wandb.init()...wandb: Tracking run with wandb version 0.15.9
wandb: Run data is saved locally in /data/users/zhangjunlei/tyx/wandb/wandb/run-20230901_003124-jtne9fei
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run celestial-sun-52
wandb: ⭐️ View project at https://wandb.ai/kidrain61/step-reward
wandb: 🚀 View run at https://wandb.ai/kidrain61/step-reward/runs/jtne9fei
09/01/2023 00:31:31 - INFO - __main__ - ***** Running training *****
09/01/2023 00:31:31 - INFO - __main__ -   Num examples = 85194
09/01/2023 00:31:31 - INFO - __main__ -   Num Epochs = 3
09/01/2023 00:31:31 - INFO - __main__ -   Instantaneous batch size per device = 2
09/01/2023 00:31:31 - INFO - __main__ -   Total train batch size (w. parallel, distributed & accumulation) = 128
09/01/2023 00:31:31 - INFO - __main__ -   Gradient Accumulation steps = 16
09/01/2023 00:31:31 - INFO - __main__ -   Total optimization steps = 1998
  0%|          | 0/1998 [00:00<?, ?it/s]09/01/2023 00:31:31 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:01<02:29,  1.51it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:01<02:01,  1.85it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:02<01:44,  2.15it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:02<01:31,  2.44it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:02<01:19,  2.79it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:02<01:17,  2.86it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:03<01:16,  2.89it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:03<01:09,  3.14it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:03<01:03,  3.42it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:03<00:59,  3.63it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:04<00:57,  3.76it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:04<00:54,  3.93it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:04<00:52,  4.04it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:04<00:51,  4.12it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:05<00:50,  4.19it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:05<00:49,  4.24it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:05<00:49,  4.27it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:05<00:49,  4.23it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:06<00:51,  4.02it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:06<00:52,  3.92it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:06<00:51,  4.02it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:06<00:49,  4.11it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:07<00:49,  4.16it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:07<00:48,  4.19it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:07<00:50,  4.01it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:07<00:55,  3.63it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:08<00:52,  3.81it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:08<00:54,  3.65it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:08<00:51,  3.87it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:08<00:49,  3.99it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:09<00:51,  3.84it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:09<00:48,  4.00it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:09<00:49,  3.90it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:10<00:52,  3.70it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:10<00:50,  3.80it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:10<00:48,  3.96it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:10<00:47,  4.03it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:11<00:50,  3.78it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:11<00:48,  3.91it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:11<00:46,  4.01it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:11<00:45,  4.11it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:11<00:45,  4.10it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:12<00:48,  3.82it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:12<00:51,  3.52it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:12<00:48,  3.72it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:13<00:50,  3.58it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:13<00:51,  3.48it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:13<00:51,  3.50it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:14<00:51,  3.44it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:14<00:49,  3.57it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:14<00:50,  3.48it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:14<00:51,  3.41it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:15<00:50,  3.45it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:15<00:50,  3.40it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:15<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:15<00:45,  3.77it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:16<00:47,  3.58it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:16<00:44,  3.78it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:16<00:43,  3.86it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:17<00:42,  3.91it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:17<00:41,  3.99it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:17<00:40,  4.04it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:17<00:39,  4.11it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:17<00:39,  4.15it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:18<00:38,  4.16it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:18<00:38,  4.18it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:18<00:37,  4.22it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:18<00:38,  4.16it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:19<00:37,  4.19it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:19<00:39,  3.99it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:19<00:40,  3.86it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:19<00:40,  3.81it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:20<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:20<00:37,  4.04it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:20<00:36,  4.12it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:20<00:39,  3.83it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:21<00:37,  3.97it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:21<00:41,  3.61it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:21<00:39,  3.72it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:22<00:38,  3.80it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:22<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:22<00:36,  3.93it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:22<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:23<00:35,  4.07it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:23<00:36,  3.94it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:23<00:35,  3.95it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:23<00:35,  3.99it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:24<00:34,  4.00it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:24<00:33,  4.08it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:24<00:32,  4.15it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:24<00:33,  4.11it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:24<00:32,  4.14it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:25<00:32,  4.18it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:25<00:33,  4.02it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:25<00:32,  4.12it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:26<00:33,  3.85it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:26<00:33,  3.88it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:26<00:32,  3.98it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:26<00:32,  3.99it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:27<00:30,  4.07it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:27<00:30,  4.09it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:27<00:29,  4.14it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:27<00:29,  4.17it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:28<00:29,  4.19it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:28<00:29,  4.17it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:28<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:28<00:30,  3.93it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:29<00:29,  4.02it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:29<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:29<00:28,  4.12it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:30<00:30,  3.76it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:30<00:28,  3.94it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:30<00:27,  4.04it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:30<00:28,  3.89it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:30<00:27,  4.01it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:31<00:27,  4.06it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:31<00:26,  4.07it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:31<00:25,  4.16it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:31<00:25,  4.20it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:32<00:25,  4.23it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:32<00:24,  4.25it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:32<00:24,  4.27it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:32<00:23,  4.29it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:33<00:23,  4.26it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:33<00:23,  4.30it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:33<00:25,  3.87it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:33<00:27,  3.57it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:34<00:26,  3.77it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:34<00:24,  3.91it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:34<00:24,  3.94it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:34<00:23,  4.08it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:35<00:24,  3.91it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:35<00:22,  4.06it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:35<00:23,  3.95it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:35<00:22,  4.08it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:36<00:21,  4.14it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:36<00:21,  4.24it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:36<00:20,  4.27it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:36<00:20,  4.33it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:37<00:19,  4.33it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:37<00:19,  4.31it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:37<00:19,  4.33it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:37<00:18,  4.37it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:37<00:18,  4.37it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:38<00:18,  4.38it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:38<00:18,  4.41it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:38<00:17,  4.39it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:38<00:17,  4.38it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:39<00:17,  4.39it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:39<00:17,  4.35it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:39<00:17,  4.38it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:39<00:17,  4.35it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:40<00:17,  4.28it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:40<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:40<00:17,  3.97it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:40<00:17,  4.11it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:41<00:16,  4.18it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:41<00:15,  4.26it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:41<00:15,  4.29it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:41<00:15,  4.35it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:41<00:14,  4.34it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:42<00:14,  4.37it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:42<00:14,  4.40it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:42<00:14,  4.43it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:42<00:13,  4.44it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:43<00:13,  4.44it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:43<00:13,  4.44it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:43<00:13,  4.18it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:43<00:13,  4.27it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:44<00:13,  4.27it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:44<00:12,  4.34it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:44<00:12,  4.32it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:44<00:12,  4.11it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:45<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:45<00:12,  3.96it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:45<00:12,  4.08it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:45<00:11,  4.18it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:46<00:12,  4.00it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:46<00:11,  4.14it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:46<00:10,  4.24it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:46<00:10,  4.29it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:46<00:10,  4.30it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:47<00:09,  4.32it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:47<00:09,  4.34it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:47<00:09,  4.14it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:47<00:09,  4.11it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:48<00:09,  4.21it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:48<00:08,  4.25it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:48<00:08,  4.32it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:48<00:08,  4.11it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:49<00:08,  4.15it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:49<00:08,  4.22it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:49<00:07,  4.15it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:49<00:07,  4.22it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.29it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:50<00:06,  4.32it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:50<00:06,  4.34it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:50<00:06,  4.37it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.98it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:51<00:06,  4.08it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:51<00:05,  4.18it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:51<00:05,  4.27it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:51<00:05,  4.33it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:52<00:05,  4.37it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:52<00:04,  4.39it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:52<00:04,  4.40it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:52<00:04,  4.40it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:53<00:04,  4.39it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:53<00:03,  4.39it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:53<00:03,  4.39it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:53<00:03,  4.15it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.19it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:54<00:03,  4.22it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:54<00:02,  4.25it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:54<00:02,  4.29it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:54<00:02,  4.31it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:55<00:02,  4.32it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:55<00:01,  4.24it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:55<00:01,  4.31it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:55<00:01,  4.36it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:56<00:01,  4.36it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:56<00:00,  4.40it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:56<00:00,  4.42it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:56<00:00,  4.45it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:56<00:00,  4.47it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:57<00:00,  4.45it/s][A09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 00:32:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:58<00:00,  3.92it/s]
09/01/2023 00:32:29 - INFO - __main__ -   Step: 0, Validation Metrics: {'accuracy': 0.5279140820294417, 'f1_micro': 0.5279140820294417, 'f1_macro': 0.2853665985133868, 'f1_weighted': 0.5675698955023485, 'f1_1': 0.6842207414116581, 'f1_-1': 0.14987080103359174, 'f1_0': 0.02200825309491059, 'precision_micro': 0.5279140820294417, 'precision_macro': 0.3223473375020723, 'precision_weighted': 0.6340495290399568, 'precision_1': 0.7707331292814459, 'precision_-1': 0.10539979231568017, 'precision_0': 0.09090909090909091, 'recall_micro': 0.5279140820294417, 'recall_macro': 0.29564955583826685, 'recall_weighted': 0.5279140820294417, 'recall_1': 0.6151698464402048, 'recall_-1': 0.25925925925925924, 'recall_0': 0.012519561815336464}
  0%|          | 0/1998 [00:58<?, ?it/s][2023-09-01 00:32:44,464] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 1/1998 [01:13<8:15:57, 14.90s/it]09/01/2023 00:32:44 - INFO - __main__ -   Step: 1, LR: 3.3472803347280335e-07, Loss: 18.287492752075195
[2023-09-01 00:32:57,821] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 2/1998 [01:26<7:45:29, 13.99s/it]09/01/2023 00:32:57 - INFO - __main__ -   Step: 2, LR: 6.694560669456067e-07, Loss: 18.083066940307617
[2023-09-01 00:33:12,554] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 3/1998 [01:41<7:56:30, 14.33s/it]09/01/2023 00:33:12 - INFO - __main__ -   Step: 3, LR: 1.0041841004184101e-06, Loss: 18.344257354736328
[2023-09-01 00:33:26,422] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 4/1998 [01:54<7:50:10, 14.15s/it]09/01/2023 00:33:26 - INFO - __main__ -   Step: 4, LR: 1.3389121338912134e-06, Loss: 18.155651092529297
[2023-09-01 00:33:41,525] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 5/1998 [02:10<8:01:22, 14.49s/it]09/01/2023 00:33:41 - INFO - __main__ -   Step: 5, LR: 1.6736401673640167e-06, Loss: 18.222043991088867
[2023-09-01 00:33:57,163] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 6/1998 [02:25<8:14:05, 14.88s/it]09/01/2023 00:33:57 - INFO - __main__ -   Step: 6, LR: 2.0083682008368202e-06, Loss: 17.848154067993164
[2023-09-01 00:34:11,657] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 7/1998 [02:40<8:09:37, 14.76s/it]09/01/2023 00:34:11 - INFO - __main__ -   Step: 7, LR: 2.3430962343096237e-06, Loss: 16.957443237304688
[2023-09-01 00:34:24,562] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 8/1998 [02:53<7:49:50, 14.17s/it]09/01/2023 00:34:24 - INFO - __main__ -   Step: 8, LR: 2.677824267782427e-06, Loss: 16.63075828552246
[2023-09-01 00:34:39,509] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|          | 9/1998 [03:08<7:57:42, 14.41s/it]09/01/2023 00:34:39 - INFO - __main__ -   Step: 9, LR: 3.0125523012552303e-06, Loss: 13.271749496459961
[2023-09-01 00:34:53,504] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 10/1998 [03:22<7:53:12, 14.28s/it]09/01/2023 00:34:53 - INFO - __main__ -   Step: 10, LR: 3.3472803347280334e-06, Loss: 12.044215202331543
[2023-09-01 00:35:07,727] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 11/1998 [03:36<7:52:22, 14.26s/it]09/01/2023 00:35:07 - INFO - __main__ -   Step: 11, LR: 3.6820083682008374e-06, Loss: 11.411251068115234
[2023-09-01 00:35:21,087] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 12/1998 [03:49<7:43:02, 13.99s/it]09/01/2023 00:35:21 - INFO - __main__ -   Step: 12, LR: 4.0167364016736405e-06, Loss: 4.04083776473999
[2023-09-01 00:35:35,039] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 13/1998 [04:03<7:42:25, 13.98s/it]09/01/2023 00:35:35 - INFO - __main__ -   Step: 13, LR: 4.351464435146444e-06, Loss: 3.2905964851379395
[2023-09-01 00:35:48,997] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 14/1998 [04:17<7:41:59, 13.97s/it]09/01/2023 00:35:48 - INFO - __main__ -   Step: 14, LR: 4.6861924686192475e-06, Loss: 2.1807522773742676
[2023-09-01 00:36:03,442] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 15/1998 [04:32<7:46:28, 14.11s/it]09/01/2023 00:36:03 - INFO - __main__ -   Step: 15, LR: 5.02092050209205e-06, Loss: 1.3905963897705078
[2023-09-01 00:36:17,793] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 16/1998 [04:46<7:48:36, 14.19s/it]09/01/2023 00:36:17 - INFO - __main__ -   Step: 16, LR: 5.355648535564854e-06, Loss: 0.9298089742660522
[2023-09-01 00:36:31,675] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 17/1998 [05:00<7:45:20, 14.09s/it]09/01/2023 00:36:31 - INFO - __main__ -   Step: 17, LR: 5.690376569037658e-06, Loss: 0.6875272989273071
[2023-09-01 00:36:46,487] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 18/1998 [05:15<7:52:13, 14.31s/it]09/01/2023 00:36:46 - INFO - __main__ -   Step: 18, LR: 6.025104602510461e-06, Loss: 1.0880546569824219
[2023-09-01 00:37:01,383] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 19/1998 [05:29<7:57:47, 14.49s/it]09/01/2023 00:37:01 - INFO - __main__ -   Step: 19, LR: 6.359832635983264e-06, Loss: 0.7726807594299316
[2023-09-01 00:37:16,343] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 20/1998 [05:44<8:02:14, 14.63s/it]09/01/2023 00:37:16 - INFO - __main__ -   Step: 20, LR: 6.694560669456067e-06, Loss: 0.7818039655685425
[2023-09-01 00:37:32,125] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 21/1998 [06:00<8:13:25, 14.97s/it]09/01/2023 00:37:32 - INFO - __main__ -   Step: 21, LR: 7.02928870292887e-06, Loss: 0.7196648120880127
[2023-09-01 00:37:46,049] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 22/1998 [06:14<8:02:46, 14.66s/it]09/01/2023 00:37:46 - INFO - __main__ -   Step: 22, LR: 7.364016736401675e-06, Loss: 0.6798661947250366
[2023-09-01 00:38:01,031] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 23/1998 [06:29<8:05:43, 14.76s/it]09/01/2023 00:38:01 - INFO - __main__ -   Step: 23, LR: 7.698744769874478e-06, Loss: 0.7066102027893066
[2023-09-01 00:38:16,006] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|          | 24/1998 [06:44<8:07:38, 14.82s/it]09/01/2023 00:38:16 - INFO - __main__ -   Step: 24, LR: 8.033472803347281e-06, Loss: 0.7789958715438843
[2023-09-01 00:38:29,986] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 25/1998 [06:58<7:59:05, 14.57s/it]09/01/2023 00:38:29 - INFO - __main__ -   Step: 25, LR: 8.368200836820084e-06, Loss: 0.6960038542747498
[2023-09-01 00:38:43,787] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 26/1998 [07:12<7:51:16, 14.34s/it]09/01/2023 00:38:43 - INFO - __main__ -   Step: 26, LR: 8.702928870292888e-06, Loss: 0.6890860795974731
[2023-09-01 00:38:58,876] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 27/1998 [07:27<7:58:24, 14.56s/it]09/01/2023 00:38:58 - INFO - __main__ -   Step: 27, LR: 9.03765690376569e-06, Loss: 0.7545490860939026
[2023-09-01 00:39:12,865] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 28/1998 [07:41<7:52:31, 14.39s/it]09/01/2023 00:39:12 - INFO - __main__ -   Step: 28, LR: 9.372384937238495e-06, Loss: 0.6229099035263062
[2023-09-01 00:39:27,004] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  1%|▏         | 29/1998 [07:55<7:49:47, 14.32s/it]09/01/2023 00:39:27 - INFO - __main__ -   Step: 29, LR: 9.707112970711298e-06, Loss: 0.7160192728042603
[2023-09-01 00:39:41,323] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 30/1998 [08:09<7:49:35, 14.32s/it]09/01/2023 00:39:41 - INFO - __main__ -   Step: 30, LR: 1.00418410041841e-05, Loss: 0.7459890842437744
[2023-09-01 00:39:54,894] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 31/1998 [08:23<7:42:00, 14.09s/it]09/01/2023 00:39:54 - INFO - __main__ -   Step: 31, LR: 1.0376569037656905e-05, Loss: 0.6899859309196472
[2023-09-01 00:40:08,948] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 32/1998 [08:37<7:41:23, 14.08s/it]09/01/2023 00:40:08 - INFO - __main__ -   Step: 32, LR: 1.0711297071129707e-05, Loss: 0.7916870713233948
[2023-09-01 00:40:23,681] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 33/1998 [08:52<7:47:33, 14.28s/it]09/01/2023 00:40:23 - INFO - __main__ -   Step: 33, LR: 1.1046025104602512e-05, Loss: 0.711541473865509
[2023-09-01 00:40:38,396] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 34/1998 [09:06<7:51:37, 14.41s/it]09/01/2023 00:40:38 - INFO - __main__ -   Step: 34, LR: 1.1380753138075316e-05, Loss: 0.75605309009552
[2023-09-01 00:40:53,475] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 35/1998 [09:22<7:57:58, 14.61s/it]09/01/2023 00:40:53 - INFO - __main__ -   Step: 35, LR: 1.1715481171548117e-05, Loss: 0.708126425743103
[2023-09-01 00:41:08,530] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 36/1998 [09:37<8:02:05, 14.74s/it]09/01/2023 00:41:08 - INFO - __main__ -   Step: 36, LR: 1.2050209205020921e-05, Loss: 0.699180543422699
[2023-09-01 00:41:21,872] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 37/1998 [09:50<7:48:07, 14.32s/it]09/01/2023 00:41:21 - INFO - __main__ -   Step: 37, LR: 1.2384937238493724e-05, Loss: 0.7421379089355469
[2023-09-01 00:41:36,812] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 38/1998 [10:05<7:53:55, 14.51s/it]09/01/2023 00:41:36 - INFO - __main__ -   Step: 38, LR: 1.2719665271966528e-05, Loss: 0.5640009045600891
[2023-09-01 00:41:50,801] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 39/1998 [10:19<7:48:36, 14.35s/it]09/01/2023 00:41:50 - INFO - __main__ -   Step: 39, LR: 1.3054393305439333e-05, Loss: 0.5790070295333862
[2023-09-01 00:42:06,018] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 40/1998 [10:34<7:56:50, 14.61s/it]09/01/2023 00:42:06 - INFO - __main__ -   Step: 40, LR: 1.3389121338912134e-05, Loss: 0.6181053519248962
[2023-09-01 00:42:21,426] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 41/1998 [10:49<8:04:22, 14.85s/it]09/01/2023 00:42:21 - INFO - __main__ -   Step: 41, LR: 1.3723849372384938e-05, Loss: 0.5940347909927368
[2023-09-01 00:42:35,904] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 42/1998 [11:04<8:00:28, 14.74s/it]09/01/2023 00:42:35 - INFO - __main__ -   Step: 42, LR: 1.405857740585774e-05, Loss: 0.6167993545532227
[2023-09-01 00:42:51,787] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 43/1998 [11:20<8:11:25, 15.08s/it]09/01/2023 00:42:51 - INFO - __main__ -   Step: 43, LR: 1.4393305439330545e-05, Loss: 0.6424256563186646
[2023-09-01 00:43:07,095] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 44/1998 [11:35<8:13:22, 15.15s/it]09/01/2023 00:43:07 - INFO - __main__ -   Step: 44, LR: 1.472803347280335e-05, Loss: 0.5884554982185364
[2023-09-01 00:43:21,935] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 45/1998 [11:50<8:10:06, 15.06s/it]09/01/2023 00:43:21 - INFO - __main__ -   Step: 45, LR: 1.506276150627615e-05, Loss: 0.6166336536407471
[2023-09-01 00:43:39,354] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 46/1998 [12:07<8:32:54, 15.77s/it]09/01/2023 00:43:39 - INFO - __main__ -   Step: 46, LR: 1.5397489539748957e-05, Loss: 0.6651753187179565
[2023-09-01 00:43:53,360] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 47/1998 [12:21<8:15:28, 15.24s/it]09/01/2023 00:43:53 - INFO - __main__ -   Step: 47, LR: 1.573221757322176e-05, Loss: 0.6819649934768677
[2023-09-01 00:44:07,094] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 48/1998 [12:35<8:00:34, 14.79s/it]09/01/2023 00:44:07 - INFO - __main__ -   Step: 48, LR: 1.6066945606694562e-05, Loss: 0.6143093109130859
[2023-09-01 00:44:21,758] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  2%|▏         | 49/1998 [12:50<7:59:07, 14.75s/it]09/01/2023 00:44:21 - INFO - __main__ -   Step: 49, LR: 1.6401673640167365e-05, Loss: 0.6083224415779114
[2023-09-01 00:44:36,665] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 50/1998 [13:05<8:00:24, 14.80s/it]09/01/2023 00:44:36 - INFO - __main__ -   Step: 50, LR: 1.6736401673640167e-05, Loss: 0.657116174697876
[2023-09-01 00:44:50,874] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 51/1998 [13:19<7:54:26, 14.62s/it]09/01/2023 00:44:50 - INFO - __main__ -   Step: 51, LR: 1.7071129707112973e-05, Loss: 0.5967015624046326
[2023-09-01 00:45:06,643] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 52/1998 [13:35<8:05:22, 14.97s/it]09/01/2023 00:45:06 - INFO - __main__ -   Step: 52, LR: 1.7405857740585776e-05, Loss: 0.6409192085266113
[2023-09-01 00:45:20,532] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 53/1998 [13:49<7:54:39, 14.64s/it]09/01/2023 00:45:20 - INFO - __main__ -   Step: 53, LR: 1.774058577405858e-05, Loss: 0.6096835732460022
[2023-09-01 00:45:36,528] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 54/1998 [14:05<8:07:34, 15.05s/it]09/01/2023 00:45:36 - INFO - __main__ -   Step: 54, LR: 1.807531380753138e-05, Loss: 0.6313496232032776
[2023-09-01 00:45:50,637] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 55/1998 [14:19<7:58:11, 14.77s/it]09/01/2023 00:45:50 - INFO - __main__ -   Step: 55, LR: 1.8410041841004184e-05, Loss: 0.6683820486068726
[2023-09-01 00:46:05,568] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 56/1998 [14:34<7:59:32, 14.82s/it]09/01/2023 00:46:05 - INFO - __main__ -   Step: 56, LR: 1.874476987447699e-05, Loss: 0.7320235967636108
[2023-09-01 00:46:19,496] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 57/1998 [14:48<7:50:40, 14.55s/it]09/01/2023 00:46:19 - INFO - __main__ -   Step: 57, LR: 1.9079497907949793e-05, Loss: 0.6351667642593384
[2023-09-01 00:46:33,413] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 58/1998 [15:01<7:44:18, 14.36s/it]09/01/2023 00:46:33 - INFO - __main__ -   Step: 58, LR: 1.9414225941422595e-05, Loss: 0.6496046781539917
[2023-09-01 00:46:48,253] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 59/1998 [15:16<7:48:42, 14.50s/it]09/01/2023 00:46:48 - INFO - __main__ -   Step: 59, LR: 1.9748953974895398e-05, Loss: 0.7147253751754761
[2023-09-01 00:47:02,903] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 60/1998 [15:31<7:49:53, 14.55s/it]09/01/2023 00:47:02 - INFO - __main__ -   Step: 60, LR: 1.999741935483871e-05, Loss: 0.6682352423667908
[2023-09-01 00:47:16,678] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 61/1998 [15:45<7:42:09, 14.32s/it]09/01/2023 00:47:16 - INFO - __main__ -   Step: 61, LR: 1.998709677419355e-05, Loss: 0.569878339767456
[2023-09-01 00:47:33,400] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 62/1998 [16:01<8:05:13, 15.04s/it]09/01/2023 00:47:33 - INFO - __main__ -   Step: 62, LR: 1.997677419354839e-05, Loss: 0.5651669502258301
[2023-09-01 00:47:47,310] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 63/1998 [16:15<7:54:03, 14.70s/it]09/01/2023 00:47:47 - INFO - __main__ -   Step: 63, LR: 1.9966451612903227e-05, Loss: 0.7421767711639404
[2023-09-01 00:48:01,807] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 64/1998 [16:30<7:51:51, 14.64s/it]09/01/2023 00:48:01 - INFO - __main__ -   Step: 64, LR: 1.9956129032258067e-05, Loss: 0.7331263422966003
[2023-09-01 00:48:16,324] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 65/1998 [16:44<7:50:25, 14.60s/it]09/01/2023 00:48:16 - INFO - __main__ -   Step: 65, LR: 1.9945806451612907e-05, Loss: 0.7327492237091064
[2023-09-01 00:48:29,727] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 66/1998 [16:58<7:38:36, 14.24s/it]09/01/2023 00:48:29 - INFO - __main__ -   Step: 66, LR: 1.9935483870967743e-05, Loss: 0.6052662134170532
[2023-09-01 00:48:43,303] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 67/1998 [17:11<7:31:56, 14.04s/it]09/01/2023 00:48:43 - INFO - __main__ -   Step: 67, LR: 1.9925161290322583e-05, Loss: 0.6250029802322388
[2023-09-01 00:48:58,987] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 68/1998 [17:27<7:47:32, 14.54s/it]09/01/2023 00:48:58 - INFO - __main__ -   Step: 68, LR: 1.9914838709677422e-05, Loss: 0.6012411117553711
[2023-09-01 00:49:13,604] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  3%|▎         | 69/1998 [17:42<7:48:05, 14.56s/it]09/01/2023 00:49:13 - INFO - __main__ -   Step: 69, LR: 1.990451612903226e-05, Loss: 0.57835853099823
[2023-09-01 00:49:28,402] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▎         | 70/1998 [17:56<7:50:08, 14.63s/it]09/01/2023 00:49:28 - INFO - __main__ -   Step: 70, LR: 1.9894193548387098e-05, Loss: 0.6164480447769165
[2023-09-01 00:49:43,286] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▎         | 71/1998 [18:11<7:52:19, 14.71s/it]09/01/2023 00:49:43 - INFO - __main__ -   Step: 71, LR: 1.9883870967741935e-05, Loss: 0.4745635688304901
[2023-09-01 00:49:57,052] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▎         | 72/1998 [18:25<7:43:01, 14.42s/it]09/01/2023 00:49:57 - INFO - __main__ -   Step: 72, LR: 1.9873548387096774e-05, Loss: 0.6401180624961853
[2023-09-01 00:50:11,739] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▎         | 73/1998 [18:40<7:45:18, 14.50s/it]09/01/2023 00:50:11 - INFO - __main__ -   Step: 73, LR: 1.9863225806451614e-05, Loss: 0.6217533349990845
[2023-09-01 00:50:27,631] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▎         | 74/1998 [18:56<7:58:25, 14.92s/it]09/01/2023 00:50:27 - INFO - __main__ -   Step: 74, LR: 1.9852903225806454e-05, Loss: 0.6530393362045288
[2023-09-01 00:50:44,360] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 75/1998 [19:12<8:15:35, 15.46s/it]09/01/2023 00:50:44 - INFO - __main__ -   Step: 75, LR: 1.984258064516129e-05, Loss: 0.6039825677871704
[2023-09-01 00:50:58,543] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 76/1998 [19:27<8:03:01, 15.08s/it]09/01/2023 00:50:58 - INFO - __main__ -   Step: 76, LR: 1.983225806451613e-05, Loss: 0.6447461843490601
[2023-09-01 00:51:12,171] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 77/1998 [19:40<7:48:50, 14.64s/it]09/01/2023 00:51:12 - INFO - __main__ -   Step: 77, LR: 1.982193548387097e-05, Loss: 0.7661271691322327
[2023-09-01 00:51:26,238] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 78/1998 [19:54<7:43:03, 14.47s/it]09/01/2023 00:51:26 - INFO - __main__ -   Step: 78, LR: 1.981161290322581e-05, Loss: 0.7560755014419556
[2023-09-01 00:51:40,589] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 79/1998 [20:09<7:41:40, 14.43s/it]09/01/2023 00:51:40 - INFO - __main__ -   Step: 79, LR: 1.9801290322580645e-05, Loss: 0.6958902478218079
[2023-09-01 00:51:55,218] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 80/1998 [20:23<7:43:17, 14.49s/it]09/01/2023 00:51:55 - INFO - __main__ -   Step: 80, LR: 1.9790967741935485e-05, Loss: 0.6118777394294739
[2023-09-01 00:52:09,234] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 81/1998 [20:37<7:38:28, 14.35s/it]09/01/2023 00:52:09 - INFO - __main__ -   Step: 81, LR: 1.9780645161290325e-05, Loss: 0.6407156586647034
[2023-09-01 00:52:23,447] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 82/1998 [20:52<7:36:55, 14.31s/it]09/01/2023 00:52:23 - INFO - __main__ -   Step: 82, LR: 1.9770322580645164e-05, Loss: 0.6714961528778076
[2023-09-01 00:52:38,433] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 83/1998 [21:06<7:43:10, 14.51s/it]09/01/2023 00:52:38 - INFO - __main__ -   Step: 83, LR: 1.976e-05, Loss: 0.7633159160614014
[2023-09-01 00:52:52,594] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 84/1998 [21:21<7:39:34, 14.41s/it]09/01/2023 00:52:52 - INFO - __main__ -   Step: 84, LR: 1.974967741935484e-05, Loss: 0.7517706751823425
[2023-09-01 00:53:06,042] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 85/1998 [21:34<7:30:09, 14.12s/it]09/01/2023 00:53:06 - INFO - __main__ -   Step: 85, LR: 1.973935483870968e-05, Loss: 0.5890285968780518
[2023-09-01 00:53:20,200] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 86/1998 [21:48<7:30:18, 14.13s/it]09/01/2023 00:53:20 - INFO - __main__ -   Step: 86, LR: 1.9729032258064516e-05, Loss: 0.6050335168838501
[2023-09-01 00:53:35,590] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 87/1998 [22:04<7:42:05, 14.51s/it]09/01/2023 00:53:35 - INFO - __main__ -   Step: 87, LR: 1.9718709677419356e-05, Loss: 0.7600189447402954
[2023-09-01 00:53:51,330] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 88/1998 [22:19<7:53:36, 14.88s/it]09/01/2023 00:53:51 - INFO - __main__ -   Step: 88, LR: 1.9708387096774196e-05, Loss: 0.5752851963043213
[2023-09-01 00:54:06,197] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  4%|▍         | 89/1998 [22:34<7:53:15, 14.87s/it]09/01/2023 00:54:06 - INFO - __main__ -   Step: 89, LR: 1.9698064516129035e-05, Loss: 0.6416897773742676
[2023-09-01 00:54:19,820] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 90/1998 [22:48<7:41:04, 14.50s/it]09/01/2023 00:54:19 - INFO - __main__ -   Step: 90, LR: 1.968774193548387e-05, Loss: 0.6488526463508606
[2023-09-01 00:54:34,355] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 91/1998 [23:02<7:41:10, 14.51s/it]09/01/2023 00:54:34 - INFO - __main__ -   Step: 91, LR: 1.967741935483871e-05, Loss: 0.6336989998817444
[2023-09-01 00:54:49,157] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 92/1998 [23:17<7:43:42, 14.60s/it]09/01/2023 00:54:49 - INFO - __main__ -   Step: 92, LR: 1.966709677419355e-05, Loss: 0.6241648197174072
[2023-09-01 00:55:04,969] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 93/1998 [23:33<7:55:02, 14.96s/it]09/01/2023 00:55:04 - INFO - __main__ -   Step: 93, LR: 1.965677419354839e-05, Loss: 0.6561034917831421
[2023-09-01 00:55:19,598] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 94/1998 [23:48<7:51:37, 14.86s/it]09/01/2023 00:55:19 - INFO - __main__ -   Step: 94, LR: 1.9646451612903227e-05, Loss: 0.5738282799720764
[2023-09-01 00:55:33,966] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 95/1998 [24:02<7:46:40, 14.71s/it]09/01/2023 00:55:33 - INFO - __main__ -   Step: 95, LR: 1.9636129032258067e-05, Loss: 0.5493537187576294
[2023-09-01 00:55:48,050] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 96/1998 [24:16<7:40:26, 14.52s/it]09/01/2023 00:55:48 - INFO - __main__ -   Step: 96, LR: 1.9625806451612906e-05, Loss: 0.5061558485031128
[2023-09-01 00:56:03,290] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 97/1998 [24:31<7:46:59, 14.74s/it]09/01/2023 00:56:03 - INFO - __main__ -   Step: 97, LR: 1.9615483870967743e-05, Loss: 0.5899562835693359
[2023-09-01 00:56:17,010] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 98/1998 [24:45<7:37:03, 14.43s/it]09/01/2023 00:56:17 - INFO - __main__ -   Step: 98, LR: 1.9605161290322582e-05, Loss: 0.5704243183135986
[2023-09-01 00:56:31,951] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▍         | 99/1998 [25:00<7:41:38, 14.59s/it]09/01/2023 00:56:31 - INFO - __main__ -   Step: 99, LR: 1.9594838709677422e-05, Loss: 0.6184116005897522
[2023-09-01 00:56:45,949] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 100/1998 [25:14<7:35:49, 14.41s/it]09/01/2023 00:56:45 - INFO - __main__ -   Step: 100, LR: 1.958451612903226e-05, Loss: 0.5412577390670776
09/01/2023 00:56:45 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100
09/01/2023 00:56:45 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 00:56:45,959] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 00:56:45,966] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 00:56:45,966] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 00:56:45,966] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 00:56:45,966] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 00:56:45,967] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 00:56:45,967] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 00:56:45,980] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 00:56:45,981] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 00:56:45,981] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 00:56:45,982] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 00:56:45,983] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 00:56:45,983] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 00:56:45,983] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 00:56:45,983] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 00:57:43,841] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 00:57:43,841] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 00:57:47,121] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 00:57:47,121] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 00:57:49,280] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 00:57:49,280] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 00:57:49,642] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 00:57:49,643] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 00:57:49,648] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 00:57:49,648] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 00:57:49,648] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 00:57:49,649] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 00:57:49 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model
09/01/2023 00:57:49 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/scheduler.bin
09/01/2023 00:57:49 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/random_states_0.pkl
09/01/2023 00:57:49 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.86it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.90it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.94it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.67it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:58,  3.77it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.49it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.30it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.47it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.65it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:57,  3.80it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.89it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.00it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.09it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.14it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.20it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:50,  4.21it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.23it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.20it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.00it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.91it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  3.99it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.07it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.13it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.16it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.98it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.61it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.78it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.62it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.84it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.96it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.82it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:49,  3.97it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:50,  3.85it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.67it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.78it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.91it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  3.99it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:50,  3.75it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.87it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:47,  3.97it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.06it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.07it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.80it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.51it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.70it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.57it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.44it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.48it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:52,  3.42it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.54it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.45it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.41it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.45it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.39it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.59it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.76it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.61it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.79it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.86it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.89it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.99it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:41,  4.01it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.08it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.13it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.15it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.14it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.17it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.14it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.17it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.97it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.84it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.79it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.04it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:37,  4.09it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.81it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:38,  3.94it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.59it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:40,  3.70it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.77it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:38,  3.84it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:37,  3.90it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.95it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.04it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.92it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.96it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.97it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:34,  4.04it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.10it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.07it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:24<00:32,  4.11it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.15it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.00it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.08it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.82it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.86it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.95it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.97it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  3.99it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.07it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.09it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.11it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:27<00:29,  4.15it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.19it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:29,  4.16it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.78it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:28<00:30,  3.90it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  3.98it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:29,  4.00it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.09it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.73it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.90it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:28,  4.01it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.87it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:30<00:27,  4.00it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.06it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.07it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:26,  4.12it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:31<00:25,  4.13it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.18it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:25,  4.20it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.20it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.25it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:24,  4.22it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.27it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.85it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:33<00:27,  3.56it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:26,  3.76it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.88it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.91it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:34<00:23,  4.04it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.89it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.03it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.91it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:35<00:22,  4.05it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.09it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.18it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.21it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.26it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:20,  4.26it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:20,  4.25it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.25it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.29it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:37<00:19,  4.29it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.32it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.34it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.31it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:38<00:17,  4.34it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.36it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.30it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.33it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.29it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.24it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.79it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:18,  3.94it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.06it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.16it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.22it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.24it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.28it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:41<00:15,  4.31it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.32it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.34it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.34it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:42<00:13,  4.36it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.38it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.37it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:14,  4.14it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:43<00:13,  4.22it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.24it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.30it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.28it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.09it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.82it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.93it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.01it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.11it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.95it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.08it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:11,  4.16it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.21it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:46<00:10,  4.25it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.26it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.31it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.10it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:47<00:09,  4.08it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.17it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:09,  4.22it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.26it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:48<00:08,  4.08it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.14it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.19it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:08,  4.11it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:49<00:07,  4.18it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.23it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:07,  4.25it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.25it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.28it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.91it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.03it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:06,  4.12it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.20it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:51<00:05,  4.26it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.30it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.33it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.32it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:52<00:04,  4.33it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.35it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.33it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.30it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:53<00:03,  4.10it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.14it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.17it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.20it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:54<00:02,  4.24it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:54<00:02,  4.27it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.30it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.23it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.28it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:55<00:01,  4.31it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.30it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.34it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.34it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:56<00:00,  4.36it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:56<00:00,  4.38it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.37it/s][A09/01/2023 00:58:46 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 00:58:47 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.94it/s]
09/01/2023 00:58:47 - INFO - __main__ -   Step: 100, Validation Metrics: {'accuracy': 0.7993704286640126, 'f1_micro': 0.7993704286640126, 'f1_macro': 0.34588361775910137, 'f1_weighted': 0.7271090010498533, 'f1_1': 0.8876252086811353, 'f1_-1': 0.13766088416340236, 'f1_0': 0.012364760432766617, 'precision_micro': 0.7993704286640126, 'precision_macro': 0.620411268788781, 'precision_weighted': 0.7506750638955599, 'precision_1': 0.8046727203934922, 'precision_-1': 0.5565610859728507, 'precision_0': 0.5, 'recall_micro': 0.7993704286640126, 'recall_macro': 0.3581500631161847, 'recall_weighted': 0.7993704286640126, 'recall_1': 0.9896463471382038, 'recall_-1': 0.07854406130268199, 'recall_0': 0.006259780907668232}
[2023-09-01 00:59:01,086] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 101/1998 [27:29<26:40:40, 50.63s/it]09/01/2023 00:59:01 - INFO - __main__ -   Step: 101, LR: 1.9574193548387098e-05, Loss: 0.4818899631500244
[2023-09-01 00:59:15,505] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 102/1998 [27:44<20:56:34, 39.77s/it]09/01/2023 00:59:15 - INFO - __main__ -   Step: 102, LR: 1.9563870967741938e-05, Loss: 0.5545347929000854
[2023-09-01 00:59:30,395] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 103/1998 [27:58<17:00:13, 32.30s/it]09/01/2023 00:59:30 - INFO - __main__ -   Step: 103, LR: 1.9553548387096777e-05, Loss: 0.650538444519043
[2023-09-01 00:59:44,662] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 104/1998 [28:13<14:08:53, 26.89s/it]09/01/2023 00:59:44 - INFO - __main__ -   Step: 104, LR: 1.9543225806451617e-05, Loss: 0.6609090566635132
[2023-09-01 00:59:59,478] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 105/1998 [28:28<12:14:08, 23.27s/it]09/01/2023 00:59:59 - INFO - __main__ -   Step: 105, LR: 1.9532903225806453e-05, Loss: 0.6193161010742188
[2023-09-01 01:00:15,018] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 106/1998 [28:43<11:00:38, 20.95s/it]09/01/2023 01:00:15 - INFO - __main__ -   Step: 106, LR: 1.952258064516129e-05, Loss: 0.5977888107299805
[2023-09-01 01:00:30,993] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 107/1998 [28:59<10:13:14, 19.46s/it]09/01/2023 01:00:30 - INFO - __main__ -   Step: 107, LR: 1.951225806451613e-05, Loss: 0.5706781148910522
[2023-09-01 01:00:46,272] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 108/1998 [29:14<9:33:25, 18.20s/it] 09/01/2023 01:00:46 - INFO - __main__ -   Step: 108, LR: 1.950193548387097e-05, Loss: 0.6404183506965637
[2023-09-01 01:01:00,049] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 109/1998 [29:28<8:51:18, 16.88s/it]09/01/2023 01:01:00 - INFO - __main__ -   Step: 109, LR: 1.949161290322581e-05, Loss: 0.6230472326278687
[2023-09-01 01:01:13,531] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 110/1998 [29:42<8:18:59, 15.86s/it]09/01/2023 01:01:13 - INFO - __main__ -   Step: 110, LR: 1.9481290322580645e-05, Loss: 0.5690088868141174
[2023-09-01 01:01:28,764] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 111/1998 [29:57<8:12:50, 15.67s/it]09/01/2023 01:01:28 - INFO - __main__ -   Step: 111, LR: 1.9470967741935485e-05, Loss: 0.6890665888786316
[2023-09-01 01:01:43,983] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 112/1998 [30:12<8:08:18, 15.53s/it]09/01/2023 01:01:43 - INFO - __main__ -   Step: 112, LR: 1.9460645161290324e-05, Loss: 0.6448553800582886
[2023-09-01 01:01:57,356] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 113/1998 [30:25<7:47:40, 14.89s/it]09/01/2023 01:01:57 - INFO - __main__ -   Step: 113, LR: 1.9450322580645164e-05, Loss: 0.6675487756729126
[2023-09-01 01:02:11,612] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 114/1998 [30:40<7:41:29, 14.70s/it]09/01/2023 01:02:11 - INFO - __main__ -   Step: 114, LR: 1.944e-05, Loss: 0.6284508109092712
[2023-09-01 01:02:26,583] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 115/1998 [30:55<7:43:49, 14.78s/it]09/01/2023 01:02:26 - INFO - __main__ -   Step: 115, LR: 1.942967741935484e-05, Loss: 0.4807451367378235
[2023-09-01 01:02:41,651] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 116/1998 [31:10<7:46:17, 14.87s/it]09/01/2023 01:02:41 - INFO - __main__ -   Step: 116, LR: 1.941935483870968e-05, Loss: 0.5668357014656067
[2023-09-01 01:02:56,497] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 117/1998 [31:25<7:45:51, 14.86s/it]09/01/2023 01:02:56 - INFO - __main__ -   Step: 117, LR: 1.9409032258064516e-05, Loss: 0.59910649061203
[2023-09-01 01:03:11,787] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 118/1998 [31:40<7:49:39, 14.99s/it]09/01/2023 01:03:11 - INFO - __main__ -   Step: 118, LR: 1.9398709677419356e-05, Loss: 0.5738675594329834
[2023-09-01 01:03:25,602] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 119/1998 [31:54<7:38:22, 14.64s/it]09/01/2023 01:03:25 - INFO - __main__ -   Step: 119, LR: 1.9388387096774195e-05, Loss: 0.6397179961204529
[2023-09-01 01:03:39,503] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 120/1998 [32:08<7:31:13, 14.42s/it]09/01/2023 01:03:39 - INFO - __main__ -   Step: 120, LR: 1.9378064516129035e-05, Loss: 0.6618964672088623
[2023-09-01 01:03:54,451] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 121/1998 [32:23<7:35:58, 14.58s/it]09/01/2023 01:03:54 - INFO - __main__ -   Step: 121, LR: 1.936774193548387e-05, Loss: 0.6173373460769653
[2023-09-01 01:04:09,203] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 122/1998 [32:37<7:37:23, 14.63s/it]09/01/2023 01:04:09 - INFO - __main__ -   Step: 122, LR: 1.935741935483871e-05, Loss: 0.5338453054428101
[2023-09-01 01:04:24,016] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 123/1998 [32:52<7:38:52, 14.68s/it]09/01/2023 01:04:24 - INFO - __main__ -   Step: 123, LR: 1.934709677419355e-05, Loss: 0.6024328470230103
[2023-09-01 01:04:38,607] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 124/1998 [33:07<7:37:45, 14.66s/it]09/01/2023 01:04:38 - INFO - __main__ -   Step: 124, LR: 1.933677419354839e-05, Loss: 0.5941991806030273
[2023-09-01 01:04:51,511] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 125/1998 [33:20<7:21:06, 14.13s/it]09/01/2023 01:04:51 - INFO - __main__ -   Step: 125, LR: 1.9326451612903227e-05, Loss: 0.6887722611427307
[2023-09-01 01:05:05,399] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 126/1998 [33:33<7:18:35, 14.06s/it]09/01/2023 01:05:05 - INFO - __main__ -   Step: 126, LR: 1.9316129032258066e-05, Loss: 0.6917600631713867
[2023-09-01 01:05:19,401] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 127/1998 [33:47<7:17:50, 14.04s/it]09/01/2023 01:05:19 - INFO - __main__ -   Step: 127, LR: 1.9305806451612906e-05, Loss: 0.6661770939826965
[2023-09-01 01:05:34,298] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 128/1998 [34:02<7:25:37, 14.30s/it]09/01/2023 01:05:34 - INFO - __main__ -   Step: 128, LR: 1.9295483870967742e-05, Loss: 0.587166965007782
[2023-09-01 01:05:47,850] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 129/1998 [34:16<7:18:24, 14.07s/it]09/01/2023 01:05:47 - INFO - __main__ -   Step: 129, LR: 1.9285161290322582e-05, Loss: 0.6490821838378906
[2023-09-01 01:06:03,255] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 130/1998 [34:31<7:30:36, 14.47s/it]09/01/2023 01:06:03 - INFO - __main__ -   Step: 130, LR: 1.927483870967742e-05, Loss: 0.5600214600563049
[2023-09-01 01:06:18,841] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 131/1998 [34:47<7:40:44, 14.81s/it]09/01/2023 01:06:18 - INFO - __main__ -   Step: 131, LR: 1.926451612903226e-05, Loss: 0.579837441444397
[2023-09-01 01:06:34,554] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 132/1998 [35:03<7:48:57, 15.08s/it]09/01/2023 01:06:34 - INFO - __main__ -   Step: 132, LR: 1.9254193548387098e-05, Loss: 0.6270240545272827
[2023-09-01 01:06:50,808] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 133/1998 [35:19<7:59:39, 15.43s/it]09/01/2023 01:06:50 - INFO - __main__ -   Step: 133, LR: 1.9243870967741937e-05, Loss: 0.5812379717826843
[2023-09-01 01:07:05,425] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 134/1998 [35:33<7:51:48, 15.19s/it]09/01/2023 01:07:05 - INFO - __main__ -   Step: 134, LR: 1.9233548387096777e-05, Loss: 0.5932279229164124
[2023-09-01 01:07:19,502] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 135/1998 [35:48<7:41:12, 14.85s/it]09/01/2023 01:07:19 - INFO - __main__ -   Step: 135, LR: 1.9223225806451617e-05, Loss: 0.608539879322052
[2023-09-01 01:07:34,115] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 136/1998 [36:02<7:38:43, 14.78s/it]09/01/2023 01:07:34 - INFO - __main__ -   Step: 136, LR: 1.9212903225806453e-05, Loss: 0.5984295010566711
[2023-09-01 01:07:49,152] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 137/1998 [36:17<7:40:51, 14.86s/it]09/01/2023 01:07:49 - INFO - __main__ -   Step: 137, LR: 1.9202580645161293e-05, Loss: 0.5517723560333252
[2023-09-01 01:08:02,697] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 138/1998 [36:31<7:28:23, 14.46s/it]09/01/2023 01:08:02 - INFO - __main__ -   Step: 138, LR: 1.9192258064516132e-05, Loss: 0.6493425369262695
[2023-09-01 01:08:16,561] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 139/1998 [36:45<7:22:34, 14.28s/it]09/01/2023 01:08:16 - INFO - __main__ -   Step: 139, LR: 1.9181935483870972e-05, Loss: 0.606634795665741
[2023-09-01 01:08:29,868] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 140/1998 [36:58<7:13:15, 13.99s/it]09/01/2023 01:08:29 - INFO - __main__ -   Step: 140, LR: 1.9171612903225808e-05, Loss: 0.5954564213752747
[2023-09-01 01:08:44,653] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 141/1998 [37:13<7:20:23, 14.23s/it]09/01/2023 01:08:44 - INFO - __main__ -   Step: 141, LR: 1.9161290322580645e-05, Loss: 0.6271428465843201
[2023-09-01 01:09:00,478] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 142/1998 [37:29<7:34:57, 14.71s/it]09/01/2023 01:09:00 - INFO - __main__ -   Step: 142, LR: 1.9150967741935484e-05, Loss: 0.6202128529548645
[2023-09-01 01:09:14,519] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 143/1998 [37:43<7:28:32, 14.51s/it]09/01/2023 01:09:14 - INFO - __main__ -   Step: 143, LR: 1.9140645161290324e-05, Loss: 0.5381053686141968
[2023-09-01 01:09:28,824] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 144/1998 [37:57<7:26:24, 14.45s/it]09/01/2023 01:09:28 - INFO - __main__ -   Step: 144, LR: 1.9130322580645164e-05, Loss: 0.5696697235107422
[2023-09-01 01:09:43,161] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 145/1998 [38:11<7:25:08, 14.41s/it]09/01/2023 01:09:43 - INFO - __main__ -   Step: 145, LR: 1.912e-05, Loss: 0.6385056972503662
[2023-09-01 01:09:56,988] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 146/1998 [38:25<7:19:28, 14.24s/it]09/01/2023 01:09:56 - INFO - __main__ -   Step: 146, LR: 1.910967741935484e-05, Loss: 0.5705494284629822
[2023-09-01 01:10:11,203] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 147/1998 [38:39<7:19:01, 14.23s/it]09/01/2023 01:10:11 - INFO - __main__ -   Step: 147, LR: 1.909935483870968e-05, Loss: 0.645470380783081
[2023-09-01 01:10:26,833] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 148/1998 [38:55<7:31:43, 14.65s/it]09/01/2023 01:10:26 - INFO - __main__ -   Step: 148, LR: 1.9089032258064516e-05, Loss: 0.5901148915290833
[2023-09-01 01:10:41,920] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 149/1998 [39:10<7:35:31, 14.78s/it]09/01/2023 01:10:41 - INFO - __main__ -   Step: 149, LR: 1.9078709677419355e-05, Loss: 0.5837525725364685
[2023-09-01 01:10:56,702] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 150/1998 [39:25<7:35:16, 14.78s/it]09/01/2023 01:10:56 - INFO - __main__ -   Step: 150, LR: 1.9068387096774195e-05, Loss: 0.6923496723175049
[2023-09-01 01:11:12,328] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 151/1998 [39:40<7:42:49, 15.03s/it]09/01/2023 01:11:12 - INFO - __main__ -   Step: 151, LR: 1.9058064516129035e-05, Loss: 0.5829960703849792
[2023-09-01 01:11:25,503] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 152/1998 [39:54<7:25:24, 14.48s/it]09/01/2023 01:11:25 - INFO - __main__ -   Step: 152, LR: 1.904774193548387e-05, Loss: 0.5755507946014404
[2023-09-01 01:11:39,071] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 153/1998 [40:07<7:16:46, 14.20s/it]09/01/2023 01:11:39 - INFO - __main__ -   Step: 153, LR: 1.903741935483871e-05, Loss: 0.6449964046478271
[2023-09-01 01:11:54,745] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 154/1998 [40:23<7:30:05, 14.65s/it]09/01/2023 01:11:54 - INFO - __main__ -   Step: 154, LR: 1.902709677419355e-05, Loss: 0.5767215490341187
[2023-09-01 01:12:08,441] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 155/1998 [40:37<7:21:06, 14.36s/it]09/01/2023 01:12:08 - INFO - __main__ -   Step: 155, LR: 1.901677419354839e-05, Loss: 0.5273059010505676
[2023-09-01 01:12:23,494] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 156/1998 [40:52<7:27:14, 14.57s/it]09/01/2023 01:12:23 - INFO - __main__ -   Step: 156, LR: 1.9006451612903226e-05, Loss: 0.5897856950759888
[2023-09-01 01:12:37,851] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 157/1998 [41:06<7:25:03, 14.50s/it]09/01/2023 01:12:37 - INFO - __main__ -   Step: 157, LR: 1.8996129032258066e-05, Loss: 0.56501305103302
[2023-09-01 01:12:51,753] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 158/1998 [41:20<7:19:16, 14.32s/it]09/01/2023 01:12:51 - INFO - __main__ -   Step: 158, LR: 1.8985806451612906e-05, Loss: 0.6021633148193359
[2023-09-01 01:13:06,819] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 159/1998 [41:35<7:25:51, 14.55s/it]09/01/2023 01:13:06 - INFO - __main__ -   Step: 159, LR: 1.8975483870967742e-05, Loss: 0.645010232925415
[2023-09-01 01:13:22,101] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 160/1998 [41:50<7:32:22, 14.77s/it]09/01/2023 01:13:22 - INFO - __main__ -   Step: 160, LR: 1.896516129032258e-05, Loss: 0.5896092653274536
[2023-09-01 01:13:37,071] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 161/1998 [42:05<7:33:59, 14.83s/it]09/01/2023 01:13:37 - INFO - __main__ -   Step: 161, LR: 1.895483870967742e-05, Loss: 0.6288155913352966
[2023-09-01 01:13:52,040] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 162/1998 [42:20<7:35:01, 14.87s/it]09/01/2023 01:13:52 - INFO - __main__ -   Step: 162, LR: 1.894451612903226e-05, Loss: 0.6162075400352478
[2023-09-01 01:14:05,001] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 163/1998 [42:33<7:17:16, 14.30s/it]09/01/2023 01:14:05 - INFO - __main__ -   Step: 163, LR: 1.8934193548387097e-05, Loss: 0.5962387323379517
[2023-09-01 01:14:19,824] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 164/1998 [42:48<7:21:50, 14.46s/it]09/01/2023 01:14:19 - INFO - __main__ -   Step: 164, LR: 1.8923870967741937e-05, Loss: 0.5582790374755859
[2023-09-01 01:14:35,776] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 165/1998 [43:04<7:35:19, 14.90s/it]09/01/2023 01:14:35 - INFO - __main__ -   Step: 165, LR: 1.8913548387096777e-05, Loss: 0.5248159766197205
[2023-09-01 01:14:50,692] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 166/1998 [43:19<7:35:11, 14.91s/it]09/01/2023 01:14:50 - INFO - __main__ -   Step: 166, LR: 1.8903225806451616e-05, Loss: 0.5831621885299683
[2023-09-01 01:15:05,727] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 167/1998 [43:34<7:36:05, 14.95s/it]09/01/2023 01:15:05 - INFO - __main__ -   Step: 167, LR: 1.8892903225806453e-05, Loss: 0.5371036529541016
[2023-09-01 01:15:20,766] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 168/1998 [43:49<7:36:42, 14.97s/it]09/01/2023 01:15:20 - INFO - __main__ -   Step: 168, LR: 1.8882580645161292e-05, Loss: 0.6534181833267212
[2023-09-01 01:15:34,280] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 169/1998 [44:02<7:23:05, 14.54s/it]09/01/2023 01:15:34 - INFO - __main__ -   Step: 169, LR: 1.8872258064516132e-05, Loss: 0.6543468236923218
[2023-09-01 01:15:49,181] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 170/1998 [44:17<7:26:11, 14.65s/it]09/01/2023 01:15:49 - INFO - __main__ -   Step: 170, LR: 1.886193548387097e-05, Loss: 0.5946736931800842
[2023-09-01 01:16:02,905] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 171/1998 [44:31<7:17:32, 14.37s/it]09/01/2023 01:16:02 - INFO - __main__ -   Step: 171, LR: 1.8851612903225808e-05, Loss: 0.5685343146324158
[2023-09-01 01:16:17,651] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 172/1998 [44:46<7:20:44, 14.48s/it]09/01/2023 01:16:17 - INFO - __main__ -   Step: 172, LR: 1.8841290322580648e-05, Loss: 0.6383805871009827
[2023-09-01 01:16:32,881] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 173/1998 [45:01<7:27:19, 14.71s/it]09/01/2023 01:16:32 - INFO - __main__ -   Step: 173, LR: 1.8830967741935487e-05, Loss: 0.5498583912849426
[2023-09-01 01:16:47,167] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 174/1998 [45:15<7:23:14, 14.58s/it]09/01/2023 01:16:47 - INFO - __main__ -   Step: 174, LR: 1.8820645161290324e-05, Loss: 0.5856316089630127
[2023-09-01 01:17:01,457] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 175/1998 [45:30<7:20:21, 14.49s/it]09/01/2023 01:17:01 - INFO - __main__ -   Step: 175, LR: 1.8810322580645163e-05, Loss: 0.5785613059997559
[2023-09-01 01:17:15,538] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 176/1998 [45:44<7:16:21, 14.37s/it]09/01/2023 01:17:15 - INFO - __main__ -   Step: 176, LR: 1.88e-05, Loss: 0.5988573431968689
[2023-09-01 01:17:30,342] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 177/1998 [45:58<7:20:04, 14.50s/it]09/01/2023 01:17:30 - INFO - __main__ -   Step: 177, LR: 1.878967741935484e-05, Loss: 0.5969913005828857
[2023-09-01 01:17:43,444] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 178/1998 [46:12<7:07:06, 14.08s/it]09/01/2023 01:17:43 - INFO - __main__ -   Step: 178, LR: 1.877935483870968e-05, Loss: 0.5855013132095337
[2023-09-01 01:17:58,056] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 179/1998 [46:26<7:11:42, 14.24s/it]09/01/2023 01:17:58 - INFO - __main__ -   Step: 179, LR: 1.8769032258064515e-05, Loss: 0.5885199904441833
[2023-09-01 01:18:13,397] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 180/1998 [46:41<7:21:28, 14.57s/it]09/01/2023 01:18:13 - INFO - __main__ -   Step: 180, LR: 1.8758709677419355e-05, Loss: 0.5575389862060547
[2023-09-01 01:18:28,408] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 181/1998 [46:56<7:25:14, 14.70s/it]09/01/2023 01:18:28 - INFO - __main__ -   Step: 181, LR: 1.8748387096774195e-05, Loss: 0.583667516708374
[2023-09-01 01:18:42,748] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 182/1998 [47:11<7:21:42, 14.59s/it]09/01/2023 01:18:42 - INFO - __main__ -   Step: 182, LR: 1.8738064516129034e-05, Loss: 0.5550981163978577
[2023-09-01 01:18:56,274] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 183/1998 [47:24<7:11:45, 14.27s/it]09/01/2023 01:18:56 - INFO - __main__ -   Step: 183, LR: 1.872774193548387e-05, Loss: 0.5303710699081421
[2023-09-01 01:19:10,111] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 184/1998 [47:38<7:07:34, 14.14s/it]09/01/2023 01:19:10 - INFO - __main__ -   Step: 184, LR: 1.871741935483871e-05, Loss: 0.633980393409729
[2023-09-01 01:19:24,706] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 185/1998 [47:53<7:11:26, 14.28s/it]09/01/2023 01:19:24 - INFO - __main__ -   Step: 185, LR: 1.870709677419355e-05, Loss: 0.5955307483673096
[2023-09-01 01:19:39,601] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 186/1998 [48:08<7:16:47, 14.46s/it]09/01/2023 01:19:39 - INFO - __main__ -   Step: 186, LR: 1.869677419354839e-05, Loss: 0.6111583709716797
[2023-09-01 01:19:53,847] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 187/1998 [48:22<7:14:34, 14.40s/it]09/01/2023 01:19:53 - INFO - __main__ -   Step: 187, LR: 1.8686451612903226e-05, Loss: 0.5882652401924133
[2023-09-01 01:20:07,123] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 188/1998 [48:35<7:04:11, 14.06s/it]09/01/2023 01:20:07 - INFO - __main__ -   Step: 188, LR: 1.8676129032258066e-05, Loss: 0.5484839677810669
[2023-09-01 01:20:20,226] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 189/1998 [48:48<6:55:16, 13.77s/it]09/01/2023 01:20:20 - INFO - __main__ -   Step: 189, LR: 1.8665806451612905e-05, Loss: 0.5856336355209351
[2023-09-01 01:20:34,332] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 190/1998 [49:02<6:58:03, 13.87s/it]09/01/2023 01:20:34 - INFO - __main__ -   Step: 190, LR: 1.865548387096774e-05, Loss: 0.6341438293457031
[2023-09-01 01:20:48,190] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 191/1998 [49:16<6:57:40, 13.87s/it]09/01/2023 01:20:48 - INFO - __main__ -   Step: 191, LR: 1.864516129032258e-05, Loss: 0.6370968222618103
[2023-09-01 01:21:02,041] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 192/1998 [49:30<6:57:17, 13.86s/it]09/01/2023 01:21:02 - INFO - __main__ -   Step: 192, LR: 1.863483870967742e-05, Loss: 0.5810834765434265
[2023-09-01 01:21:15,995] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 193/1998 [49:44<6:57:52, 13.89s/it]09/01/2023 01:21:15 - INFO - __main__ -   Step: 193, LR: 1.862451612903226e-05, Loss: 0.5648500919342041
[2023-09-01 01:21:30,813] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 194/1998 [49:59<7:06:00, 14.17s/it]09/01/2023 01:21:30 - INFO - __main__ -   Step: 194, LR: 1.8614193548387097e-05, Loss: 0.5251249074935913
[2023-09-01 01:21:44,713] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 195/1998 [50:13<7:03:20, 14.09s/it]09/01/2023 01:21:44 - INFO - __main__ -   Step: 195, LR: 1.8603870967741937e-05, Loss: 0.6333153247833252
[2023-09-01 01:21:59,364] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 196/1998 [50:27<7:08:11, 14.26s/it]09/01/2023 01:21:59 - INFO - __main__ -   Step: 196, LR: 1.8593548387096776e-05, Loss: 0.6162582635879517
[2023-09-01 01:22:12,817] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 197/1998 [50:41<7:00:42, 14.02s/it]09/01/2023 01:22:12 - INFO - __main__ -   Step: 197, LR: 1.8583225806451616e-05, Loss: 0.6294441223144531
[2023-09-01 01:22:28,065] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 198/1998 [50:56<7:11:33, 14.39s/it]09/01/2023 01:22:28 - INFO - __main__ -   Step: 198, LR: 1.8572903225806452e-05, Loss: 0.5778450965881348
[2023-09-01 01:22:42,575] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 199/1998 [51:11<7:12:26, 14.42s/it]09/01/2023 01:22:42 - INFO - __main__ -   Step: 199, LR: 1.8562580645161292e-05, Loss: 0.5880153179168701
[2023-09-01 01:22:56,582] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 200/1998 [51:25<7:08:27, 14.30s/it]09/01/2023 01:22:56 - INFO - __main__ -   Step: 200, LR: 1.855225806451613e-05, Loss: 0.5567127466201782
09/01/2023 01:22:56 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200
09/01/2023 01:22:56 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 01:22:56,591] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 01:22:56,598] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 01:22:56,598] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 01:22:56,598] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 01:22:56,598] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 01:22:56,599] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 01:22:56,599] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 01:22:56,612] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 01:22:56,612] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 01:22:56,612] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 01:22:56,614] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 01:22:56,614] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 01:22:56,614] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 01:22:56,614] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 01:22:56,614] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
Traceback (most recent call last):
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/serialization.py", line 441, in save
Traceback (most recent call last):
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/serialization.py", line 441, in save
    _save(obj, opened_zipfile, pickle_module, pickle_protocol)
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/serialization.py", line 668, in _save
    zip_file.write_record(name, storage.data_ptr(), num_bytes)
RuntimeError    : _save(obj, opened_zipfile, pickle_module, pickle_protocol)[enforce fail at inline_container.cc:471] . PytorchStreamWriter failed writing file data/13: file write failed

  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/serialization.py", line 668, in _save
Traceback (most recent call last):

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/serialization.py", line 441, in save
  File "/data/users/zhangjunlei/tyx/reward-by-prm800k/open-instruct/open_instruct/finetune.py", line 1184, in <module>
    zip_file.write_record(name, storage.data_ptr(), num_bytes)
RuntimeError: [enforce fail at inline_container.cc:471] . PytorchStreamWriter failed writing file data/13: file wri