nohup: ignoring input
[2023-09-01 01:53:26,153] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
The following values were not passed to `accelerate launch` and had defaults used instead:
		More than one GPU was found, enabling multi-GPU training.
		If this was unintended please pass in `--num_processes=1`.
	`--dynamo_backend` was set to a value of `'no'`
To avoid this warning pass in values for each of the problematic parameters or run `accelerate config`.
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
[2023-09-01 01:53:31,956] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-09-01 01:53:31,968] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-09-01 01:53:31,980] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-09-01 01:53:31,980] [INFO] [real_accelerator.py:133:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2023-09-01 01:53:33,433] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-09-01 01:53:33,433] [INFO] [comm.py:616:init_distributed] cdb=None
[2023-09-01 01:53:33,533] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-09-01 01:53:33,534] [INFO] [comm.py:616:init_distributed] cdb=None
[2023-09-01 01:53:33,642] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-09-01 01:53:33,643] [INFO] [comm.py:616:init_distributed] cdb=None
[2023-09-01 01:53:33,643] [INFO] [comm.py:643:init_distributed] Initializing TorchBackend in DeepSpeed with backend nccl
[2023-09-01 01:53:33,869] [WARNING] [comm.py:152:init_deepspeed_backend] NCCL backend in DeepSpeed not yet implemented
[2023-09-01 01:53:33,869] [INFO] [comm.py:616:init_distributed] cdb=None
09/01/2023 01:53:34 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 3
Local process index: 3
Device: cuda:3

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

09/01/2023 01:53:34 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 0
Local process index: 0
Device: cuda:0

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

09/01/2023 01:53:34 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 2
Local process index: 2
Device: cuda:2

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

09/01/2023 01:53:34 - INFO - __main__ - Distributed environment: DEEPSPEED  Backend: nccl
Num processes: 4
Process index: 1
Local process index: 1
Device: cuda:1

Mixed precision type: bf16
ds_config: {'bf16': {'enabled': True}, 'zero_optimization': {'stage': 3, 'overlap_comm': True, 'contiguous_gradients': True, 'sub_group_size': 1000000000.0, 'reduce_bucket_size': 'auto', 'stage3_prefetch_bucket_size': 'auto', 'stage3_param_persistence_threshold': 'auto', 'stage3_max_live_parameters': 1000000000.0, 'stage3_max_reuse_distance': 1000000000.0, 'stage3_gather_16bit_weights_on_model_save': True}, 'gradient_accumulation_steps': 1, 'gradient_clipping': 'auto', 'steps_per_print': inf, 'train_batch_size': 'auto', 'train_micro_batch_size_per_gpu': 'auto', 'wall_clock_breakdown': False, 'fp16': {'enabled': False}}

loading configuration file /data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936/config.json
Model config LlamaConfig {
  "_name_or_path": "/data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936",
  "architectures": [
    "LlamaForCausalLM"
  ],
  "bos_token_id": 1,
  "eos_token_id": 2,
  "hidden_act": "silu",
  "hidden_size": 5120,
  "initializer_range": 0.02,
  "intermediate_size": 13824,
  "max_position_embeddings": 4096,
  "model_type": "llama",
  "num_attention_heads": 40,
  "num_hidden_layers": 40,
  "num_key_value_heads": 40,
  "pad_token_id": 0,
  "pretraining_tp": 1,
  "rms_norm_eps": 1e-05,
  "rope_scaling": null,
  "tie_word_embeddings": false,
  "torch_dtype": "float16",
  "transformers_version": "4.31.0",
  "use_cache": true,
  "vocab_size": 32000
}

loading file tokenizer.model
loading file added_tokens.json
loading file special_tokens_map.json
loading file tokenizer_config.json
You are using the legacy behaviour of the <class 'transformers.models.llama.tokenization_llama.LlamaTokenizer'>. This means that tokens that come after special tokens will not be properly handled. We recommend you to read the related pull request available at https://github.com/huggingface/transformers/pull/24565
loading weights file /data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936/model.safetensors.index.json
Detected DeepSpeed ZeRO-3: activating zero.init() for this model
Generate config GenerationConfig {
  "_from_model_config": true,
  "bos_token_id": 1,
  "eos_token_id": 2,
  "pad_token_id": 0,
  "transformers_version": "4.31.0"
}

[2023-09-01 01:53:53,529] [INFO] [partition_parameters.py:326:__exit__] finished initializing model with 13.02B parameters
Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:01,  1.81it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:01,  1.77it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:00<00:01,  1.76it/s]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:04<00:02,  2.26s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:04<00:02,  2.26s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:04<00:02,  2.35s/it]Loading checkpoint shards:  33%|███▎      | 1/3 [00:05<00:10,  5.35s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.73s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.43s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.71s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.43s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.73s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:07<00:00,  2.44s/it]
Loading checkpoint shards:  67%|██████▋   | 2/3 [00:10<00:05,  5.18s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:13<00:00,  4.32s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:13<00:00,  4.57s/it]
All model checkpoint weights were used when initializing LlamaForCausalLM.

All the weights of LlamaForCausalLM were initialized from the model checkpoint at /data/users/zhangjunlei/tyx/.cache/huggingface/hub/models--meta-llama--Llama-2-13b-hf/snapshots/db6b8eb1feabb38985fdf785a89895959e944936.
If your task is similar to the task the model of the checkpoint was trained on, you can already use LlamaForCausalLM for predictions without further training.
Generation config file not found, using a generation config created from the model config.
Assigning <s> to the bos_token key of the tokenizer
Assigning </s> to the eos_token key of the tokenizer
Assigning <unk> to the unk_token key of the tokenizer
Assigning <pad> to the pad_token key of the tokenizer
Adding <pad> to the vocabulary
09/01/2023 01:54:08 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 1
09/01/2023 01:54:08 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 3
09/01/2023 01:54:08 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 2
09/01/2023 01:54:09 - INFO - __main__ - Sample 30875 of the training set: {'input_ids': tensor([    1,  2803,   395, 29925, 29938,   367,   263,  1298,   373,   278,
         1196,    13, 29905,  7110,   463, 29912, 12571, 29913, 29871, 29941,
         2474,   448, 29896,  2474, 29871, 29906,   320,   355, 29912, 12571,
        29913,   718,   260,   320,   463, 29912, 12571, 29913, 29871, 29906,
         2474,   448, 29906,  2474, 29871, 29896,   320,   355, 29912, 12571,
         1012, 29962,   392,  1235,   395, 29984, 29938,   367,   263,  1298,
          373,   278,  1196,    13, 29905,  7110,   463, 29912, 12571, 29913,
        29871, 29900,  2474, 29871, 29900,  2474, 29871, 29946,   320,   355,
        29912, 12571, 29913,   718,   269,   320,   463, 29912, 12571, 29913,
        29871, 29896,  2474, 29871, 29906,  2474,   448, 29896,   320,   355,
        29912, 12571,  1836, 18899, 12542,   278,  3273,   342,  1950,  5418,
          395, 29925, 29984,  7449,    13, 29902,   864,   304,  1284,   278,
         3273,   342,  5418,  1546,  1023,  3454, 29892,   577,   306,   817,
          304,  1284,   263,  4608,   393,   338,   639, 14081, 16311,   304,
         1716,   310,   963, 29889,    13, 29909,  4608,   393,   338,   639,
        14081, 16311,   304,  1716,  3454,   338,   278,  4891,  3234,   310,
         1009,  5305, 12047, 29889,    13,  6295,   306,   674, 10272,   278,
         4891,  3234,   310,   779,   463, 29912, 12571, 29913, 29871, 29906,
         2474,   448, 29906,  2474, 29871, 29896,   320,   355, 29912, 12571,
         1042,   322,   779,   463, 29912, 12571, 29913, 29871, 29896,  2474,
        29871, 29906,  2474,   448, 29896,   320,   355, 29912, 12571,  1042,
          773,   278, 11806,   424,  7063, 29889,    13, 29902,   679,    13,
        29905,  7110,   463, 29912, 12571, 29913, 29871, 29906,  2474,   448,
        29906,  2474, 29871, 29896,   320,   355, 29912, 12571, 29913,   320,
         3706,   320,   463, 29912, 12571, 29913, 29871, 29896,  2474, 29871,
        29906,  2474,   448, 29896,   320,   355, 29912, 12571, 29913,   353,
          320,   463, 29912, 29894,  5344, 29913,   320,  2762, 29912, 29875,
        29913,   669,   320,  2762, 29912, 29926, 29913,   669,   320,  2762,
        29912, 29895, 29913,  2474, 29871, 29906,   669,   448, 29906,   669,
        29871, 29896,  2474, 29871, 29896,   669, 29871, 29906,   669,   448,
        29896,   320,   355, 29912, 29894,  5344, 29913,   353,   320,  2762,
        29912, 29875,  2119, 29906, 29899, 29906, 29897,   448,   320,  2762,
        29912, 29926,  2119, 29899, 29906, 29899, 29896, 29897,   718,   320,
         2762, 29912, 29895,  2119, 29946, 29974, 29906, 29897,   353, 29871,
        29941, 29905,  2762, 29912, 29926, 29913,   718, 29871, 29953, 29905,
         2762, 29912, 29895,  1836, 18899,    13,  6295,   263,  4608,   639,
        14081, 16311,   304,  1716,  3454,   338,   779,   463, 29912, 12571,
        29913, 29871, 29900,  2474, 29871, 29941,  2474, 29871, 29953,   320,
          355, 29912, 12571,  1836, 29938,    13,  1762,  1284,   278,  3273,
          342,  5418,  1546,   278,  3454, 29892,   306,   817,   304,  2060,
          738,  4608,   393,  4511, 29879,   963, 11480,   445,   639, 14081,
        16311,  4608, 29889,    13, 29902,   674,   671,   278,  4608,   515,
          278,  1298,   779,   463, 29912, 12571, 29913, 29871, 29900,  2474,
        29871, 29900,  2474, 29871, 29946,   320,   355, 29912, 12571,  1042,
          373,   278,  1473,  1196,   304,   278,  1298,   779,   463, 29912,
        12571, 29913, 29871, 29941,  2474,   448, 29896,  2474, 29871, 29906,
          320,   355, 29912, 12571,  1042,   373,   278,   937,  1196, 29892,
          607,   338,   779,   463, 29912, 12571, 29913, 29871, 29941,  2474,
          448, 29896,  2474,   448, 29906,   320,   355, 29912, 12571,  1836,
        29938,    13,  1576, 18246,   310,   445,  4608, 11480,   278,   639,
        14081, 16311,  4608,   338,  2183,   491,   278,  7063,    13, 29905,
         7110,   726, 29912, 20865,  6353,   463, 29912, 12571, 29913, 29871,
        29900,  2474, 29871, 29941,  2474, 29871, 29953,   320,   355, 29912,
        12571,   930,   320,   463, 29912, 12571, 29913, 29871, 29941,  2474,
          448, 29896,  2474,   448, 29906,   320,   355, 29912, 12571, 29913,
          353,   320,  1154,   741,   463, 29912, 12571, 29913, 29871, 29941,
         2474,   448, 29896,  2474,   448, 29906,   320,   355, 29912, 12571,
        29913,   320,  3822,   320,   463, 29912, 12571, 29913, 29871, 29900,
         2474, 29871, 29941,  2474, 29871, 29953,   320,   355, 29912, 12571,
        12431,   463, 29912, 12571, 29913, 29871, 29900,  2474, 29871, 29941,
         2474, 29871, 29953,   320,   355, 29912, 12571, 29913,   320,  3822,
          320,   463, 29912, 12571, 29913, 29871, 29900,  2474, 29871, 29941,
         2474, 29871, 29953,   320,   355, 29912, 12571,   930,   320,   463,
        29912, 12571, 29913, 29871, 29900,  2474, 29871, 29941,  2474, 29871,
        29953,   320,   355, 29912, 12571, 29913,   353,   320,  1154,  8499,
        29941,  1157, 29946, 29945, 29913,   320,   463, 29912, 12571, 29913,
        29871, 29900,  2474, 29871, 29941,  2474, 29871, 29953,   320,   355,
        29912, 12571,  1836, 18899,    13]), 'labels': tensor([-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        6374, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        6374, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, 6374, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, 6374, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, 6374, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, 6374,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, 8178])}.
09/01/2023 01:54:09 - INFO - __main__ - Sample 25373 of the training set: {'input_ids': tensor([    1,   382,  4387,   403, 18024,  1154, 29871, 29906,   741,  1188,
        29918, 29946, 29912, 29906, 29900, 29900, 29900, 29985, 29953,   930,
          718,   320,  1154, 29871, 29941,   741,  1188, 29918, 29945, 29912,
        29906, 29900, 29900, 29900, 29985, 29953,   930,  2053, 29962, 29887,
         4357,   596,  1234,   408,   263, 15958,   297, 19604,  4958, 29889,
           13, 29902,  8369,   393,   278,  1023,  5227,  1953,   505,   278,
         1021, 28869,   310, 29871, 29953,   297,   278,  2967, 29871, 29906,
        29900, 29900, 29900, 29892,   577,   306,  4997,   565,   306,   508,
          671,   777,  1480, 23830, 29885,  4426,   304, 21092,   963, 29889,
           13, 29902, 17386,   393, 18024,  1188, 29918, 29890, 29912, 29916,
        29985, 29874, 29913,   353,   263, 29905,  1188, 29918, 29890, 29912,
        29916,  7570, 29962,   577,   306,   508, 10683,   278,  5227,  1953,
          408, 18024,  1154, 29871, 29906, 29912, 29953, 29905,  1188, 29918,
        29946, 29912, 29906, 29900, 29900, 29900,   930,   718,   320,  1154,
        29871, 29941, 29912, 29953, 29905,  1188, 29918, 29945, 29912, 29906,
        29900, 29900, 29900,   930,  7790, 29962,    13, 10454,   306,   508,
         7329,   714,   278, 29871, 29953,   515,   278, 14267,  1061,   322,
          679, 18024,  1154, 29871, 29896, 29941, 29905,  1563,  1194,  1154,
        29871, 29906,   741,  1188, 29918, 29946, 29912, 29906, 29900, 29900,
        29900,   930,   718,   320,  1154, 29871, 29941,   741,  1188, 29918,
        29945, 29912, 29906, 29900, 29900, 29900,  4229,  1266,   467, 18899,
           13]), 'labels': tensor([-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, 6374, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        6374, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, 8178])}.
09/01/2023 01:54:09 - INFO - __main__ - Sample 67949 of the training set: {'input_ids': tensor([    1,   450, 10253,   310,  7206,  2671, 29915, 29879,  5670,  5057,
          612,   969,  4048,   886,  3633,   752,  3885,  2889,  1474,   472,
          263,  6554,   310,   697, 10151, 29889, 29871,   960, 29420,  2437,
         9197, 29871, 29896, 29900, 29900, 29900, 17208,   297,   697,   310,
         1438, 15303, 29892,   769,   920,  1568,  4066,   674,  1183,  2326,
        29876,  1156,  5320,  2440, 29973, 29871,   313, 29954,   573,   596,
         1234,   304,   278, 20471, 11232,   279,  1846,    13,  6295,   278,
         4066,  6554,   338, 29871, 29896, 10151, 29892,   470, 29871, 29900,
        29889, 29900, 29896, 29889,    13,  2855,   591,   864,   304,  1073,
          920,  1568,  4066,   338, 20591,  1156, 29871, 29945,  2440, 29889,
           13,  6295,   278,  5253,   310,  4066, 20591,  1269,  1629,   338,
          395, 29896, 29900, 29900, 29900,   334, 29871, 29900, 29889, 29900,
        29896,   353, 29871, 29896, 29900,  1504,    13]), 'labels': tensor([-100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        6374, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, 6374, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
        -100, -100, -100, -100, -100, -100, 8178])}.
09/01/2023 01:54:09 - INFO - accelerate.accelerator - Since you passed both train and evaluation dataloader, `is_train_batch_min` (here True will decide the `train_batch_size` (2).
09/01/2023 01:54:09 - INFO - accelerate.accelerator - Updating DeepSpeed's gradient accumulation steps to 16 from 1.
[2023-09-01 01:54:09,218] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed info: version=0.10.0, git-hash=unknown, git-branch=unknown
09/01/2023 01:54:09 - INFO - torch.distributed.distributed_c10d - Added key: store_based_barrier_key:2 to store for rank: 0
09/01/2023 01:54:09 - INFO - torch.distributed.distributed_c10d - Rank 0: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
09/01/2023 01:54:09 - INFO - torch.distributed.distributed_c10d - Rank 1: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
09/01/2023 01:54:09 - INFO - torch.distributed.distributed_c10d - Rank 3: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
09/01/2023 01:54:09 - INFO - torch.distributed.distributed_c10d - Rank 2: Completed store-based barrier for key:store_based_barrier_key:2 with 4 nodes.
[2023-09-01 01:54:09,971] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Flops Profiler Enabled: False
[2023-09-01 01:54:09,973] [INFO] [logging.py:96:log_dist] [Rank 0] Removing param_group that has no 'params' in the client Optimizer
[2023-09-01 01:54:09,973] [INFO] [logging.py:96:log_dist] [Rank 0] Using client Optimizer as basic optimizer
[2023-09-01 01:54:09,990] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Basic Optimizer = AdamW
[2023-09-01 01:54:09,990] [INFO] [utils.py:54:is_zero_supported_optimizer] Checking ZeRO support for optimizer=AdamW type=<class 'torch.optim.adamw.AdamW'>
[2023-09-01 01:54:09,990] [INFO] [logging.py:96:log_dist] [Rank 0] Creating fp16 ZeRO stage 3 optimizer, MiCS is enabled False, Hierarchical params gather False
[2023-09-01 01:54:09,990] [INFO] [logging.py:96:log_dist] [Rank 0] Creating torch.bfloat16 ZeRO stage 3 optimizer
[2023-09-01 01:54:10,097] [INFO] [utils.py:785:see_memory_usage] Stage 3 initialize beginning
[2023-09-01 01:54:10,098] [INFO] [utils.py:786:see_memory_usage] MA 6.75 GB         Max_MA 7.44 GB         CA 8.9 GB         Max_CA 9 GB 
[2023-09-01 01:54:10,098] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 82.95 GB, percent = 8.2%
[2023-09-01 01:54:10,100] [INFO] [stage3.py:117:__init__] Reduce bucket size 26214400
[2023-09-01 01:54:10,100] [INFO] [stage3.py:118:__init__] Prefetch bucket size 23592960
[2023-09-01 01:54:10,199] [INFO] [utils.py:785:see_memory_usage] DeepSpeedZeRoOffload initialize [begin]
[2023-09-01 01:54:10,200] [INFO] [utils.py:786:see_memory_usage] MA 6.75 GB         Max_MA 6.75 GB         CA 8.9 GB         Max_CA 9 GB 
[2023-09-01 01:54:10,200] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 82.96 GB, percent = 8.2%
Parameter Offload: Total persistent parameters: 414720 in 81 params
[2023-09-01 01:54:10,318] [INFO] [utils.py:785:see_memory_usage] DeepSpeedZeRoOffload initialize [end]
[2023-09-01 01:54:10,318] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.83 GB         CA 8.9 GB         Max_CA 9 GB 
[2023-09-01 01:54:10,319] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 82.97 GB, percent = 8.2%
[2023-09-01 01:54:10,416] [INFO] [utils.py:785:see_memory_usage] Before creating fp16 partitions
[2023-09-01 01:54:10,416] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.29 GB         CA 8.9 GB         Max_CA 9 GB 
[2023-09-01 01:54:10,416] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 82.97 GB, percent = 8.2%
[2023-09-01 01:54:14,876] [INFO] [utils.py:785:see_memory_usage] After creating fp16 partitions: 4
[2023-09-01 01:54:14,877] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.29 GB         CA 6.89 GB         Max_CA 9 GB 
[2023-09-01 01:54:14,877] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 101.18 GB, percent = 10.0%
[2023-09-01 01:54:15,001] [INFO] [utils.py:785:see_memory_usage] Before creating fp32 partitions
[2023-09-01 01:54:15,002] [INFO] [utils.py:786:see_memory_usage] MA 6.29 GB         Max_MA 6.29 GB         CA 6.89 GB         Max_CA 7 GB 
[2023-09-01 01:54:15,002] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 101.18 GB, percent = 10.0%
[2023-09-01 01:54:15,145] [INFO] [utils.py:785:see_memory_usage] After creating fp32 partitions
[2023-09-01 01:54:15,146] [INFO] [utils.py:786:see_memory_usage] MA 18.42 GB         Max_MA 19.43 GB         CA 21.9 GB         Max_CA 22 GB 
[2023-09-01 01:54:15,146] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 101.18 GB, percent = 10.0%
[2023-09-01 01:54:15,860] [INFO] [utils.py:785:see_memory_usage] Before initializing optimizer states
[2023-09-01 01:54:15,861] [INFO] [utils.py:786:see_memory_usage] MA 18.42 GB         Max_MA 18.42 GB         CA 21.9 GB         Max_CA 22 GB 
[2023-09-01 01:54:15,861] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 82.95 GB, percent = 8.2%
[2023-09-01 01:54:16,051] [INFO] [utils.py:785:see_memory_usage] After initializing optimizer states
[2023-09-01 01:54:16,052] [INFO] [utils.py:786:see_memory_usage] MA 42.66 GB         Max_MA 52.24 GB         CA 63.22 GB         Max_CA 63 GB 
[2023-09-01 01:54:16,052] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 82.95 GB, percent = 8.2%
[2023-09-01 01:54:16,070] [INFO] [stage3.py:424:_setup_for_real_optimizer] optimizer state initialized
[2023-09-01 01:54:16,220] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 01:54:16,224] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 01:54:16,228] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 01:54:16,229] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 01:54:16,230] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 01:54:16,233] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 01:54:16,233] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 01:54:16,237] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 01:54:16,237] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 01:54:16,238] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 01:54:16,241] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 01:54:16,245] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 01:54:16,305] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 01:54:16,305] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 01:54:16,306] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 01:54:16,356] [INFO] [utils.py:785:see_memory_usage] After initializing ZeRO optimizer
[2023-09-01 01:54:16,356] [INFO] [utils.py:786:see_memory_usage] MA 48.77 GB         Max_MA 49.38 GB         CA 69.29 GB         Max_CA 69 GB 
[2023-09-01 01:54:16,356] [INFO] [utils.py:793:see_memory_usage] CPU Virtual Memory:  used = 83.46 GB, percent = 8.3%
[2023-09-01 01:54:16,357] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Final Optimizer = AdamW
[2023-09-01 01:54:16,357] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed using client LR scheduler
[2023-09-01 01:54:16,357] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed LR Scheduler = None
[2023-09-01 01:54:16,357] [INFO] [logging.py:96:log_dist] [Rank 0] step=0, skipped=0, lr=[0.0], mom=[(0.9, 0.999)]
[2023-09-01 01:54:16,358] [INFO] [config.py:960:print] DeepSpeedEngine configuration:
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   activation_checkpointing_config  {
    "partition_activations": false, 
    "contiguous_memory_optimization": false, 
    "cpu_checkpointing": false, 
    "number_checkpoints": null, 
    "synchronize_checkpoint_boundary": false, 
    "profile": false
}
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   aio_config ................... {'block_size': 1048576, 'queue_depth': 8, 'thread_count': 1, 'single_submit': False, 'overlap_events': True}
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   amp_enabled .................. False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   amp_params ................... False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   autotuning_config ............ {
    "enabled": false, 
    "start_step": null, 
    "end_step": null, 
    "metric_path": null, 
    "arg_mappings": null, 
    "metric": "throughput", 
    "model_info": null, 
    "results_dir": "autotuning_results", 
    "exps_dir": "autotuning_exps", 
    "overwrite": true, 
    "fast": true, 
    "start_profile_step": 3, 
    "end_profile_step": 5, 
    "tuner_type": "gridsearch", 
    "tuner_early_stopping": 5, 
    "tuner_num_trials": 50, 
    "model_info_path": null, 
    "mp_size": 1, 
    "max_train_batch_size": null, 
    "min_train_batch_size": 1, 
    "max_train_micro_batch_size_per_gpu": 1.024000e+03, 
    "min_train_micro_batch_size_per_gpu": 1, 
    "num_tuning_micro_batch_sizes": 3
}
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   bfloat16_enabled ............. True
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   checkpoint_parallel_write_pipeline  False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   checkpoint_tag_validation_enabled  True
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   checkpoint_tag_validation_fail  False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   comms_config ................. <deepspeed.comm.config.DeepSpeedCommsConfig object at 0x7fbfb4061cc0>
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   communication_data_type ...... None
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   compression_config ........... {'weight_quantization': {'shared_parameters': {'enabled': False, 'quantizer_kernel': False, 'schedule_offset': 0, 'quantize_groups': 1, 'quantize_verbose': False, 'quantization_type': 'symmetric', 'quantize_weight_in_forward': False, 'rounding': 'nearest', 'fp16_mixed_quantize': False, 'quantize_change_ratio': 0.001}, 'different_groups': {}}, 'activation_quantization': {'shared_parameters': {'enabled': False, 'quantization_type': 'symmetric', 'range_calibration': 'dynamic', 'schedule_offset': 1000}, 'different_groups': {}}, 'sparse_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'row_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'head_pruning': {'shared_parameters': {'enabled': False, 'method': 'topk', 'schedule_offset': 1000}, 'different_groups': {}}, 'channel_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'layer_reduction': {'enabled': False}}
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   curriculum_enabled_legacy .... False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   curriculum_params_legacy ..... False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   data_efficiency_config ....... {'enabled': False, 'seed': 1234, 'data_sampling': {'enabled': False, 'num_epochs': 1000, 'num_workers': 0, 'curriculum_learning': {'enabled': False}}, 'data_routing': {'enabled': False, 'random_ltd': {'enabled': False, 'layer_token_lr_schedule': {'enabled': False}}}}
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   data_efficiency_enabled ...... False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   dataloader_drop_last ......... False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   disable_allgather ............ False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   dump_state ................... False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   dynamic_loss_scale_args ...... None
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   eigenvalue_enabled ........... False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   eigenvalue_gas_boundary_resolution  1
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   eigenvalue_layer_name ........ bert.encoder.layer
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   eigenvalue_layer_num ......... 0
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   eigenvalue_max_iter .......... 100
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   eigenvalue_stability ......... 1e-06
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   eigenvalue_tol ............... 0.01
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   eigenvalue_verbose ........... False
[2023-09-01 01:54:16,358] [INFO] [config.py:964:print]   elasticity_enabled ........... False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   flops_profiler_config ........ {
    "enabled": false, 
    "recompute_fwd_factor": 0.0, 
    "profile_step": 1, 
    "module_depth": -1, 
    "top_modules": 1, 
    "detailed": true, 
    "output_file": null
}
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   fp16_auto_cast ............... None
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   fp16_enabled ................. False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   fp16_master_weights_and_gradients  False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   global_rank .................. 0
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   grad_accum_dtype ............. None
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   gradient_accumulation_steps .. 16
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   gradient_clipping ............ 1.0
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   gradient_predivide_factor .... 1.0
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   hybrid_engine ................ enabled=False max_out_tokens=512 inference_tp_size=1 release_inference_cache=False pin_parameters=True tp_gather_partition_size=8
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   initial_dynamic_scale ........ 1
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   load_universal_checkpoint .... False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   loss_scale ................... 1.0
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   memory_breakdown ............. False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   mics_hierarchial_params_gather  False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   mics_shard_size .............. -1
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   monitor_config ............... tensorboard=TensorBoardConfig(enabled=False, output_path='', job_name='DeepSpeedJobName') wandb=WandbConfig(enabled=False, group=None, team=None, project='deepspeed') csv_monitor=CSVConfig(enabled=False, output_path='', job_name='DeepSpeedJobName') enabled=False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   nebula_config ................ {
    "enabled": false, 
    "persistent_storage_path": null, 
    "persistent_time_interval": 100, 
    "num_of_version_in_retention": 2, 
    "enable_nebula_load": true, 
    "load_path": null
}
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   optimizer_legacy_fusion ...... False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   optimizer_name ............... None
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   optimizer_params ............. None
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   pipeline ..................... {'stages': 'auto', 'partition': 'best', 'seed_layers': False, 'activation_checkpoint_interval': 0}
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   pld_enabled .................. False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   pld_params ................... False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   prescale_gradients ........... False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   scheduler_name ............... None
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   scheduler_params ............. None
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   sparse_attention ............. None
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   sparse_gradients_enabled ..... False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   steps_per_print .............. inf
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   train_batch_size ............. 128
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   train_micro_batch_size_per_gpu  2
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   use_node_local_storage ....... False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   wall_clock_breakdown ......... False
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   world_size ................... 4
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   zero_allow_untested_optimizer  True
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   zero_config .................. stage=3 contiguous_gradients=True reduce_scatter=True reduce_bucket_size=26214400 allgather_partitions=True allgather_bucket_size=500,000,000 overlap_comm=True load_from_fp32_weights=True elastic_checkpoint=False offload_param=None offload_optimizer=None sub_group_size=1000000000 cpu_offload_param=None cpu_offload_use_pin_memory=None cpu_offload=None prefetch_bucket_size=23592960 param_persistence_threshold=51200 model_persistence_threshold=sys.maxsize max_live_parameters=1000000000 max_reuse_distance=1000000000 gather_16bit_weights_on_model_save=True stage3_gather_fp16_weights_on_model_save=False ignore_unused_parameters=True legacy_stage1=False round_robin_gradients=False zero_hpz_partition_size=1 zero_quantized_weights=False zero_quantized_gradients=False mics_shard_size=-1 mics_hierarchical_params_gather=False memory_efficient_linear=True
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   zero_enabled ................. True
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   zero_force_ds_cpu_optimizer .. True
[2023-09-01 01:54:16,359] [INFO] [config.py:964:print]   zero_optimization_stage ...... 3
[2023-09-01 01:54:16,359] [INFO] [config.py:950:print_user_config]   json = {
    "bf16": {
        "enabled": true
    }, 
    "zero_optimization": {
        "stage": 3, 
        "overlap_comm": true, 
        "contiguous_gradients": true, 
        "sub_group_size": 1.000000e+09, 
        "reduce_bucket_size": 2.621440e+07, 
        "stage3_prefetch_bucket_size": 2.359296e+07, 
        "stage3_param_persistence_threshold": 5.120000e+04, 
        "stage3_max_live_parameters": 1.000000e+09, 
        "stage3_max_reuse_distance": 1.000000e+09, 
        "stage3_gather_16bit_weights_on_model_save": true
    }, 
    "gradient_accumulation_steps": 16, 
    "gradient_clipping": 1.0, 
    "steps_per_print": inf, 
    "train_batch_size": 128, 
    "train_micro_batch_size_per_gpu": 2, 
    "wall_clock_breakdown": false, 
    "fp16": {
        "enabled": false
    }, 
    "zero_allow_untested_optimizer": true
}
wandb: Currently logged in as: kidrain61. Use `wandb login --relogin` to force relogin
wandb: - Waiting for wandb.init()...wandb: \ Waiting for wandb.init()...wandb: Tracking run with wandb version 0.15.9
wandb: Run data is saved locally in /data/users/zhangjunlei/tyx/wandb/wandb/run-20230901_015418-d3cdifa0
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run breezy-voice-53
wandb: ⭐️ View project at https://wandb.ai/kidrain61/step-reward
wandb: 🚀 View run at https://wandb.ai/kidrain61/step-reward/runs/d3cdifa0
09/01/2023 01:54:25 - INFO - __main__ - ***** Running training *****
09/01/2023 01:54:25 - INFO - __main__ -   Num examples = 85194
09/01/2023 01:54:25 - INFO - __main__ -   Num Epochs = 3
09/01/2023 01:54:25 - INFO - __main__ -   Instantaneous batch size per device = 2
09/01/2023 01:54:25 - INFO - __main__ -   Total train batch size (w. parallel, distributed & accumulation) = 128
09/01/2023 01:54:25 - INFO - __main__ -   Gradient Accumulation steps = 16
09/01/2023 01:54:25 - INFO - __main__ -   Total optimization steps = 1998
  0%|          | 0/1998 [00:00<?, ?it/s]09/01/2023 01:54:25 - INFO - __main__ - args.resume_from_checkpoint = /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100
09/01/2023 01:54:25 - INFO - __main__ - Resuming from checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100
09/01/2023 01:54:25 - INFO - accelerate.accelerator - Loading states from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100
09/01/2023 01:54:25 - INFO - accelerate.accelerator - Loading DeepSpeed Model and Optimizer
[2023-09-01 01:54:25,543] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 01:54:25,552] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 01:54:25,552] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 01:54:25,560] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 01:54:25,569] [INFO] [torch_checkpoint_engine.py:27:load] [Torch] Loading checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 01:54:35,106] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 01:54:35,106] [INFO] [engine.py:2865:_get_all_zero_checkpoint_state_dicts] successfully read 4 ZeRO state_dicts for rank 3
[2023-09-01 01:54:35,438] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 01:54:35,438] [INFO] [engine.py:2865:_get_all_zero_checkpoint_state_dicts] successfully read 4 ZeRO state_dicts for rank 1
[2023-09-01 01:54:35,662] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 01:54:35,662] [INFO] [engine.py:2865:_get_all_zero_checkpoint_state_dicts] successfully read 4 ZeRO state_dicts for rank 2
[2023-09-01 01:54:45,332] [INFO] [torch_checkpoint_engine.py:29:load] [Torch] Loaded checkpoint from /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 01:54:45,332] [INFO] [engine.py:2865:_get_all_zero_checkpoint_state_dicts] successfully read 4 ZeRO state_dicts for rank 0
[2023-09-01 01:55:00,756] [INFO] [engine.py:2815:_load_zero_checkpoint] loading 4 zero partition checkpoints for rank 0
[2023-09-01 01:55:00,756] [INFO] [engine.py:2815:_load_zero_checkpoint] loading 4 zero partition checkpoints for rank 3
[2023-09-01 01:55:00,757] [INFO] [engine.py:2815:_load_zero_checkpoint] loading 4 zero partition checkpoints for rank 1
[2023-09-01 01:55:00,757] [INFO] [engine.py:2815:_load_zero_checkpoint] loading 4 zero partition checkpoints for rank 2
09/01/2023 01:55:02 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer loaded from input dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_100/pytorch_model
09/01/2023 01:55:02 - INFO - accelerate.checkpointing - All model weights loaded successfully
09/01/2023 01:55:02 - INFO - accelerate.checkpointing - All optimizer states loaded successfully
09/01/2023 01:55:02 - INFO - accelerate.checkpointing - All scheduler states loaded successfully
09/01/2023 01:55:02 - INFO - accelerate.checkpointing - All random states loaded successfully
09/01/2023 01:55:02 - INFO - accelerate.accelerator - Loading in 0 custom states
09/01/2023 01:55:02 - INFO - __main__ - len(train_dataloader) = 10650
09/01/2023 01:55:02 - INFO - __main__ - Resuming from epoch 0 and step 1600 with gas=16
  0%|          | 0/1998 [00:37<?, ?it/s]  0%|          | 9/1998 [00:37<00:22, 86.88it/s]  1%|          | 19/1998 [00:37<00:21, 89.98it/s]  1%|▏         | 29/1998 [00:37<00:21, 90.48it/s]  2%|▏         | 39/1998 [00:37<00:21, 90.78it/s]  2%|▏         | 49/1998 [00:37<00:21, 90.54it/s]  3%|▎         | 59/1998 [00:37<00:21, 91.94it/s]  3%|▎         | 69/1998 [00:37<00:20, 92.94it/s]  4%|▍         | 79/1998 [00:37<00:20, 93.07it/s]  4%|▍         | 89/1998 [00:38<00:20, 92.27it/s]  5%|▍         | 99/1998 [00:38<00:20, 93.18it/s]  5%|▌         | 100/1998 [00:48<00:20, 93.18it/s][2023-09-01 01:55:19,611] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 101/1998 [00:54<20:42,  1.53it/s]09/01/2023 01:55:19 - INFO - __main__ -   Step: 101, LR: 1.9574193548387098e-05, Loss: 0.4818899631500244
[2023-09-01 01:55:34,798] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 102/1998 [01:09<45:51,  1.45s/it]09/01/2023 01:55:34 - INFO - __main__ -   Step: 102, LR: 1.9563870967741938e-05, Loss: 0.5562216639518738
[2023-09-01 01:55:49,640] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 103/1998 [01:24<1:16:31,  2.42s/it]09/01/2023 01:55:49 - INFO - __main__ -   Step: 103, LR: 1.9553548387096777e-05, Loss: 0.6500781774520874
[2023-09-01 01:56:03,050] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 104/1998 [01:37<1:49:04,  3.46s/it]09/01/2023 01:56:03 - INFO - __main__ -   Step: 104, LR: 1.9543225806451617e-05, Loss: 0.6601154804229736
[2023-09-01 01:56:16,670] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 105/1998 [01:51<2:26:57,  4.66s/it]09/01/2023 01:56:16 - INFO - __main__ -   Step: 105, LR: 1.9532903225806453e-05, Loss: 0.6190290451049805
[2023-09-01 01:56:31,347] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 106/1998 [02:05<3:12:34,  6.11s/it]09/01/2023 01:56:31 - INFO - __main__ -   Step: 106, LR: 1.952258064516129e-05, Loss: 0.5971975326538086
[2023-09-01 01:56:47,016] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 107/1998 [02:21<4:04:04,  7.74s/it]09/01/2023 01:56:47 - INFO - __main__ -   Step: 107, LR: 1.951225806451613e-05, Loss: 0.5724693536758423
[2023-09-01 01:57:01,579] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 108/1998 [02:36<4:46:09,  9.08s/it]09/01/2023 01:57:01 - INFO - __main__ -   Step: 108, LR: 1.950193548387097e-05, Loss: 0.6408687829971313
[2023-09-01 01:57:14,697] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  5%|▌         | 109/1998 [02:49<5:13:50,  9.97s/it]09/01/2023 01:57:14 - INFO - __main__ -   Step: 109, LR: 1.949161290322581e-05, Loss: 0.623163640499115
[2023-09-01 01:57:27,705] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 110/1998 [03:02<5:36:28, 10.69s/it]09/01/2023 01:57:27 - INFO - __main__ -   Step: 110, LR: 1.9481290322580645e-05, Loss: 0.5690590143203735
[2023-09-01 01:57:42,554] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 111/1998 [03:17<6:09:30, 11.75s/it]09/01/2023 01:57:42 - INFO - __main__ -   Step: 111, LR: 1.9470967741935485e-05, Loss: 0.6882710456848145
[2023-09-01 01:57:56,940] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 112/1998 [03:31<6:31:23, 12.45s/it]09/01/2023 01:57:56 - INFO - __main__ -   Step: 112, LR: 1.9460645161290324e-05, Loss: 0.6458712816238403
[2023-09-01 01:58:10,484] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 113/1998 [03:44<6:40:38, 12.75s/it]09/01/2023 01:58:10 - INFO - __main__ -   Step: 113, LR: 1.9450322580645164e-05, Loss: 0.6718713641166687
[2023-09-01 01:58:24,348] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 114/1998 [03:58<6:50:17, 13.07s/it]09/01/2023 01:58:24 - INFO - __main__ -   Step: 114, LR: 1.944e-05, Loss: 0.6278367638587952
[2023-09-01 01:58:38,965] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 115/1998 [04:13<7:04:04, 13.51s/it]09/01/2023 01:58:38 - INFO - __main__ -   Step: 115, LR: 1.942967741935484e-05, Loss: 0.4789139926433563
[2023-09-01 01:58:53,777] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 116/1998 [04:28<7:15:42, 13.89s/it]09/01/2023 01:58:53 - INFO - __main__ -   Step: 116, LR: 1.941935483870968e-05, Loss: 0.5690743923187256
[2023-09-01 01:59:08,326] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 117/1998 [04:42<7:21:32, 14.08s/it]09/01/2023 01:59:08 - INFO - __main__ -   Step: 117, LR: 1.9409032258064516e-05, Loss: 0.5969672203063965
[2023-09-01 01:59:22,347] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 118/1998 [04:56<7:20:42, 14.07s/it]09/01/2023 01:59:22 - INFO - __main__ -   Step: 118, LR: 1.9398709677419356e-05, Loss: 0.5736647248268127
[2023-09-01 01:59:35,128] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 119/1998 [05:09<7:08:32, 13.68s/it]09/01/2023 01:59:35 - INFO - __main__ -   Step: 119, LR: 1.9388387096774195e-05, Loss: 0.6389837265014648
[2023-09-01 01:59:49,121] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 120/1998 [05:23<7:11:11, 13.78s/it]09/01/2023 01:59:49 - INFO - __main__ -   Step: 120, LR: 1.9378064516129035e-05, Loss: 0.6663645505905151
[2023-09-01 02:00:04,048] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 121/1998 [05:38<7:21:42, 14.12s/it]09/01/2023 02:00:04 - INFO - __main__ -   Step: 121, LR: 1.936774193548387e-05, Loss: 0.616396963596344
[2023-09-01 02:00:17,992] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 122/1998 [05:52<7:19:49, 14.07s/it]09/01/2023 02:00:17 - INFO - __main__ -   Step: 122, LR: 1.935741935483871e-05, Loss: 0.5325164794921875
[2023-09-01 02:00:32,211] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 123/1998 [06:06<7:21:01, 14.11s/it]09/01/2023 02:00:32 - INFO - __main__ -   Step: 123, LR: 1.934709677419355e-05, Loss: 0.5929579734802246
[2023-09-01 02:00:47,089] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▌         | 124/1998 [06:21<7:27:56, 14.34s/it]09/01/2023 02:00:47 - INFO - __main__ -   Step: 124, LR: 1.933677419354839e-05, Loss: 0.5904140472412109
[2023-09-01 02:00:59,559] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 125/1998 [06:34<7:10:11, 13.78s/it]09/01/2023 02:00:59 - INFO - __main__ -   Step: 125, LR: 1.9326451612903227e-05, Loss: 0.6848138570785522
[2023-09-01 02:01:12,890] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 126/1998 [06:47<7:05:45, 13.65s/it]09/01/2023 02:01:12 - INFO - __main__ -   Step: 126, LR: 1.9316129032258066e-05, Loss: 0.6741056442260742
[2023-09-01 02:01:27,077] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 127/1998 [07:01<7:10:35, 13.81s/it]09/01/2023 02:01:27 - INFO - __main__ -   Step: 127, LR: 1.9305806451612906e-05, Loss: 0.6662157773971558
[2023-09-01 02:01:41,966] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 128/1998 [07:16<7:20:27, 14.13s/it]09/01/2023 02:01:41 - INFO - __main__ -   Step: 128, LR: 1.9295483870967742e-05, Loss: 0.6023745536804199
[2023-09-01 02:01:55,329] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  6%|▋         | 129/1998 [07:29<7:13:02, 13.90s/it]09/01/2023 02:01:55 - INFO - __main__ -   Step: 129, LR: 1.9285161290322582e-05, Loss: 0.6426050662994385
[2023-09-01 02:02:10,163] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 130/1998 [07:44<7:21:30, 14.18s/it]09/01/2023 02:02:10 - INFO - __main__ -   Step: 130, LR: 1.927483870967742e-05, Loss: 0.5674643516540527
[2023-09-01 02:02:26,028] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 131/1998 [08:00<7:36:59, 14.69s/it]09/01/2023 02:02:26 - INFO - __main__ -   Step: 131, LR: 1.926451612903226e-05, Loss: 0.6117590665817261
[2023-09-01 02:02:41,899] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 132/1998 [08:16<7:47:47, 15.04s/it]09/01/2023 02:02:41 - INFO - __main__ -   Step: 132, LR: 1.9254193548387098e-05, Loss: 0.6682949066162109
[2023-09-01 02:02:58,121] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 133/1998 [08:32<7:58:33, 15.40s/it]09/01/2023 02:02:58 - INFO - __main__ -   Step: 133, LR: 1.9243870967741937e-05, Loss: 0.5780549049377441
[2023-09-01 02:03:13,159] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 134/1998 [08:47<7:54:57, 15.29s/it]09/01/2023 02:03:13 - INFO - __main__ -   Step: 134, LR: 1.9233548387096777e-05, Loss: 0.5804689526557922
[2023-09-01 02:03:27,453] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 135/1998 [09:01<7:45:26, 14.99s/it]09/01/2023 02:03:27 - INFO - __main__ -   Step: 135, LR: 1.9223225806451617e-05, Loss: 0.6052811145782471
[2023-09-01 02:03:41,692] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 136/1998 [09:16<7:38:11, 14.76s/it]09/01/2023 02:03:41 - INFO - __main__ -   Step: 136, LR: 1.9212903225806453e-05, Loss: 0.5986480712890625
[2023-09-01 02:03:56,056] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 137/1998 [09:30<7:34:13, 14.64s/it]09/01/2023 02:03:56 - INFO - __main__ -   Step: 137, LR: 1.9202580645161293e-05, Loss: 0.5450231432914734
[2023-09-01 02:04:09,210] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 138/1998 [09:43<7:20:07, 14.20s/it]09/01/2023 02:04:09 - INFO - __main__ -   Step: 138, LR: 1.9192258064516132e-05, Loss: 0.6609907150268555
[2023-09-01 02:04:22,382] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 139/1998 [09:56<7:10:21, 13.89s/it]09/01/2023 02:04:22 - INFO - __main__ -   Step: 139, LR: 1.9181935483870972e-05, Loss: 0.6317131519317627
[2023-09-01 02:04:35,223] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 140/1998 [10:09<7:00:22, 13.58s/it]09/01/2023 02:04:35 - INFO - __main__ -   Step: 140, LR: 1.9171612903225808e-05, Loss: 0.5904395580291748
[2023-09-01 02:04:49,612] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 141/1998 [10:24<7:07:42, 13.82s/it]09/01/2023 02:04:49 - INFO - __main__ -   Step: 141, LR: 1.9161290322580645e-05, Loss: 0.6213124990463257
[2023-09-01 02:05:05,109] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 142/1998 [10:39<7:23:02, 14.32s/it]09/01/2023 02:05:05 - INFO - __main__ -   Step: 142, LR: 1.9150967741935484e-05, Loss: 0.6305603981018066
[2023-09-01 02:05:19,087] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 143/1998 [10:53<7:19:36, 14.22s/it]09/01/2023 02:05:19 - INFO - __main__ -   Step: 143, LR: 1.9140645161290324e-05, Loss: 0.5483312606811523
[2023-09-01 02:05:33,008] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 144/1998 [11:07<7:16:36, 14.13s/it]09/01/2023 02:05:33 - INFO - __main__ -   Step: 144, LR: 1.9130322580645164e-05, Loss: 0.5890498161315918
[2023-09-01 02:05:46,961] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 145/1998 [11:21<7:14:44, 14.08s/it]09/01/2023 02:05:46 - INFO - __main__ -   Step: 145, LR: 1.912e-05, Loss: 0.6764794588088989
[2023-09-01 02:06:00,386] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 146/1998 [11:34<7:08:28, 13.88s/it]09/01/2023 02:06:00 - INFO - __main__ -   Step: 146, LR: 1.910967741935484e-05, Loss: 0.5316465497016907
[2023-09-01 02:06:14,297] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 147/1998 [11:48<7:08:30, 13.89s/it]09/01/2023 02:06:14 - INFO - __main__ -   Step: 147, LR: 1.909935483870968e-05, Loss: 0.6088160872459412
[2023-09-01 02:06:28,825] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 148/1998 [12:03<7:14:10, 14.08s/it]09/01/2023 02:06:28 - INFO - __main__ -   Step: 148, LR: 1.9089032258064516e-05, Loss: 0.5979987978935242
[2023-09-01 02:06:43,285] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  7%|▋         | 149/1998 [12:17<7:17:26, 14.20s/it]09/01/2023 02:06:43 - INFO - __main__ -   Step: 149, LR: 1.9078709677419355e-05, Loss: 0.5842969417572021
[2023-09-01 02:06:58,139] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 150/1998 [12:32<7:23:17, 14.39s/it]09/01/2023 02:06:58 - INFO - __main__ -   Step: 150, LR: 1.9068387096774195e-05, Loss: 0.6641178727149963
[2023-09-01 02:07:12,574] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 151/1998 [12:47<7:23:26, 14.41s/it]09/01/2023 02:07:12 - INFO - __main__ -   Step: 151, LR: 1.9058064516129035e-05, Loss: 0.5755032300949097
[2023-09-01 02:07:25,534] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 152/1998 [12:59<7:09:51, 13.97s/it]09/01/2023 02:07:25 - INFO - __main__ -   Step: 152, LR: 1.904774193548387e-05, Loss: 0.5795122385025024
[2023-09-01 02:07:38,936] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 153/1998 [13:13<7:04:22, 13.80s/it]09/01/2023 02:07:38 - INFO - __main__ -   Step: 153, LR: 1.903741935483871e-05, Loss: 0.6160800457000732
[2023-09-01 02:07:54,169] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 154/1998 [13:28<7:17:21, 14.23s/it]09/01/2023 02:07:54 - INFO - __main__ -   Step: 154, LR: 1.902709677419355e-05, Loss: 0.5770167112350464
[2023-09-01 02:08:07,909] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 155/1998 [13:42<7:12:35, 14.08s/it]09/01/2023 02:08:07 - INFO - __main__ -   Step: 155, LR: 1.901677419354839e-05, Loss: 0.5166767835617065
[2023-09-01 02:08:22,383] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 156/1998 [13:56<7:15:57, 14.20s/it]09/01/2023 02:08:22 - INFO - __main__ -   Step: 156, LR: 1.9006451612903226e-05, Loss: 0.5986648797988892
[2023-09-01 02:08:36,081] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 157/1998 [14:10<7:11:05, 14.05s/it]09/01/2023 02:08:36 - INFO - __main__ -   Step: 157, LR: 1.8996129032258066e-05, Loss: 0.5755379796028137
[2023-09-01 02:08:49,823] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 158/1998 [14:24<7:08:01, 13.96s/it]09/01/2023 02:08:49 - INFO - __main__ -   Step: 158, LR: 1.8985806451612906e-05, Loss: 0.5944708585739136
[2023-09-01 02:09:04,154] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 159/1998 [14:38<7:11:13, 14.07s/it]09/01/2023 02:09:04 - INFO - __main__ -   Step: 159, LR: 1.8975483870967742e-05, Loss: 0.6326799392700195
[2023-09-01 02:09:18,438] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 160/1998 [14:52<7:12:57, 14.13s/it]09/01/2023 02:09:18 - INFO - __main__ -   Step: 160, LR: 1.896516129032258e-05, Loss: 0.5722967386245728
[2023-09-01 02:09:35,092] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 161/1998 [15:09<7:35:52, 14.89s/it]09/01/2023 02:09:35 - INFO - __main__ -   Step: 161, LR: 1.895483870967742e-05, Loss: 0.5875139236450195
[2023-09-01 02:09:49,805] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 162/1998 [15:24<7:34:00, 14.84s/it]09/01/2023 02:09:49 - INFO - __main__ -   Step: 162, LR: 1.894451612903226e-05, Loss: 0.6161251664161682
[2023-09-01 02:10:02,917] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 163/1998 [15:37<7:17:56, 14.32s/it]09/01/2023 02:10:02 - INFO - __main__ -   Step: 163, LR: 1.8934193548387097e-05, Loss: 0.6057667136192322
[2023-09-01 02:10:18,041] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 164/1998 [15:52<7:25:04, 14.56s/it]09/01/2023 02:10:18 - INFO - __main__ -   Step: 164, LR: 1.8923870967741937e-05, Loss: 0.5879476070404053
[2023-09-01 02:10:33,695] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 165/1998 [16:08<7:34:50, 14.89s/it]09/01/2023 02:10:33 - INFO - __main__ -   Step: 165, LR: 1.8913548387096777e-05, Loss: 0.5149494409561157
[2023-09-01 02:10:48,316] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 166/1998 [16:22<7:32:08, 14.81s/it]09/01/2023 02:10:48 - INFO - __main__ -   Step: 166, LR: 1.8903225806451616e-05, Loss: 0.6351875066757202
[2023-09-01 02:11:02,948] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 167/1998 [16:37<7:30:17, 14.76s/it]09/01/2023 02:11:02 - INFO - __main__ -   Step: 167, LR: 1.8892903225806453e-05, Loss: 0.5979506373405457
[2023-09-01 02:11:17,393] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 168/1998 [16:51<7:27:12, 14.66s/it]09/01/2023 02:11:17 - INFO - __main__ -   Step: 168, LR: 1.8882580645161292e-05, Loss: 0.7172853946685791
[2023-09-01 02:11:30,513] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  8%|▊         | 169/1998 [17:04<7:12:50, 14.20s/it]09/01/2023 02:11:30 - INFO - __main__ -   Step: 169, LR: 1.8872258064516132e-05, Loss: 0.656436562538147
[2023-09-01 02:11:45,127] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 170/1998 [17:19<7:16:24, 14.32s/it]09/01/2023 02:11:45 - INFO - __main__ -   Step: 170, LR: 1.886193548387097e-05, Loss: 0.6333712339401245
[2023-09-01 02:11:58,950] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 171/1998 [17:33<7:11:35, 14.17s/it]09/01/2023 02:11:58 - INFO - __main__ -   Step: 171, LR: 1.8851612903225808e-05, Loss: 0.6582046747207642
[2023-09-01 02:12:13,157] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 172/1998 [17:47<7:11:39, 14.18s/it]09/01/2023 02:12:13 - INFO - __main__ -   Step: 172, LR: 1.8841290322580648e-05, Loss: 0.7166932821273804
[2023-09-01 02:12:28,625] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 173/1998 [18:03<7:23:08, 14.57s/it]09/01/2023 02:12:28 - INFO - __main__ -   Step: 173, LR: 1.8830967741935487e-05, Loss: 0.6293590664863586
[2023-09-01 02:12:42,562] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▊         | 174/1998 [18:17<7:17:07, 14.38s/it]09/01/2023 02:12:42 - INFO - __main__ -   Step: 174, LR: 1.8820645161290324e-05, Loss: 0.6476364135742188
[2023-09-01 02:12:56,452] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 175/1998 [18:30<7:12:25, 14.23s/it]09/01/2023 02:12:56 - INFO - __main__ -   Step: 175, LR: 1.8810322580645163e-05, Loss: 0.5714582800865173
[2023-09-01 02:13:10,246] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 176/1998 [18:44<7:08:11, 14.10s/it]09/01/2023 02:13:10 - INFO - __main__ -   Step: 176, LR: 1.88e-05, Loss: 0.6004180908203125
[2023-09-01 02:13:24,216] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 177/1998 [18:58<7:06:46, 14.06s/it]09/01/2023 02:13:24 - INFO - __main__ -   Step: 177, LR: 1.878967741935484e-05, Loss: 0.6092618107795715
[2023-09-01 02:13:37,256] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 178/1998 [19:11<6:57:14, 13.76s/it]09/01/2023 02:13:37 - INFO - __main__ -   Step: 178, LR: 1.877935483870968e-05, Loss: 0.572701632976532
[2023-09-01 02:13:52,023] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 179/1998 [19:26<7:06:13, 14.06s/it]09/01/2023 02:13:52 - INFO - __main__ -   Step: 179, LR: 1.8769032258064515e-05, Loss: 0.6059666872024536
[2023-09-01 02:14:06,826] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 180/1998 [19:41<7:12:44, 14.28s/it]09/01/2023 02:14:06 - INFO - __main__ -   Step: 180, LR: 1.8758709677419355e-05, Loss: 0.5696810483932495
[2023-09-01 02:14:21,404] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 181/1998 [19:55<7:15:11, 14.37s/it]09/01/2023 02:14:21 - INFO - __main__ -   Step: 181, LR: 1.8748387096774195e-05, Loss: 0.6173280477523804
[2023-09-01 02:14:35,508] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 182/1998 [20:09<7:12:31, 14.29s/it]09/01/2023 02:14:35 - INFO - __main__ -   Step: 182, LR: 1.8738064516129034e-05, Loss: 0.5520591139793396
[2023-09-01 02:14:48,630] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 183/1998 [20:23<7:01:41, 13.94s/it]09/01/2023 02:14:48 - INFO - __main__ -   Step: 183, LR: 1.872774193548387e-05, Loss: 0.5470136404037476
[2023-09-01 02:15:02,536] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 184/1998 [20:36<7:01:09, 13.93s/it]09/01/2023 02:15:02 - INFO - __main__ -   Step: 184, LR: 1.871741935483871e-05, Loss: 0.652498722076416
[2023-09-01 02:15:16,798] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 185/1998 [20:51<7:03:55, 14.03s/it]09/01/2023 02:15:16 - INFO - __main__ -   Step: 185, LR: 1.870709677419355e-05, Loss: 0.5923902988433838
[2023-09-01 02:15:31,443] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 186/1998 [21:05<7:09:16, 14.21s/it]09/01/2023 02:15:31 - INFO - __main__ -   Step: 186, LR: 1.869677419354839e-05, Loss: 0.6128280162811279
[2023-09-01 02:15:45,355] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 187/1998 [21:19<7:06:17, 14.12s/it]09/01/2023 02:15:45 - INFO - __main__ -   Step: 187, LR: 1.8686451612903226e-05, Loss: 0.5728586316108704
[2023-09-01 02:15:58,502] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 188/1998 [21:32<6:57:13, 13.83s/it]09/01/2023 02:15:58 - INFO - __main__ -   Step: 188, LR: 1.8676129032258066e-05, Loss: 0.5648002624511719
[2023-09-01 02:16:11,296] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  9%|▉         | 189/1998 [21:45<6:47:36, 13.52s/it]09/01/2023 02:16:11 - INFO - __main__ -   Step: 189, LR: 1.8665806451612905e-05, Loss: 0.5894246697425842
[2023-09-01 02:16:25,150] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 190/1998 [21:59<6:50:25, 13.62s/it]09/01/2023 02:16:25 - INFO - __main__ -   Step: 190, LR: 1.865548387096774e-05, Loss: 0.6253117918968201
[2023-09-01 02:16:38,901] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 191/1998 [22:13<6:51:22, 13.66s/it]09/01/2023 02:16:38 - INFO - __main__ -   Step: 191, LR: 1.864516129032258e-05, Loss: 0.6401410102844238
[2023-09-01 02:16:52,252] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 192/1998 [22:26<6:48:21, 13.57s/it]09/01/2023 02:16:52 - INFO - __main__ -   Step: 192, LR: 1.863483870967742e-05, Loss: 0.5882347226142883
[2023-09-01 02:17:05,655] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 193/1998 [22:40<6:46:39, 13.52s/it]09/01/2023 02:17:05 - INFO - __main__ -   Step: 193, LR: 1.862451612903226e-05, Loss: 0.5839603543281555
[2023-09-01 02:17:20,357] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 194/1998 [22:54<6:57:06, 13.87s/it]09/01/2023 02:17:20 - INFO - __main__ -   Step: 194, LR: 1.8614193548387097e-05, Loss: 0.5466775298118591
[2023-09-01 02:17:34,145] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 195/1998 [23:08<6:56:07, 13.85s/it]09/01/2023 02:17:34 - INFO - __main__ -   Step: 195, LR: 1.8603870967741937e-05, Loss: 0.609790027141571
[2023-09-01 02:17:48,829] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 196/1998 [23:23<7:03:25, 14.10s/it]09/01/2023 02:17:48 - INFO - __main__ -   Step: 196, LR: 1.8593548387096776e-05, Loss: 0.5947757959365845
[2023-09-01 02:18:02,248] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 197/1998 [23:36<6:57:03, 13.89s/it]09/01/2023 02:18:02 - INFO - __main__ -   Step: 197, LR: 1.8583225806451616e-05, Loss: 0.6353620886802673
[2023-09-01 02:18:16,766] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 198/1998 [23:51<7:02:27, 14.08s/it]09/01/2023 02:18:16 - INFO - __main__ -   Step: 198, LR: 1.8572903225806452e-05, Loss: 0.5538274049758911
[2023-09-01 02:18:30,984] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|▉         | 199/1998 [24:05<7:03:26, 14.12s/it]09/01/2023 02:18:30 - INFO - __main__ -   Step: 199, LR: 1.8562580645161292e-05, Loss: 0.5695700645446777
[2023-09-01 02:18:44,402] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 200/1998 [24:18<6:56:52, 13.91s/it]09/01/2023 02:18:44 - INFO - __main__ -   Step: 200, LR: 1.855225806451613e-05, Loss: 0.5618059635162354
09/01/2023 02:18:44 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200
09/01/2023 02:18:44 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 02:18:44,412] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 02:18:44,419] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 02:18:44,419] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 02:18:44,419] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 02:18:44,419] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 02:18:44,420] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 02:18:44,420] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 02:18:44,433] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 02:18:44,434] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 02:18:44,434] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 02:18:44,435] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 02:18:44,436] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 02:18:44,436] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 02:18:44,436] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 02:18:44,436] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 02:19:37,764] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 02:19:37,764] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 02:19:39,451] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 02:19:39,451] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 02:19:39,839] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 02:19:39,839] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 02:19:41,912] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 02:19:41,912] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 02:19:41,917] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 02:19:41,917] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 02:19:41,917] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 02:19:41,918] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 02:19:41 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/pytorch_model
09/01/2023 02:19:41 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/scheduler.bin
09/01/2023 02:19:41 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_200/random_states_0.pkl
09/01/2023 02:19:41 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:42,  5.33it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:58,  3.82it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:01<01:04,  3.45it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:06,  3.37it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<01:02,  3.55it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:05,  3.36it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:08,  3.22it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:04,  3.40it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<01:00,  3.62it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:03<00:57,  3.79it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.86it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  3.99it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.10it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:50,  4.18it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.24it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.26it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.28it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.24it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.03it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.91it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.02it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.10it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.16it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.20it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.01it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.63it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.82it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.65it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.88it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  4.00it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.85it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  4.01it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.89it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:09<00:52,  3.70it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.80it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.95it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.04it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:10<00:49,  3.78it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.90it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.01it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.10it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:11<00:45,  4.10it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.82it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.52it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:48,  3.72it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.58it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.46it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.49it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:51,  3.43it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.56it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.46it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.41it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:15<00:45,  3.77it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.61it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.80it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.87it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:16<00:42,  3.91it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.02it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.05it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:39,  4.11it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:17<00:39,  4.15it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.18it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.17it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.21it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.15it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.20it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  4.00it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.86it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:19<00:40,  3.80it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.05it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.12it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:20<00:39,  3.83it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.96it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.61it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.71it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.85it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:37,  3.91it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.96it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.06it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.93it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.96it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:35,  3.97it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.06it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.14it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.10it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:24<00:32,  4.15it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.17it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.00it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.10it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.84it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.87it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.96it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.98it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.08it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.08it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.13it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:27<00:29,  4.17it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:28,  4.21it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.17it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:28<00:30,  3.94it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.02it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.12it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.76it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:28,  3.94it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.04it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.90it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:30<00:27,  4.03it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:26,  4.08it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.08it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.17it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.20it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:24,  4.26it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.28it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.30it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.33it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.31it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.34it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.88it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:33<00:27,  3.59it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.77it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.91it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.94it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.09it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:23,  3.92it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.06it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.94it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.08it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.14it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.22it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.26it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.33it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:19,  4.33it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.32it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.35it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:18,  4.39it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:37<00:18,  4.38it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.41it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.42it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.41it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.40it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.43it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.38it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.40it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.37it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.29it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.98it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:16,  4.12it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.19it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.27it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.29it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.34it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:14,  4.35it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.39it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.42it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:13,  4.43it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.44it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.47it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.46it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.18it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.27it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.28it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.34it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.33it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.12it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.84it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.98it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.08it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.18it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:11,  4.00it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.14it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.23it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.29it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.32it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:09,  4.34it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.38it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.16it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.13it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.23it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.29it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.33it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.12it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.20it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:07,  4.28it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.18it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.25it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.31it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.34it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.36it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.37it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.97it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.08it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.19it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.28it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.35it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.39it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.42it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.42it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.43it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.42it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.42it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.40it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.16it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.20it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.23it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.25it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.28it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.33it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.37it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.28it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.33it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.38it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.38it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.41it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.41it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.43it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.45it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.45it/s][A09/01/2023 02:20:38 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 02:20:38 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 02:20:38 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 02:20:38 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 02:20:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 02:20:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 02:20:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 02:20:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 02:20:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 02:20:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 02:20:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 02:20:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 02:20:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.97it/s]
09/01/2023 02:20:39 - INFO - __main__ -   Step: 200, Validation Metrics: {'accuracy': 0.8251087862234978, 'f1_micro': 0.8251087862234978, 'f1_macro': 0.4715840709574624, 'f1_weighted': 0.7887503785360765, 'f1_1': 0.8987334891558406, 'f1_-1': 0.5005866249511146, 'f1_0': 0.015432098765432098, 'precision_micro': 0.8251087862234978, 'precision_macro': 0.6816177416632013, 'precision_weighted': 0.797791150962961, 'precision_1': 0.8434853586368738, 'precision_-1': 0.6458123107971746, 'precision_0': 0.5555555555555556, 'recall_micro': 0.8251087862234978, 'recall_macro': 0.45941188570499575, 'recall_weighted': 0.8251087862234978, 'recall_1': 0.9617263843648208, 'recall_-1': 0.4086845466155811, 'recall_0': 0.00782472613458529}
[2023-09-01 02:20:52,441] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 201/1998 [26:26<24:02:04, 48.15s/it]09/01/2023 02:20:52 - INFO - __main__ -   Step: 201, LR: 1.854193548387097e-05, Loss: 0.6534301042556763
[2023-09-01 02:21:07,327] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 202/1998 [26:41<19:02:34, 38.17s/it]09/01/2023 02:21:07 - INFO - __main__ -   Step: 202, LR: 1.8531612903225808e-05, Loss: 0.5684582591056824
[2023-09-01 02:21:22,303] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 203/1998 [26:56<15:33:45, 31.21s/it]09/01/2023 02:21:22 - INFO - __main__ -   Step: 203, LR: 1.8521290322580647e-05, Loss: 0.6178146600723267
[2023-09-01 02:21:36,897] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 204/1998 [27:11<13:04:10, 26.23s/it]09/01/2023 02:21:36 - INFO - __main__ -   Step: 204, LR: 1.8510967741935487e-05, Loss: 0.6114015579223633
[2023-09-01 02:21:51,699] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 205/1998 [27:26<11:21:19, 22.80s/it]09/01/2023 02:21:51 - INFO - __main__ -   Step: 205, LR: 1.8500645161290323e-05, Loss: 0.5712320804595947
[2023-09-01 02:22:05,350] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 206/1998 [27:39<9:58:58, 20.05s/it] 09/01/2023 02:22:05 - INFO - __main__ -   Step: 206, LR: 1.8490322580645163e-05, Loss: 0.6124343276023865
[2023-09-01 02:22:20,693] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 207/1998 [27:55<9:16:26, 18.64s/it]09/01/2023 02:22:20 - INFO - __main__ -   Step: 207, LR: 1.8480000000000003e-05, Loss: 0.6257194876670837
[2023-09-01 02:22:35,015] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 208/1998 [28:09<8:37:28, 17.35s/it]09/01/2023 02:22:35 - INFO - __main__ -   Step: 208, LR: 1.8469677419354842e-05, Loss: 0.5332496166229248
[2023-09-01 02:22:49,093] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 10%|█         | 209/1998 [28:23<8:07:57, 16.37s/it]09/01/2023 02:22:49 - INFO - __main__ -   Step: 209, LR: 1.845935483870968e-05, Loss: 0.5334796905517578
[2023-09-01 02:23:01,864] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 210/1998 [28:36<7:35:32, 15.29s/it]09/01/2023 02:23:01 - INFO - __main__ -   Step: 210, LR: 1.8449032258064518e-05, Loss: 0.6486542224884033
[2023-09-01 02:23:16,441] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 211/1998 [28:50<7:28:57, 15.07s/it]09/01/2023 02:23:16 - INFO - __main__ -   Step: 211, LR: 1.8438709677419355e-05, Loss: 0.6687984466552734
[2023-09-01 02:23:30,294] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 212/1998 [29:04<7:17:48, 14.71s/it]09/01/2023 02:23:30 - INFO - __main__ -   Step: 212, LR: 1.8428387096774194e-05, Loss: 0.6664983630180359
[2023-09-01 02:23:43,931] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 213/1998 [29:18<7:07:59, 14.39s/it]09/01/2023 02:23:43 - INFO - __main__ -   Step: 213, LR: 1.8418064516129034e-05, Loss: 0.5370945930480957
[2023-09-01 02:23:59,593] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 214/1998 [29:34<7:19:08, 14.77s/it]09/01/2023 02:23:59 - INFO - __main__ -   Step: 214, LR: 1.840774193548387e-05, Loss: 0.5597984194755554
[2023-09-01 02:24:13,333] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 215/1998 [29:47<7:09:42, 14.46s/it]09/01/2023 02:24:13 - INFO - __main__ -   Step: 215, LR: 1.839741935483871e-05, Loss: 0.6065884828567505
[2023-09-01 02:24:27,013] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 216/1998 [30:01<7:02:30, 14.23s/it]09/01/2023 02:24:27 - INFO - __main__ -   Step: 216, LR: 1.838709677419355e-05, Loss: 0.6102942228317261
[2023-09-01 02:24:40,845] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 217/1998 [30:15<6:58:46, 14.11s/it]09/01/2023 02:24:40 - INFO - __main__ -   Step: 217, LR: 1.837677419354839e-05, Loss: 0.5597833395004272
[2023-09-01 02:24:55,769] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 218/1998 [30:30<7:05:48, 14.35s/it]09/01/2023 02:24:55 - INFO - __main__ -   Step: 218, LR: 1.8366451612903226e-05, Loss: 0.518513560295105
[2023-09-01 02:25:10,028] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 219/1998 [30:44<7:04:43, 14.32s/it]09/01/2023 02:25:10 - INFO - __main__ -   Step: 219, LR: 1.8356129032258065e-05, Loss: 0.5817071795463562
[2023-09-01 02:25:24,955] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 220/1998 [30:59<7:09:50, 14.51s/it]09/01/2023 02:25:24 - INFO - __main__ -   Step: 220, LR: 1.8345806451612905e-05, Loss: 0.5208226442337036
[2023-09-01 02:25:38,979] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 221/1998 [31:13<7:05:19, 14.36s/it]09/01/2023 02:25:38 - INFO - __main__ -   Step: 221, LR: 1.8335483870967745e-05, Loss: 0.6353492140769958
[2023-09-01 02:25:52,221] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 222/1998 [31:26<6:55:08, 14.03s/it]09/01/2023 02:25:52 - INFO - __main__ -   Step: 222, LR: 1.832516129032258e-05, Loss: 0.6125760674476624
[2023-09-01 02:26:07,254] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 223/1998 [31:41<7:03:51, 14.33s/it]09/01/2023 02:26:07 - INFO - __main__ -   Step: 223, LR: 1.831483870967742e-05, Loss: 0.5768208503723145
[2023-09-01 02:26:21,333] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█         | 224/1998 [31:55<7:01:24, 14.25s/it]09/01/2023 02:26:21 - INFO - __main__ -   Step: 224, LR: 1.830451612903226e-05, Loss: 0.5668838024139404
[2023-09-01 02:26:34,834] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█▏        | 225/1998 [32:09<6:54:30, 14.03s/it]09/01/2023 02:26:34 - INFO - __main__ -   Step: 225, LR: 1.8294193548387097e-05, Loss: 0.6415674686431885
[2023-09-01 02:26:49,362] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█▏        | 226/1998 [32:23<6:58:42, 14.18s/it]09/01/2023 02:26:49 - INFO - __main__ -   Step: 226, LR: 1.8283870967741936e-05, Loss: 0.5800073146820068
[2023-09-01 02:27:03,324] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█▏        | 227/1998 [32:37<6:56:34, 14.11s/it]09/01/2023 02:27:03 - INFO - __main__ -   Step: 227, LR: 1.8273548387096776e-05, Loss: 0.5822373628616333
[2023-09-01 02:27:16,502] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█▏        | 228/1998 [32:50<6:48:03, 13.83s/it]09/01/2023 02:27:16 - INFO - __main__ -   Step: 228, LR: 1.8263225806451616e-05, Loss: 0.5768167972564697
[2023-09-01 02:27:30,727] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 11%|█▏        | 229/1998 [33:05<6:51:17, 13.95s/it]09/01/2023 02:27:30 - INFO - __main__ -   Step: 229, LR: 1.8252903225806452e-05, Loss: 0.5887102484703064
[2023-09-01 02:27:45,138] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 230/1998 [33:19<6:55:08, 14.09s/it]09/01/2023 02:27:45 - INFO - __main__ -   Step: 230, LR: 1.824258064516129e-05, Loss: 0.5492820739746094
[2023-09-01 02:27:59,542] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 231/1998 [33:34<6:57:41, 14.18s/it]09/01/2023 02:27:59 - INFO - __main__ -   Step: 231, LR: 1.823225806451613e-05, Loss: 0.5221771597862244
[2023-09-01 02:28:13,339] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 232/1998 [33:47<6:54:02, 14.07s/it]09/01/2023 02:28:13 - INFO - __main__ -   Step: 232, LR: 1.822193548387097e-05, Loss: 0.5784175395965576
[2023-09-01 02:28:28,010] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 233/1998 [34:02<6:59:08, 14.25s/it]09/01/2023 02:28:28 - INFO - __main__ -   Step: 233, LR: 1.8211612903225807e-05, Loss: 0.6609495878219604
[2023-09-01 02:28:42,354] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 234/1998 [34:16<6:59:44, 14.28s/it]09/01/2023 02:28:42 - INFO - __main__ -   Step: 234, LR: 1.8201290322580647e-05, Loss: 0.5101435780525208
[2023-09-01 02:28:55,728] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 235/1998 [34:30<6:51:32, 14.01s/it]09/01/2023 02:28:55 - INFO - __main__ -   Step: 235, LR: 1.8190967741935487e-05, Loss: 0.5294133424758911
[2023-09-01 02:29:10,499] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 236/1998 [34:44<6:58:02, 14.24s/it]09/01/2023 02:29:10 - INFO - __main__ -   Step: 236, LR: 1.8180645161290323e-05, Loss: 0.5758315920829773
[2023-09-01 02:29:24,420] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 237/1998 [34:58<6:55:02, 14.14s/it]09/01/2023 02:29:24 - INFO - __main__ -   Step: 237, LR: 1.8170322580645163e-05, Loss: 0.5870043039321899
[2023-09-01 02:29:38,005] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 238/1998 [35:12<6:49:54, 13.97s/it]09/01/2023 02:29:38 - INFO - __main__ -   Step: 238, LR: 1.8160000000000002e-05, Loss: 0.6590219736099243
[2023-09-01 02:29:52,978] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 239/1998 [35:27<6:58:28, 14.27s/it]09/01/2023 02:29:52 - INFO - __main__ -   Step: 239, LR: 1.8149677419354842e-05, Loss: 0.5706043243408203
[2023-09-01 02:30:06,752] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 240/1998 [35:41<6:53:49, 14.12s/it]09/01/2023 02:30:06 - INFO - __main__ -   Step: 240, LR: 1.8139354838709678e-05, Loss: 0.5914064645767212
[2023-09-01 02:30:21,713] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 241/1998 [35:56<7:00:57, 14.38s/it]09/01/2023 02:30:21 - INFO - __main__ -   Step: 241, LR: 1.8129032258064518e-05, Loss: 0.6300107836723328
[2023-09-01 02:30:36,731] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 242/1998 [36:11<7:06:21, 14.57s/it]09/01/2023 02:30:36 - INFO - __main__ -   Step: 242, LR: 1.8118709677419358e-05, Loss: 0.602404773235321
[2023-09-01 02:30:50,286] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 243/1998 [36:24<6:57:13, 14.26s/it]09/01/2023 02:30:50 - INFO - __main__ -   Step: 243, LR: 1.8108387096774197e-05, Loss: 0.5394072532653809
[2023-09-01 02:31:03,681] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 244/1998 [36:38<6:49:21, 14.00s/it]09/01/2023 02:31:03 - INFO - __main__ -   Step: 244, LR: 1.8098064516129034e-05, Loss: 0.6125186681747437
[2023-09-01 02:31:17,130] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 245/1998 [36:51<6:44:16, 13.84s/it]09/01/2023 02:31:17 - INFO - __main__ -   Step: 245, LR: 1.8087741935483873e-05, Loss: 0.6327650547027588
[2023-09-01 02:31:31,002] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 246/1998 [37:05<6:44:21, 13.85s/it]09/01/2023 02:31:31 - INFO - __main__ -   Step: 246, LR: 1.8077419354838713e-05, Loss: 0.5312453508377075
[2023-09-01 02:31:45,775] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 247/1998 [37:20<6:52:12, 14.13s/it]09/01/2023 02:31:45 - INFO - __main__ -   Step: 247, LR: 1.806709677419355e-05, Loss: 0.6478968858718872
[2023-09-01 02:31:58,865] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 248/1998 [37:33<6:42:55, 13.81s/it]09/01/2023 02:31:58 - INFO - __main__ -   Step: 248, LR: 1.805677419354839e-05, Loss: 0.606114387512207
[2023-09-01 02:32:11,635] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 12%|█▏        | 249/1998 [37:46<6:33:33, 13.50s/it]09/01/2023 02:32:11 - INFO - __main__ -   Step: 249, LR: 1.8046451612903225e-05, Loss: 0.5582238435745239
[2023-09-01 02:32:25,385] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 250/1998 [37:59<6:35:30, 13.58s/it]09/01/2023 02:32:25 - INFO - __main__ -   Step: 250, LR: 1.8036129032258065e-05, Loss: 0.5622203946113586
[2023-09-01 02:32:40,092] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 251/1998 [38:14<6:45:09, 13.92s/it]09/01/2023 02:32:40 - INFO - __main__ -   Step: 251, LR: 1.8025806451612905e-05, Loss: 0.5745174288749695
[2023-09-01 02:32:54,621] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 252/1998 [38:29<6:50:17, 14.10s/it]09/01/2023 02:32:54 - INFO - __main__ -   Step: 252, LR: 1.8015483870967744e-05, Loss: 0.5426740646362305
[2023-09-01 02:33:09,252] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 253/1998 [38:43<6:54:41, 14.26s/it]09/01/2023 02:33:09 - INFO - __main__ -   Step: 253, LR: 1.800516129032258e-05, Loss: 0.6275579929351807
[2023-09-01 02:33:23,249] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 254/1998 [38:57<6:52:10, 14.18s/it]09/01/2023 02:33:23 - INFO - __main__ -   Step: 254, LR: 1.799483870967742e-05, Loss: 0.5702049136161804
[2023-09-01 02:33:38,868] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 255/1998 [39:13<7:04:28, 14.61s/it]09/01/2023 02:33:38 - INFO - __main__ -   Step: 255, LR: 1.798451612903226e-05, Loss: 0.5643520355224609
[2023-09-01 02:33:54,839] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 256/1998 [39:29<7:16:04, 15.02s/it]09/01/2023 02:33:54 - INFO - __main__ -   Step: 256, LR: 1.7974193548387096e-05, Loss: 0.5310364961624146
[2023-09-01 02:34:09,424] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 257/1998 [39:43<7:12:02, 14.89s/it]09/01/2023 02:34:09 - INFO - __main__ -   Step: 257, LR: 1.7963870967741936e-05, Loss: 0.5541079044342041
[2023-09-01 02:34:24,733] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 258/1998 [39:59<7:15:26, 15.02s/it]09/01/2023 02:34:24 - INFO - __main__ -   Step: 258, LR: 1.7953548387096776e-05, Loss: 0.5303292274475098
[2023-09-01 02:34:38,045] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 259/1998 [40:12<7:00:22, 14.50s/it]09/01/2023 02:34:38 - INFO - __main__ -   Step: 259, LR: 1.7943225806451615e-05, Loss: 0.6171097159385681
[2023-09-01 02:34:51,607] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 260/1998 [40:26<6:51:57, 14.22s/it]09/01/2023 02:34:51 - INFO - __main__ -   Step: 260, LR: 1.793290322580645e-05, Loss: 0.5362452864646912
[2023-09-01 02:35:05,298] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 261/1998 [40:39<6:47:06, 14.06s/it]09/01/2023 02:35:05 - INFO - __main__ -   Step: 261, LR: 1.792258064516129e-05, Loss: 0.5714502930641174
[2023-09-01 02:35:19,374] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 262/1998 [40:53<6:46:59, 14.07s/it]09/01/2023 02:35:19 - INFO - __main__ -   Step: 262, LR: 1.791225806451613e-05, Loss: 0.5658018589019775
[2023-09-01 02:35:34,013] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 263/1998 [41:08<6:51:43, 14.24s/it]09/01/2023 02:35:34 - INFO - __main__ -   Step: 263, LR: 1.790193548387097e-05, Loss: 0.6173691749572754
[2023-09-01 02:35:47,347] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 264/1998 [41:21<6:43:38, 13.97s/it]09/01/2023 02:35:47 - INFO - __main__ -   Step: 264, LR: 1.7891612903225807e-05, Loss: 0.5653195381164551
[2023-09-01 02:36:01,679] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 265/1998 [41:36<6:46:34, 14.08s/it]09/01/2023 02:36:01 - INFO - __main__ -   Step: 265, LR: 1.7881290322580647e-05, Loss: 0.639416515827179
[2023-09-01 02:36:15,055] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 266/1998 [41:49<6:40:16, 13.87s/it]09/01/2023 02:36:15 - INFO - __main__ -   Step: 266, LR: 1.7870967741935486e-05, Loss: 0.6103726625442505
[2023-09-01 02:36:28,231] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 267/1998 [42:02<6:34:04, 13.66s/it]09/01/2023 02:36:28 - INFO - __main__ -   Step: 267, LR: 1.7860645161290323e-05, Loss: 0.660066545009613
[2023-09-01 02:36:42,075] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 268/1998 [42:16<6:35:26, 13.71s/it]09/01/2023 02:36:42 - INFO - __main__ -   Step: 268, LR: 1.7850322580645162e-05, Loss: 0.5844688415527344
[2023-09-01 02:36:56,471] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 13%|█▎        | 269/1998 [42:30<6:41:05, 13.92s/it]09/01/2023 02:36:56 - INFO - __main__ -   Step: 269, LR: 1.7840000000000002e-05, Loss: 0.6592729687690735
[2023-09-01 02:37:09,925] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▎        | 270/1998 [42:44<6:36:51, 13.78s/it]09/01/2023 02:37:09 - INFO - __main__ -   Step: 270, LR: 1.782967741935484e-05, Loss: 0.6148357391357422
[2023-09-01 02:37:24,064] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▎        | 271/1998 [42:58<6:39:43, 13.89s/it]09/01/2023 02:37:24 - INFO - __main__ -   Step: 271, LR: 1.7819354838709678e-05, Loss: 0.6373293399810791
[2023-09-01 02:37:37,523] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▎        | 272/1998 [43:11<6:35:47, 13.76s/it]09/01/2023 02:37:37 - INFO - __main__ -   Step: 272, LR: 1.7809032258064518e-05, Loss: 0.6067720651626587
[2023-09-01 02:37:51,233] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▎        | 273/1998 [43:25<6:35:08, 13.74s/it]09/01/2023 02:37:51 - INFO - __main__ -   Step: 273, LR: 1.7798709677419357e-05, Loss: 0.5700008869171143
[2023-09-01 02:38:04,589] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▎        | 274/1998 [43:39<6:31:34, 13.63s/it]09/01/2023 02:38:04 - INFO - __main__ -   Step: 274, LR: 1.7788387096774197e-05, Loss: 0.557091474533081
[2023-09-01 02:38:17,739] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 275/1998 [43:52<6:27:13, 13.48s/it]09/01/2023 02:38:17 - INFO - __main__ -   Step: 275, LR: 1.7778064516129033e-05, Loss: 0.5872030258178711
[2023-09-01 02:38:32,189] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 276/1998 [44:06<6:35:19, 13.77s/it]09/01/2023 02:38:32 - INFO - __main__ -   Step: 276, LR: 1.7767741935483873e-05, Loss: 0.5715231895446777
[2023-09-01 02:38:45,570] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 277/1998 [44:20<6:31:42, 13.66s/it]09/01/2023 02:38:45 - INFO - __main__ -   Step: 277, LR: 1.7757419354838713e-05, Loss: 0.6499401330947876
[2023-09-01 02:38:59,417] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 278/1998 [44:33<6:33:07, 13.71s/it]09/01/2023 02:38:59 - INFO - __main__ -   Step: 278, LR: 1.7747096774193552e-05, Loss: 0.6085443496704102
[2023-09-01 02:39:13,405] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 279/1998 [44:47<6:35:14, 13.80s/it]09/01/2023 02:39:13 - INFO - __main__ -   Step: 279, LR: 1.773677419354839e-05, Loss: 0.5244945287704468
[2023-09-01 02:39:26,629] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 280/1998 [45:01<6:30:06, 13.62s/it]09/01/2023 02:39:26 - INFO - __main__ -   Step: 280, LR: 1.772645161290323e-05, Loss: 0.5719485282897949
[2023-09-01 02:39:39,901] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 281/1998 [45:14<6:26:51, 13.52s/it]09/01/2023 02:39:39 - INFO - __main__ -   Step: 281, LR: 1.7716129032258068e-05, Loss: 0.6102485060691833
[2023-09-01 02:39:53,726] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 282/1998 [45:28<6:29:15, 13.61s/it]09/01/2023 02:39:53 - INFO - __main__ -   Step: 282, LR: 1.7705806451612904e-05, Loss: 0.5493563413619995
[2023-09-01 02:40:08,078] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 283/1998 [45:42<6:35:23, 13.83s/it]09/01/2023 02:40:08 - INFO - __main__ -   Step: 283, LR: 1.7695483870967744e-05, Loss: 0.6388415694236755
[2023-09-01 02:40:21,523] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 284/1998 [45:55<6:31:50, 13.72s/it]09/01/2023 02:40:21 - INFO - __main__ -   Step: 284, LR: 1.768516129032258e-05, Loss: 0.5458155870437622
[2023-09-01 02:40:35,639] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 285/1998 [46:10<6:35:01, 13.84s/it]09/01/2023 02:40:35 - INFO - __main__ -   Step: 285, LR: 1.767483870967742e-05, Loss: 0.5080010294914246
[2023-09-01 02:40:49,783] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 286/1998 [46:24<6:37:25, 13.93s/it]09/01/2023 02:40:49 - INFO - __main__ -   Step: 286, LR: 1.766451612903226e-05, Loss: 0.5945427417755127
[2023-09-01 02:41:03,705] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 287/1998 [46:38<6:37:08, 13.93s/it]09/01/2023 02:41:03 - INFO - __main__ -   Step: 287, LR: 1.7654193548387096e-05, Loss: 0.6979033946990967
[2023-09-01 02:41:16,754] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 288/1998 [46:51<6:29:24, 13.66s/it]09/01/2023 02:41:16 - INFO - __main__ -   Step: 288, LR: 1.7643870967741936e-05, Loss: 0.5735654830932617
[2023-09-01 02:41:30,933] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 14%|█▍        | 289/1998 [47:05<6:33:35, 13.82s/it]09/01/2023 02:41:30 - INFO - __main__ -   Step: 289, LR: 1.7633548387096775e-05, Loss: 0.5336116552352905
[2023-09-01 02:41:45,311] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 290/1998 [47:19<6:38:08, 13.99s/it]09/01/2023 02:41:45 - INFO - __main__ -   Step: 290, LR: 1.7623225806451615e-05, Loss: 0.591905951499939
[2023-09-01 02:41:59,411] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 291/1998 [47:33<6:38:52, 14.02s/it]09/01/2023 02:41:59 - INFO - __main__ -   Step: 291, LR: 1.761290322580645e-05, Loss: 0.6279662251472473
[2023-09-01 02:42:13,282] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 292/1998 [47:47<6:37:22, 13.98s/it]09/01/2023 02:42:13 - INFO - __main__ -   Step: 292, LR: 1.760258064516129e-05, Loss: 0.5836533904075623
[2023-09-01 02:42:27,278] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 293/1998 [48:01<6:37:18, 13.98s/it]09/01/2023 02:42:27 - INFO - __main__ -   Step: 293, LR: 1.759225806451613e-05, Loss: 0.5867531895637512
[2023-09-01 02:42:41,634] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 294/1998 [48:16<6:40:16, 14.09s/it]09/01/2023 02:42:41 - INFO - __main__ -   Step: 294, LR: 1.758193548387097e-05, Loss: 0.5968866348266602
[2023-09-01 02:42:56,984] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 295/1998 [48:31<6:50:43, 14.47s/it]09/01/2023 02:42:56 - INFO - __main__ -   Step: 295, LR: 1.7571612903225807e-05, Loss: 0.5803312063217163
[2023-09-01 02:43:13,203] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 296/1998 [48:47<7:05:22, 15.00s/it]09/01/2023 02:43:13 - INFO - __main__ -   Step: 296, LR: 1.7561290322580646e-05, Loss: 0.5391976833343506
[2023-09-01 02:43:26,481] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 297/1998 [49:00<6:50:30, 14.48s/it]09/01/2023 02:43:26 - INFO - __main__ -   Step: 297, LR: 1.7550967741935486e-05, Loss: 0.5750553607940674
[2023-09-01 02:43:40,911] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 298/1998 [49:15<6:49:50, 14.47s/it]09/01/2023 02:43:40 - INFO - __main__ -   Step: 298, LR: 1.7540645161290322e-05, Loss: 0.538450300693512
[2023-09-01 02:43:56,037] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▍        | 299/1998 [49:30<6:55:13, 14.66s/it]09/01/2023 02:43:56 - INFO - __main__ -   Step: 299, LR: 1.7530322580645162e-05, Loss: 0.5468454957008362
[2023-09-01 02:44:09,389] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 300/1998 [49:43<6:43:50, 14.27s/it]09/01/2023 02:44:09 - INFO - __main__ -   Step: 300, LR: 1.752e-05, Loss: 0.5944991111755371
09/01/2023 02:44:09 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300
09/01/2023 02:44:09 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 02:44:09,399] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 02:44:09,405] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 02:44:09,406] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 02:44:09,406] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 02:44:09,406] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 02:44:09,407] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 02:44:09,407] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 02:44:09,420] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 02:44:09,420] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 02:44:09,420] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 02:44:09,422] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 02:44:09,423] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 02:44:09,423] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 02:44:09,423] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 02:44:09,423] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 02:45:03,305] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 02:45:03,306] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 02:45:05,444] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 02:45:05,445] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 02:45:06,006] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 02:45:06,007] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 02:45:08,968] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 02:45:08,968] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 02:45:08,972] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 02:45:08,972] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 02:45:08,973] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 02:45:08,973] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 02:45:08 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/pytorch_model
09/01/2023 02:45:08 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/scheduler.bin
09/01/2023 02:45:08 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_300/random_states_0.pkl
09/01/2023 02:45:08 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:42,  5.31it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:48,  4.65it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:58,  3.83it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:02,  3.59it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.70it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.45it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:07,  3.27it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.45it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.65it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.82it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.89it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.02it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.09it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:50,  4.18it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.23it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.25it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.28it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.24it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.02it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.91it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.03it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.12it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:48,  4.17it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.19it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.01it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.64it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.83it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.66it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.87it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  4.01it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.86it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  4.00it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.88it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.69it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.78it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.94it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.04it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:49,  3.78it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:47,  3.93it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.01it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.09it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.08it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.81it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:51,  3.52it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.71it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.57it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:51,  3.46it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.49it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:51,  3.43it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.56it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.46it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.41it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.59it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.75it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.59it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.77it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.83it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.89it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.00it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.04it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.10it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.12it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.16it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.15it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.19it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.15it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.20it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  4.00it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.87it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.81it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.06it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.13it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.84it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.96it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.61it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.72it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.80it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:37,  3.92it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.98it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:35,  4.07it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.94it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.94it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  3.97it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.07it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.15it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.10it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.15it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.19it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.02it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.10it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:34,  3.85it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.88it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.99it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  4.00it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.08it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.09it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.14it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.17it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.20it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.18it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.93it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.02it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.13it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.77it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:28,  3.94it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.04it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.90it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.02it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:26,  4.09it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.10it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.18it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.20it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.24it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.26it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.30it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.31it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.30it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.34it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.89it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.58it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.78it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.90it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.94it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.08it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:23,  3.93it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.06it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.95it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.07it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.14it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.22it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.26it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.32it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:35<00:19,  4.33it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.32it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.35it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:18,  4.39it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.38it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.41it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.42it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.42it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.39it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.42it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.38it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.39it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.36it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:17,  4.28it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.99it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.11it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:39<00:16,  4.18it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.26it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.29it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.34it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:15,  4.33it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.36it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.39it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.40it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.42it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.44it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.45it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.18it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.25it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:42<00:13,  4.25it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.32it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.31it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.11it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:43<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.96it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.08it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.17it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:44<00:12,  4.00it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.13it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.22it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.28it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.29it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:09,  4.32it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.36it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.14it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.12it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.20it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.23it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.29it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.09it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.18it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:07,  4.26it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.18it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.25it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.31it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.35it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.37it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.40it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.99it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.10it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.18it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.26it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.32it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.36it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.40it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.42it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.42it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:51<00:04,  4.40it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.40it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.39it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.16it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.20it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.24it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.24it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.29it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.33it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.37it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.29it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.33it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.37it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:54<00:01,  4.37it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.39it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.40it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.42it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.43it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.45it/s][A09/01/2023 02:46:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 02:46:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 02:46:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 02:46:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 02:46:06 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 02:46:06 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 02:46:06 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 02:46:06 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 02:46:06 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 02:46:06 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 02:46:06 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 02:46:06 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 02:46:06 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.98it/s]
09/01/2023 02:46:06 - INFO - __main__ -   Step: 300, Validation Metrics: {'accuracy': 0.8006666049439867, 'f1_micro': 0.8006666049439867, 'f1_macro': 0.36531767966831247, 'f1_weighted': 0.7366477669234635, 'f1_1': 0.8876628835645229, 'f1_-1': 0.20829015544041452, 'f1_0': 0.0, 'precision_micro': 0.8006666049439867, 'precision_macro': 0.45386917924288567, 'precision_weighted': 0.7242318160230521, 'precision_1': 0.8094097355308547, 'precision_-1': 0.5521978021978022, 'precision_0': 0.0, 'recall_micro': 0.8006666049439867, 'recall_macro': 0.37033961562210466, 'recall_weighted': 0.8006666049439867, 'recall_1': 0.9826663564448581, 'recall_-1': 0.12835249042145594, 'recall_0': 0.0}
[2023-09-01 02:46:20,607] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 301/1998 [51:55<23:15:54, 49.35s/it]09/01/2023 02:46:20 - INFO - __main__ -   Step: 301, LR: 1.750967741935484e-05, Loss: 0.4739183485507965
[2023-09-01 02:46:35,638] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 302/1998 [52:10<18:24:01, 39.06s/it]09/01/2023 02:46:35 - INFO - __main__ -   Step: 302, LR: 1.7499354838709678e-05, Loss: 0.5009185671806335
[2023-09-01 02:46:49,796] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 303/1998 [52:24<14:52:20, 31.59s/it]09/01/2023 02:46:49 - INFO - __main__ -   Step: 303, LR: 1.7489032258064517e-05, Loss: 0.5576475858688354
[2023-09-01 02:47:03,877] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 304/1998 [52:38<12:23:32, 26.34s/it]09/01/2023 02:47:03 - INFO - __main__ -   Step: 304, LR: 1.7478709677419357e-05, Loss: 0.5434278249740601
[2023-09-01 02:47:18,157] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 305/1998 [52:52<10:41:03, 22.72s/it]09/01/2023 02:47:18 - INFO - __main__ -   Step: 305, LR: 1.7468387096774197e-05, Loss: 0.5550547242164612
[2023-09-01 02:47:32,247] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 306/1998 [53:06<9:27:40, 20.13s/it] 09/01/2023 02:47:32 - INFO - __main__ -   Step: 306, LR: 1.7458064516129033e-05, Loss: 0.592036247253418
[2023-09-01 02:47:45,796] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 307/1998 [53:20<8:31:41, 18.16s/it]09/01/2023 02:47:45 - INFO - __main__ -   Step: 307, LR: 1.7447741935483873e-05, Loss: 0.6161408424377441
[2023-09-01 02:47:59,681] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 308/1998 [53:34<7:55:17, 16.87s/it]09/01/2023 02:47:59 - INFO - __main__ -   Step: 308, LR: 1.7437419354838712e-05, Loss: 0.5998420715332031
[2023-09-01 02:48:16,227] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 15%|█▌        | 309/1998 [53:50<7:52:14, 16.78s/it]09/01/2023 02:48:16 - INFO - __main__ -   Step: 309, LR: 1.7427096774193552e-05, Loss: 0.5143767595291138
[2023-09-01 02:48:30,218] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 310/1998 [54:04<7:28:27, 15.94s/it]09/01/2023 02:48:30 - INFO - __main__ -   Step: 310, LR: 1.741677419354839e-05, Loss: 0.6414204835891724
[2023-09-01 02:48:43,616] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 311/1998 [54:18<7:06:44, 15.18s/it]09/01/2023 02:48:43 - INFO - __main__ -   Step: 311, LR: 1.7406451612903228e-05, Loss: 0.5924206376075745
[2023-09-01 02:48:56,609] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 312/1998 [54:31<6:48:04, 14.52s/it]09/01/2023 02:48:56 - INFO - __main__ -   Step: 312, LR: 1.7396129032258068e-05, Loss: 0.5658972859382629
[2023-09-01 02:49:10,933] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 313/1998 [54:45<6:46:10, 14.46s/it]09/01/2023 02:49:10 - INFO - __main__ -   Step: 313, LR: 1.7385806451612904e-05, Loss: 0.5338940620422363
[2023-09-01 02:49:25,430] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 314/1998 [54:59<6:46:12, 14.47s/it]09/01/2023 02:49:25 - INFO - __main__ -   Step: 314, LR: 1.7375483870967744e-05, Loss: 0.5715950727462769
[2023-09-01 02:49:41,228] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 315/1998 [55:15<6:57:07, 14.87s/it]09/01/2023 02:49:41 - INFO - __main__ -   Step: 315, LR: 1.7365161290322583e-05, Loss: 0.5828217267990112
[2023-09-01 02:49:57,564] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 316/1998 [55:32<7:09:11, 15.31s/it]09/01/2023 02:49:57 - INFO - __main__ -   Step: 316, LR: 1.7354838709677423e-05, Loss: 0.4893225431442261
[2023-09-01 02:50:11,707] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 317/1998 [55:46<6:59:07, 14.96s/it]09/01/2023 02:50:11 - INFO - __main__ -   Step: 317, LR: 1.734451612903226e-05, Loss: 0.5779874324798584
[2023-09-01 02:50:26,344] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 318/1998 [56:00<6:56:10, 14.86s/it]09/01/2023 02:50:26 - INFO - __main__ -   Step: 318, LR: 1.7334193548387096e-05, Loss: 0.6280539631843567
[2023-09-01 02:50:40,872] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 319/1998 [56:15<6:53:06, 14.76s/it]09/01/2023 02:50:40 - INFO - __main__ -   Step: 319, LR: 1.7323870967741935e-05, Loss: 0.6350769400596619
[2023-09-01 02:50:55,940] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 320/1998 [56:30<6:55:25, 14.85s/it]09/01/2023 02:50:55 - INFO - __main__ -   Step: 320, LR: 1.7313548387096775e-05, Loss: 0.501616358757019
[2023-09-01 02:51:09,552] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 321/1998 [56:44<6:44:45, 14.48s/it]09/01/2023 02:51:09 - INFO - __main__ -   Step: 321, LR: 1.7303225806451615e-05, Loss: 0.5876342058181763
[2023-09-01 02:51:23,068] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 322/1998 [56:57<6:36:25, 14.19s/it]09/01/2023 02:51:23 - INFO - __main__ -   Step: 322, LR: 1.729290322580645e-05, Loss: 0.5765557885169983
[2023-09-01 02:51:36,764] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 323/1998 [57:11<6:32:02, 14.04s/it]09/01/2023 02:51:36 - INFO - __main__ -   Step: 323, LR: 1.728258064516129e-05, Loss: 0.6019790172576904
[2023-09-01 02:51:51,089] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▌        | 324/1998 [57:25<6:34:09, 14.13s/it]09/01/2023 02:51:51 - INFO - __main__ -   Step: 324, LR: 1.727225806451613e-05, Loss: 0.535493016242981
[2023-09-01 02:52:05,394] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▋        | 325/1998 [57:39<6:35:24, 14.18s/it]09/01/2023 02:52:05 - INFO - __main__ -   Step: 325, LR: 1.726193548387097e-05, Loss: 0.6008478403091431
[2023-09-01 02:52:18,285] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▋        | 326/1998 [57:52<6:24:23, 13.79s/it]09/01/2023 02:52:18 - INFO - __main__ -   Step: 326, LR: 1.7251612903225806e-05, Loss: 0.5157332420349121
[2023-09-01 02:52:32,792] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▋        | 327/1998 [58:07<6:30:07, 14.01s/it]09/01/2023 02:52:32 - INFO - __main__ -   Step: 327, LR: 1.7241290322580646e-05, Loss: 0.5465266704559326
[2023-09-01 02:52:46,240] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▋        | 328/1998 [58:20<6:25:12, 13.84s/it]09/01/2023 02:52:46 - INFO - __main__ -   Step: 328, LR: 1.7230967741935486e-05, Loss: 0.5519413948059082
[2023-09-01 02:52:59,700] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 16%|█▋        | 329/1998 [58:34<6:21:48, 13.73s/it]09/01/2023 02:52:59 - INFO - __main__ -   Step: 329, LR: 1.7220645161290322e-05, Loss: 0.5036500692367554
[2023-09-01 02:53:15,089] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 330/1998 [58:49<6:35:27, 14.22s/it]09/01/2023 02:53:15 - INFO - __main__ -   Step: 330, LR: 1.721032258064516e-05, Loss: 0.537976086139679
[2023-09-01 02:53:28,999] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 331/1998 [59:03<6:32:35, 14.13s/it]09/01/2023 02:53:29 - INFO - __main__ -   Step: 331, LR: 1.72e-05, Loss: 0.5387464761734009
[2023-09-01 02:53:42,727] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 332/1998 [59:17<6:29:00, 14.01s/it]09/01/2023 02:53:42 - INFO - __main__ -   Step: 332, LR: 1.718967741935484e-05, Loss: 0.5660878419876099
[2023-09-01 02:53:56,734] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 333/1998 [59:31<6:28:44, 14.01s/it]09/01/2023 02:53:56 - INFO - __main__ -   Step: 333, LR: 1.7179354838709677e-05, Loss: 0.4924788475036621
[2023-09-01 02:54:10,603] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 334/1998 [59:45<6:27:20, 13.97s/it]09/01/2023 02:54:10 - INFO - __main__ -   Step: 334, LR: 1.7169032258064517e-05, Loss: 0.5529671907424927
[2023-09-01 02:54:26,004] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 335/1998 [1:00:00<6:39:02, 14.40s/it]09/01/2023 02:54:26 - INFO - __main__ -   Step: 335, LR: 1.7158709677419357e-05, Loss: 0.5776464939117432
[2023-09-01 02:54:41,367] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 336/1998 [1:00:15<6:46:49, 14.69s/it]09/01/2023 02:54:41 - INFO - __main__ -   Step: 336, LR: 1.7148387096774196e-05, Loss: 0.6450833082199097
[2023-09-01 02:54:54,472] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 337/1998 [1:00:28<6:33:26, 14.21s/it]09/01/2023 02:54:54 - INFO - __main__ -   Step: 337, LR: 1.7138064516129033e-05, Loss: 0.5314751863479614
[2023-09-01 02:55:08,621] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 338/1998 [1:00:43<6:32:40, 14.19s/it]09/01/2023 02:55:08 - INFO - __main__ -   Step: 338, LR: 1.7127741935483872e-05, Loss: 0.6171236038208008
[2023-09-01 02:55:22,384] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 339/1998 [1:00:56<6:28:52, 14.06s/it]09/01/2023 02:55:22 - INFO - __main__ -   Step: 339, LR: 1.7117419354838712e-05, Loss: 0.6295416355133057
[2023-09-01 02:55:37,032] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 340/1998 [1:01:11<6:33:28, 14.24s/it]09/01/2023 02:55:37 - INFO - __main__ -   Step: 340, LR: 1.7107096774193552e-05, Loss: 0.5618181228637695
[2023-09-01 02:55:50,526] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 341/1998 [1:01:24<6:27:04, 14.02s/it]09/01/2023 02:55:50 - INFO - __main__ -   Step: 341, LR: 1.7096774193548388e-05, Loss: 0.5355340242385864
[2023-09-01 02:56:04,635] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 342/1998 [1:01:39<6:27:36, 14.04s/it]09/01/2023 02:56:04 - INFO - __main__ -   Step: 342, LR: 1.7086451612903228e-05, Loss: 0.5535343885421753
[2023-09-01 02:56:18,720] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 343/1998 [1:01:53<6:27:42, 14.06s/it]09/01/2023 02:56:18 - INFO - __main__ -   Step: 343, LR: 1.7076129032258067e-05, Loss: 0.553404688835144
[2023-09-01 02:56:32,474] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 344/1998 [1:02:06<6:24:59, 13.97s/it]09/01/2023 02:56:32 - INFO - __main__ -   Step: 344, LR: 1.7065806451612904e-05, Loss: 0.611650824546814
[2023-09-01 02:56:45,289] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 345/1998 [1:02:19<6:15:14, 13.62s/it]09/01/2023 02:56:45 - INFO - __main__ -   Step: 345, LR: 1.7055483870967743e-05, Loss: 0.5894267559051514
[2023-09-01 02:56:59,363] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 346/1998 [1:02:33<6:18:45, 13.76s/it]09/01/2023 02:56:59 - INFO - __main__ -   Step: 346, LR: 1.7045161290322583e-05, Loss: 0.5464159250259399
[2023-09-01 02:57:14,180] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 347/1998 [1:02:48<6:27:16, 14.07s/it]09/01/2023 02:57:14 - INFO - __main__ -   Step: 347, LR: 1.7034838709677423e-05, Loss: 0.5652554631233215
[2023-09-01 02:57:27,458] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 348/1998 [1:03:01<6:20:28, 13.84s/it]09/01/2023 02:57:27 - INFO - __main__ -   Step: 348, LR: 1.702451612903226e-05, Loss: 0.5912802219390869
[2023-09-01 02:57:41,672] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 17%|█▋        | 349/1998 [1:03:16<6:23:22, 13.95s/it]09/01/2023 02:57:41 - INFO - __main__ -   Step: 349, LR: 1.70141935483871e-05, Loss: 0.5570039749145508
[2023-09-01 02:57:56,315] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 350/1998 [1:03:30<6:28:51, 14.16s/it]09/01/2023 02:57:56 - INFO - __main__ -   Step: 350, LR: 1.700387096774194e-05, Loss: 0.5261582732200623
[2023-09-01 02:58:09,357] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 351/1998 [1:03:43<6:19:26, 13.82s/it]09/01/2023 02:58:09 - INFO - __main__ -   Step: 351, LR: 1.6993548387096778e-05, Loss: 0.5070408582687378
[2023-09-01 02:58:22,824] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 352/1998 [1:03:57<6:16:16, 13.72s/it]09/01/2023 02:58:22 - INFO - __main__ -   Step: 352, LR: 1.6983225806451614e-05, Loss: 0.6301670074462891
[2023-09-01 02:58:36,750] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 353/1998 [1:04:11<6:17:46, 13.78s/it]09/01/2023 02:58:36 - INFO - __main__ -   Step: 353, LR: 1.6972903225806454e-05, Loss: 0.5900068879127502
[2023-09-01 02:58:51,603] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 354/1998 [1:04:26<6:26:22, 14.10s/it]09/01/2023 02:58:51 - INFO - __main__ -   Step: 354, LR: 1.696258064516129e-05, Loss: 0.5265426635742188
[2023-09-01 02:59:05,973] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 355/1998 [1:04:40<6:28:20, 14.18s/it]09/01/2023 02:59:05 - INFO - __main__ -   Step: 355, LR: 1.695225806451613e-05, Loss: 0.5729262232780457
[2023-09-01 02:59:19,629] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 356/1998 [1:04:54<6:23:47, 14.02s/it]09/01/2023 02:59:19 - INFO - __main__ -   Step: 356, LR: 1.694193548387097e-05, Loss: 0.6069577932357788
[2023-09-01 02:59:35,454] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 357/1998 [1:05:09<6:38:20, 14.56s/it]09/01/2023 02:59:35 - INFO - __main__ -   Step: 357, LR: 1.6931612903225806e-05, Loss: 0.5642819404602051
[2023-09-01 02:59:49,489] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 358/1998 [1:05:23<6:33:45, 14.41s/it]09/01/2023 02:59:49 - INFO - __main__ -   Step: 358, LR: 1.6921290322580646e-05, Loss: 0.6096146106719971
[2023-09-01 03:00:03,351] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 359/1998 [1:05:37<6:29:03, 14.24s/it]09/01/2023 03:00:03 - INFO - __main__ -   Step: 359, LR: 1.6910967741935485e-05, Loss: 0.650461733341217
[2023-09-01 03:00:17,460] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 360/1998 [1:05:51<6:27:43, 14.20s/it]09/01/2023 03:00:17 - INFO - __main__ -   Step: 360, LR: 1.690064516129032e-05, Loss: 0.5808091163635254
[2023-09-01 03:00:31,102] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 361/1998 [1:06:05<6:22:54, 14.03s/it]09/01/2023 03:00:31 - INFO - __main__ -   Step: 361, LR: 1.689032258064516e-05, Loss: 0.6286493539810181
[2023-09-01 03:00:46,657] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 362/1998 [1:06:21<6:35:06, 14.49s/it]09/01/2023 03:00:46 - INFO - __main__ -   Step: 362, LR: 1.688e-05, Loss: 0.5549260973930359
[2023-09-01 03:01:00,120] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 363/1998 [1:06:34<6:26:28, 14.18s/it]09/01/2023 03:01:00 - INFO - __main__ -   Step: 363, LR: 1.686967741935484e-05, Loss: 0.570014238357544
[2023-09-01 03:01:14,622] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 364/1998 [1:06:49<6:28:50, 14.28s/it]09/01/2023 03:01:14 - INFO - __main__ -   Step: 364, LR: 1.6859354838709677e-05, Loss: 0.6292283535003662
[2023-09-01 03:01:28,780] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 365/1998 [1:07:03<6:27:37, 14.24s/it]09/01/2023 03:01:28 - INFO - __main__ -   Step: 365, LR: 1.6849032258064517e-05, Loss: 0.5548090934753418
[2023-09-01 03:01:41,852] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 366/1998 [1:07:16<6:17:50, 13.89s/it]09/01/2023 03:01:41 - INFO - __main__ -   Step: 366, LR: 1.6838709677419356e-05, Loss: 0.5536120533943176
[2023-09-01 03:01:56,353] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 367/1998 [1:07:30<6:22:35, 14.07s/it]09/01/2023 03:01:56 - INFO - __main__ -   Step: 367, LR: 1.6828387096774196e-05, Loss: 0.53522127866745
[2023-09-01 03:02:10,004] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 368/1998 [1:07:44<6:18:53, 13.95s/it]09/01/2023 03:02:10 - INFO - __main__ -   Step: 368, LR: 1.6818064516129032e-05, Loss: 0.5444443225860596
[2023-09-01 03:02:23,992] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 18%|█▊        | 369/1998 [1:07:58<6:18:59, 13.96s/it]09/01/2023 03:02:23 - INFO - __main__ -   Step: 369, LR: 1.6807741935483872e-05, Loss: 0.5484598278999329
[2023-09-01 03:02:38,043] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▊        | 370/1998 [1:08:12<6:19:30, 13.99s/it]09/01/2023 03:02:38 - INFO - __main__ -   Step: 370, LR: 1.6797419354838712e-05, Loss: 0.5785104632377625
[2023-09-01 03:02:52,918] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▊        | 371/1998 [1:08:27<6:26:30, 14.25s/it]09/01/2023 03:02:52 - INFO - __main__ -   Step: 371, LR: 1.678709677419355e-05, Loss: 0.5476319789886475
[2023-09-01 03:03:06,882] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▊        | 372/1998 [1:08:41<6:23:54, 14.17s/it]09/01/2023 03:03:06 - INFO - __main__ -   Step: 372, LR: 1.6776774193548388e-05, Loss: 0.5358142256736755
[2023-09-01 03:03:20,697] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▊        | 373/1998 [1:08:55<6:20:49, 14.06s/it]09/01/2023 03:03:20 - INFO - __main__ -   Step: 373, LR: 1.6766451612903227e-05, Loss: 0.5419797897338867
[2023-09-01 03:03:35,283] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▊        | 374/1998 [1:09:09<6:24:51, 14.22s/it]09/01/2023 03:03:35 - INFO - __main__ -   Step: 374, LR: 1.6756129032258067e-05, Loss: 0.5125440359115601
[2023-09-01 03:03:49,078] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 375/1998 [1:09:23<6:21:10, 14.09s/it]09/01/2023 03:03:49 - INFO - __main__ -   Step: 375, LR: 1.6745806451612903e-05, Loss: 0.7123779058456421
[2023-09-01 03:04:03,556] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 376/1998 [1:09:38<6:24:04, 14.21s/it]09/01/2023 03:04:03 - INFO - __main__ -   Step: 376, LR: 1.6735483870967743e-05, Loss: 0.62394779920578
[2023-09-01 03:04:17,348] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 377/1998 [1:09:51<6:20:28, 14.08s/it]09/01/2023 03:04:17 - INFO - __main__ -   Step: 377, LR: 1.6725161290322583e-05, Loss: 0.6124662756919861
[2023-09-01 03:04:31,370] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 378/1998 [1:10:05<6:19:44, 14.06s/it]09/01/2023 03:04:31 - INFO - __main__ -   Step: 378, LR: 1.6714838709677422e-05, Loss: 0.6374452114105225
[2023-09-01 03:04:46,084] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 379/1998 [1:10:20<6:24:46, 14.26s/it]09/01/2023 03:04:46 - INFO - __main__ -   Step: 379, LR: 1.670451612903226e-05, Loss: 0.6055434942245483
[2023-09-01 03:04:59,420] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 380/1998 [1:10:33<6:17:03, 13.98s/it]09/01/2023 03:04:59 - INFO - __main__ -   Step: 380, LR: 1.66941935483871e-05, Loss: 0.5985541343688965
[2023-09-01 03:05:12,816] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 381/1998 [1:10:47<6:12:05, 13.81s/it]09/01/2023 03:05:12 - INFO - __main__ -   Step: 381, LR: 1.6683870967741938e-05, Loss: 0.5732959508895874
[2023-09-01 03:05:26,724] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 382/1998 [1:11:01<6:12:40, 13.84s/it]09/01/2023 03:05:26 - INFO - __main__ -   Step: 382, LR: 1.6673548387096778e-05, Loss: 0.6136804819107056
[2023-09-01 03:05:41,061] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 383/1998 [1:11:15<6:16:28, 13.99s/it]09/01/2023 03:05:41 - INFO - __main__ -   Step: 383, LR: 1.6663225806451614e-05, Loss: 0.6254490613937378
[2023-09-01 03:05:54,611] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 384/1998 [1:11:29<6:12:43, 13.86s/it]09/01/2023 03:05:54 - INFO - __main__ -   Step: 384, LR: 1.6652903225806454e-05, Loss: 0.5938768982887268
[2023-09-01 03:06:09,580] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 385/1998 [1:11:44<6:21:28, 14.19s/it]09/01/2023 03:06:09 - INFO - __main__ -   Step: 385, LR: 1.6642580645161293e-05, Loss: 0.4994148910045624
[2023-09-01 03:06:23,195] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 386/1998 [1:11:57<6:16:36, 14.02s/it]09/01/2023 03:06:23 - INFO - __main__ -   Step: 386, LR: 1.663225806451613e-05, Loss: 0.589576244354248
[2023-09-01 03:06:38,106] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 387/1998 [1:12:12<6:23:33, 14.29s/it]09/01/2023 03:06:38 - INFO - __main__ -   Step: 387, LR: 1.662193548387097e-05, Loss: 0.5661686658859253
[2023-09-01 03:06:52,963] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 388/1998 [1:12:27<6:27:55, 14.46s/it]09/01/2023 03:06:52 - INFO - __main__ -   Step: 388, LR: 1.661161290322581e-05, Loss: 0.6537783145904541
[2023-09-01 03:07:06,988] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 19%|█▉        | 389/1998 [1:12:41<6:24:12, 14.33s/it]09/01/2023 03:07:06 - INFO - __main__ -   Step: 389, LR: 1.6601290322580645e-05, Loss: 0.605850100517273
[2023-09-01 03:07:21,601] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 390/1998 [1:12:56<6:26:16, 14.41s/it]09/01/2023 03:07:21 - INFO - __main__ -   Step: 390, LR: 1.6590967741935485e-05, Loss: 0.570934534072876
[2023-09-01 03:07:34,947] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 391/1998 [1:13:09<6:17:27, 14.09s/it]09/01/2023 03:07:34 - INFO - __main__ -   Step: 391, LR: 1.658064516129032e-05, Loss: 0.5196077823638916
[2023-09-01 03:07:48,424] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 392/1998 [1:13:22<6:12:16, 13.91s/it]09/01/2023 03:07:48 - INFO - __main__ -   Step: 392, LR: 1.657032258064516e-05, Loss: 0.621088981628418
[2023-09-01 03:08:02,122] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 393/1998 [1:13:36<6:10:21, 13.85s/it]09/01/2023 03:08:02 - INFO - __main__ -   Step: 393, LR: 1.656e-05, Loss: 0.5570201277732849
[2023-09-01 03:08:16,608] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 394/1998 [1:13:51<6:15:15, 14.04s/it]09/01/2023 03:08:16 - INFO - __main__ -   Step: 394, LR: 1.654967741935484e-05, Loss: 0.5870851278305054
[2023-09-01 03:08:31,269] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 395/1998 [1:14:05<6:20:01, 14.22s/it]09/01/2023 03:08:31 - INFO - __main__ -   Step: 395, LR: 1.6539354838709677e-05, Loss: 0.5552656650543213
[2023-09-01 03:08:45,650] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 396/1998 [1:14:20<6:21:02, 14.27s/it]09/01/2023 03:08:45 - INFO - __main__ -   Step: 396, LR: 1.6529032258064516e-05, Loss: 0.6281125545501709
[2023-09-01 03:09:00,517] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 397/1998 [1:14:34<6:25:34, 14.45s/it]09/01/2023 03:09:00 - INFO - __main__ -   Step: 397, LR: 1.6518709677419356e-05, Loss: 0.6057230830192566
[2023-09-01 03:09:13,759] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 398/1998 [1:14:48<6:15:40, 14.09s/it]09/01/2023 03:09:13 - INFO - __main__ -   Step: 398, LR: 1.6508387096774196e-05, Loss: 0.5343087911605835
[2023-09-01 03:09:26,947] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|█▉        | 399/1998 [1:15:01<6:08:14, 13.82s/it]09/01/2023 03:09:26 - INFO - __main__ -   Step: 399, LR: 1.6498064516129032e-05, Loss: 0.6096413135528564
[2023-09-01 03:09:41,544] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 400/1998 [1:15:16<6:14:14, 14.05s/it]09/01/2023 03:09:41 - INFO - __main__ -   Step: 400, LR: 1.6487741935483872e-05, Loss: 0.5345907211303711
09/01/2023 03:09:41 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400
09/01/2023 03:09:41 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 03:09:41,553] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 03:09:41,560] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 03:09:41,560] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 03:09:41,560] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 03:09:41,560] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 03:09:41,561] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 03:09:41,561] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 03:09:41,574] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 03:09:41,575] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 03:09:41,575] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 03:09:41,576] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 03:09:41,576] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 03:09:41,576] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 03:09:41,576] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 03:09:41,576] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 03:10:38,849] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 03:10:38,850] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 03:10:39,030] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 03:10:39,030] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 03:10:42,469] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 03:10:42,469] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 03:10:43,040] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 03:10:43,040] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 03:10:43,044] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 03:10:43,044] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 03:10:43,044] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 03:10:43,045] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 03:10:43 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/pytorch_model
09/01/2023 03:10:43 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/scheduler.bin
09/01/2023 03:10:43 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_400/random_states_0.pkl
09/01/2023 03:10:43 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:42,  5.38it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:48,  4.63it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:58,  3.80it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:02,  3.58it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<01:00,  3.69it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:04,  3.45it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:07,  3.27it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.44it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.65it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.81it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.89it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.01it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.08it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.16it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.21it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:50,  4.21it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.23it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.20it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:52,  4.00it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:53,  3.89it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  3.99it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.08it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.13it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.16it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.98it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.61it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.79it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.63it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.84it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.97it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.83it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:49,  3.98it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:50,  3.86it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:09<00:52,  3.67it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.78it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.92it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.00it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:10<00:50,  3.76it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.90it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:47,  3.97it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.05it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.04it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.79it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.50it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.69it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.55it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.41it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.45it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:52,  3.40it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:50,  3.53it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:51,  3.45it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.40it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.45it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.40it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.59it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:15<00:45,  3.75it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.60it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.77it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.84it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:16<00:42,  3.89it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.99it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:41,  4.01it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.07it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:17<00:39,  4.11it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.14it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.14it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.18it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.13it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.17it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.97it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.84it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:19<00:40,  3.79it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.91it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.04it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:37,  4.10it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:20<00:39,  3.82it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.96it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.61it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.72it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.92it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.05it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.93it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.07it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.13it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.09it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:24<00:32,  4.14it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.18it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.01it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.11it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.85it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.88it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.99it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:31,  4.01it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  4.01it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.08it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.07it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.12it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:27<00:29,  4.16it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.20it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:29,  4.17it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:28<00:30,  3.92it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.02it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:29,  4.03it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.11it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.76it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:28,  3.93it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:28,  4.03it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.89it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:30<00:27,  4.01it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.07it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.06it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:26,  4.14it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:31<00:25,  4.17it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.21it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.23it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.24it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.26it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.26it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.32it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.88it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:33<00:27,  3.58it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.78it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.91it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.93it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.06it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.91it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.03it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.92it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.05it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.11it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.20it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.23it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.29it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:20,  4.29it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.30it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.32it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.36it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:37<00:18,  4.35it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.39it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.41it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.38it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.35it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.38it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.35it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.35it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.33it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.26it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.81it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.95it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.07it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.16it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.24it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.26it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.31it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:41<00:15,  4.30it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.34it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.36it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.38it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.39it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.42it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.43it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.16it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.24it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.24it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.32it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.31it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.10it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.96it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.06it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.16it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.98it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.12it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.19it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.23it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:46<00:10,  4.25it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.27it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.31it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.11it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:47<00:09,  4.09it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.20it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.25it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.30it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.09it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.17it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.25it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.18it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.24it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.30it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.33it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.35it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.35it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.96it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.07it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:06,  4.15it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.25it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:51<00:05,  4.31it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.36it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.38it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.38it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.40it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.38it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.39it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.37it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.15it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.19it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.23it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.23it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.27it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:54<00:02,  4.30it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.34it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.26it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.31it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.35it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.36it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.39it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.40it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.42it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:56<00:00,  4.43it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.43it/s][A09/01/2023 03:11:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1469: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 03:11:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.96it/s]
09/01/2023 03:11:40 - INFO - __main__ -   Step: 400, Validation Metrics: {'accuracy': 0.7985371724840292, 'f1_micro': 0.7985371724840292, 'f1_macro': 0.3758613042063787, 'f1_weighted': 0.7401425561807777, 'f1_1': 0.885986250661026, 'f1_-1': 0.24159766195811008, 'f1_0': 0.0, 'precision_micro': 0.7985371724840292, 'precision_macro': 0.44047908672475505, 'precision_weighted': 0.7202218087417639, 'precision_1': 0.8121970137676944, 'precision_-1': 0.5092402464065708, 'precision_0': 0.0, 'recall_micro': 0.7985371724840292, 'recall_macro': 0.37762943192760856, 'recall_weighted': 0.7985371724840292, 'recall_1': 0.9745230339692881, 'recall_-1': 0.1583652618135377, 'recall_0': 0.0}
[2023-09-01 03:11:55,071] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 401/1998 [1:17:29<22:08:01, 49.89s/it]09/01/2023 03:11:55 - INFO - __main__ -   Step: 401, LR: 1.647741935483871e-05, Loss: 0.5583169460296631
[2023-09-01 03:12:08,158] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 402/1998 [1:17:42<17:13:27, 38.85s/it]09/01/2023 03:12:08 - INFO - __main__ -   Step: 402, LR: 1.646709677419355e-05, Loss: 0.5383337736129761
[2023-09-01 03:12:22,423] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 403/1998 [1:17:56<13:56:44, 31.48s/it]09/01/2023 03:12:22 - INFO - __main__ -   Step: 403, LR: 1.6456774193548387e-05, Loss: 0.6060988903045654
[2023-09-01 03:12:37,316] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 404/1998 [1:18:11<11:44:02, 26.50s/it]09/01/2023 03:12:37 - INFO - __main__ -   Step: 404, LR: 1.6446451612903227e-05, Loss: 0.6864335536956787
[2023-09-01 03:12:50,575] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 405/1998 [1:18:25<9:58:08, 22.53s/it] 09/01/2023 03:12:50 - INFO - __main__ -   Step: 405, LR: 1.6436129032258067e-05, Loss: 0.5933186411857605
[2023-09-01 03:13:04,727] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 406/1998 [1:18:39<8:51:04, 20.02s/it]09/01/2023 03:13:04 - INFO - __main__ -   Step: 406, LR: 1.6425806451612903e-05, Loss: 0.534539520740509
[2023-09-01 03:13:19,899] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 407/1998 [1:18:54<8:12:13, 18.56s/it]09/01/2023 03:13:19 - INFO - __main__ -   Step: 407, LR: 1.6415483870967743e-05, Loss: 0.5993378162384033
[2023-09-01 03:13:33,541] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 408/1998 [1:19:08<7:32:47, 17.09s/it]09/01/2023 03:13:33 - INFO - __main__ -   Step: 408, LR: 1.6405161290322582e-05, Loss: 0.5868542790412903
[2023-09-01 03:13:48,116] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 20%|██        | 409/1998 [1:19:22<7:12:32, 16.33s/it]09/01/2023 03:13:48 - INFO - __main__ -   Step: 409, LR: 1.6394838709677422e-05, Loss: 0.5762455463409424
[2023-09-01 03:14:01,540] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 410/1998 [1:19:36<6:49:10, 15.46s/it]09/01/2023 03:14:01 - INFO - __main__ -   Step: 410, LR: 1.638451612903226e-05, Loss: 0.5270450115203857
[2023-09-01 03:14:16,135] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 411/1998 [1:19:50<6:42:03, 15.20s/it]09/01/2023 03:14:16 - INFO - __main__ -   Step: 411, LR: 1.6374193548387098e-05, Loss: 0.5441486835479736
[2023-09-01 03:14:29,752] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 412/1998 [1:20:04<6:29:14, 14.73s/it]09/01/2023 03:14:29 - INFO - __main__ -   Step: 412, LR: 1.6363870967741938e-05, Loss: 0.5666896104812622
[2023-09-01 03:14:42,791] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 413/1998 [1:20:17<6:15:38, 14.22s/it]09/01/2023 03:14:42 - INFO - __main__ -   Step: 413, LR: 1.6353548387096777e-05, Loss: 0.5974629521369934
[2023-09-01 03:14:56,839] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 414/1998 [1:20:31<6:14:02, 14.17s/it]09/01/2023 03:14:56 - INFO - __main__ -   Step: 414, LR: 1.6343225806451614e-05, Loss: 0.5637965202331543
[2023-09-01 03:15:10,466] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 415/1998 [1:20:44<6:09:31, 14.01s/it]09/01/2023 03:15:10 - INFO - __main__ -   Step: 415, LR: 1.6332903225806453e-05, Loss: 0.5549443960189819
[2023-09-01 03:15:25,160] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 416/1998 [1:20:59<6:14:43, 14.21s/it]09/01/2023 03:15:25 - INFO - __main__ -   Step: 416, LR: 1.6322580645161293e-05, Loss: 0.6066486835479736
[2023-09-01 03:15:38,492] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 417/1998 [1:21:12<6:07:32, 13.95s/it]09/01/2023 03:15:38 - INFO - __main__ -   Step: 417, LR: 1.631225806451613e-05, Loss: 0.5272520780563354
[2023-09-01 03:15:52,902] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 418/1998 [1:21:27<6:10:56, 14.09s/it]09/01/2023 03:15:52 - INFO - __main__ -   Step: 418, LR: 1.630193548387097e-05, Loss: 0.5097573399543762
[2023-09-01 03:16:06,678] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 419/1998 [1:21:41<6:08:15, 13.99s/it]09/01/2023 03:16:06 - INFO - __main__ -   Step: 419, LR: 1.629161290322581e-05, Loss: 0.6189045906066895
[2023-09-01 03:16:20,069] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 420/1998 [1:21:54<6:03:16, 13.81s/it]09/01/2023 03:16:20 - INFO - __main__ -   Step: 420, LR: 1.628129032258065e-05, Loss: 0.6569270491600037
[2023-09-01 03:16:33,558] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 421/1998 [1:22:08<6:00:29, 13.72s/it]09/01/2023 03:16:33 - INFO - __main__ -   Step: 421, LR: 1.6270967741935485e-05, Loss: 0.5150693655014038
[2023-09-01 03:16:46,846] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 422/1998 [1:22:21<5:56:53, 13.59s/it]09/01/2023 03:16:46 - INFO - __main__ -   Step: 422, LR: 1.6260645161290324e-05, Loss: 0.6460351943969727
[2023-09-01 03:17:00,026] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 423/1998 [1:22:34<5:53:27, 13.47s/it]09/01/2023 03:17:00 - INFO - __main__ -   Step: 423, LR: 1.6250322580645164e-05, Loss: 0.6058253049850464
[2023-09-01 03:17:13,658] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██        | 424/1998 [1:22:48<5:54:33, 13.52s/it]09/01/2023 03:17:13 - INFO - __main__ -   Step: 424, LR: 1.6240000000000004e-05, Loss: 0.5578392148017883
[2023-09-01 03:17:29,248] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██▏       | 425/1998 [1:23:03<6:10:38, 14.14s/it]09/01/2023 03:17:29 - INFO - __main__ -   Step: 425, LR: 1.622967741935484e-05, Loss: 0.5876463651657104
[2023-09-01 03:17:43,773] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██▏       | 426/1998 [1:23:18<6:13:27, 14.25s/it]09/01/2023 03:17:43 - INFO - __main__ -   Step: 426, LR: 1.6219354838709676e-05, Loss: 0.5686213970184326
[2023-09-01 03:17:58,367] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██▏       | 427/1998 [1:23:32<6:15:53, 14.36s/it]09/01/2023 03:17:58 - INFO - __main__ -   Step: 427, LR: 1.6209032258064516e-05, Loss: 0.616342306137085
[2023-09-01 03:18:12,365] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██▏       | 428/1998 [1:23:46<6:12:50, 14.25s/it]09/01/2023 03:18:12 - INFO - __main__ -   Step: 428, LR: 1.6198709677419356e-05, Loss: 0.6912041306495667
[2023-09-01 03:18:25,153] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 21%|██▏       | 429/1998 [1:23:59<6:01:08, 13.81s/it]09/01/2023 03:18:25 - INFO - __main__ -   Step: 429, LR: 1.6188387096774195e-05, Loss: 0.6266842484474182
[2023-09-01 03:18:38,770] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 430/1998 [1:24:13<5:59:23, 13.75s/it]09/01/2023 03:18:38 - INFO - __main__ -   Step: 430, LR: 1.617806451612903e-05, Loss: 0.7610233426094055
[2023-09-01 03:18:52,413] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 431/1998 [1:24:26<5:58:18, 13.72s/it]09/01/2023 03:18:52 - INFO - __main__ -   Step: 431, LR: 1.616774193548387e-05, Loss: 0.5601719617843628
[2023-09-01 03:19:06,998] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 432/1998 [1:24:41<6:04:51, 13.98s/it]09/01/2023 03:19:06 - INFO - __main__ -   Step: 432, LR: 1.615741935483871e-05, Loss: 0.5755483508110046
[2023-09-01 03:19:20,317] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 433/1998 [1:24:54<5:59:27, 13.78s/it]09/01/2023 03:19:20 - INFO - __main__ -   Step: 433, LR: 1.614709677419355e-05, Loss: 0.5991415977478027
[2023-09-01 03:19:33,362] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 434/1998 [1:25:07<5:53:28, 13.56s/it]09/01/2023 03:19:33 - INFO - __main__ -   Step: 434, LR: 1.6136774193548387e-05, Loss: 0.6090904474258423
[2023-09-01 03:19:47,082] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 435/1998 [1:25:21<5:54:29, 13.61s/it]09/01/2023 03:19:47 - INFO - __main__ -   Step: 435, LR: 1.6126451612903227e-05, Loss: 0.5850125551223755
[2023-09-01 03:19:59,875] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 436/1998 [1:25:34<5:47:53, 13.36s/it]09/01/2023 03:19:59 - INFO - __main__ -   Step: 436, LR: 1.6116129032258066e-05, Loss: 0.5307143926620483
[2023-09-01 03:20:13,884] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 437/1998 [1:25:48<5:52:42, 13.56s/it]09/01/2023 03:20:13 - INFO - __main__ -   Step: 437, LR: 1.6105806451612903e-05, Loss: 0.635995090007782
[2023-09-01 03:20:26,813] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 438/1998 [1:26:01<5:47:35, 13.37s/it]09/01/2023 03:20:26 - INFO - __main__ -   Step: 438, LR: 1.6095483870967742e-05, Loss: 0.6085165739059448
[2023-09-01 03:20:40,435] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 439/1998 [1:26:14<5:49:20, 13.44s/it]09/01/2023 03:20:40 - INFO - __main__ -   Step: 439, LR: 1.6085161290322582e-05, Loss: 0.578805148601532
[2023-09-01 03:20:54,193] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 440/1998 [1:26:28<5:51:33, 13.54s/it]09/01/2023 03:20:54 - INFO - __main__ -   Step: 440, LR: 1.6074838709677422e-05, Loss: 0.5528278350830078
[2023-09-01 03:21:07,334] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 441/1998 [1:26:41<5:48:13, 13.42s/it]09/01/2023 03:21:07 - INFO - __main__ -   Step: 441, LR: 1.6064516129032258e-05, Loss: 0.5628032684326172
[2023-09-01 03:21:21,723] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 442/1998 [1:26:56<5:55:33, 13.71s/it]09/01/2023 03:21:21 - INFO - __main__ -   Step: 442, LR: 1.6054193548387098e-05, Loss: 0.5471677780151367
[2023-09-01 03:21:35,891] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 443/1998 [1:27:10<5:58:53, 13.85s/it]09/01/2023 03:21:35 - INFO - __main__ -   Step: 443, LR: 1.6043870967741937e-05, Loss: 0.5603466629981995
[2023-09-01 03:21:49,849] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 444/1998 [1:27:24<5:59:30, 13.88s/it]09/01/2023 03:21:49 - INFO - __main__ -   Step: 444, LR: 1.6033548387096777e-05, Loss: 0.5797442197799683
[2023-09-01 03:22:02,811] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 445/1998 [1:27:37<5:52:08, 13.60s/it]09/01/2023 03:22:02 - INFO - __main__ -   Step: 445, LR: 1.6023225806451613e-05, Loss: 0.5393061637878418
[2023-09-01 03:22:17,391] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 446/1998 [1:27:51<5:59:28, 13.90s/it]09/01/2023 03:22:17 - INFO - __main__ -   Step: 446, LR: 1.6012903225806453e-05, Loss: 0.6093419194221497
[2023-09-01 03:22:30,609] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 447/1998 [1:28:05<5:53:58, 13.69s/it]09/01/2023 03:22:30 - INFO - __main__ -   Step: 447, LR: 1.6002580645161293e-05, Loss: 0.5666742920875549
[2023-09-01 03:22:44,142] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 448/1998 [1:28:18<5:52:30, 13.65s/it]09/01/2023 03:22:44 - INFO - __main__ -   Step: 448, LR: 1.599225806451613e-05, Loss: 0.576460599899292
[2023-09-01 03:22:58,518] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 22%|██▏       | 449/1998 [1:28:32<5:57:56, 13.86s/it]09/01/2023 03:22:58 - INFO - __main__ -   Step: 449, LR: 1.598193548387097e-05, Loss: 0.6492677927017212
[2023-09-01 03:23:12,392] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 450/1998 [1:28:46<5:57:46, 13.87s/it]09/01/2023 03:23:12 - INFO - __main__ -   Step: 450, LR: 1.597161290322581e-05, Loss: 0.537429928779602
[2023-09-01 03:23:26,684] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 451/1998 [1:29:01<6:00:49, 13.99s/it]09/01/2023 03:23:26 - INFO - __main__ -   Step: 451, LR: 1.5961290322580648e-05, Loss: 0.5977850556373596
[2023-09-01 03:23:40,269] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 452/1998 [1:29:14<5:57:25, 13.87s/it]09/01/2023 03:23:40 - INFO - __main__ -   Step: 452, LR: 1.5950967741935484e-05, Loss: 0.5581797361373901
[2023-09-01 03:23:56,135] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 453/1998 [1:29:30<6:12:36, 14.47s/it]09/01/2023 03:23:56 - INFO - __main__ -   Step: 453, LR: 1.5940645161290324e-05, Loss: 0.5425158739089966
[2023-09-01 03:24:10,912] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 454/1998 [1:29:45<6:14:44, 14.56s/it]09/01/2023 03:24:10 - INFO - __main__ -   Step: 454, LR: 1.5930322580645164e-05, Loss: 0.5367619395256042
[2023-09-01 03:24:24,601] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 455/1998 [1:29:59<6:07:45, 14.30s/it]09/01/2023 03:24:24 - INFO - __main__ -   Step: 455, LR: 1.5920000000000003e-05, Loss: 0.6081586480140686
[2023-09-01 03:24:38,776] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 456/1998 [1:30:13<6:06:32, 14.26s/it]09/01/2023 03:24:38 - INFO - __main__ -   Step: 456, LR: 1.590967741935484e-05, Loss: 0.5084506273269653
[2023-09-01 03:24:52,315] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 457/1998 [1:30:26<6:00:44, 14.05s/it]09/01/2023 03:24:52 - INFO - __main__ -   Step: 457, LR: 1.589935483870968e-05, Loss: 0.7032973766326904
[2023-09-01 03:25:05,635] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 458/1998 [1:30:40<5:54:54, 13.83s/it]09/01/2023 03:25:05 - INFO - __main__ -   Step: 458, LR: 1.588903225806452e-05, Loss: 0.5637505054473877
[2023-09-01 03:25:19,755] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 459/1998 [1:30:54<5:56:55, 13.92s/it]09/01/2023 03:25:19 - INFO - __main__ -   Step: 459, LR: 1.587870967741936e-05, Loss: 0.5748695731163025
[2023-09-01 03:25:33,024] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 460/1998 [1:31:07<5:51:43, 13.72s/it]09/01/2023 03:25:33 - INFO - __main__ -   Step: 460, LR: 1.5868387096774195e-05, Loss: 0.49865666031837463
[2023-09-01 03:25:46,498] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 461/1998 [1:31:20<5:49:35, 13.65s/it]09/01/2023 03:25:46 - INFO - __main__ -   Step: 461, LR: 1.585806451612903e-05, Loss: 0.48452985286712646
[2023-09-01 03:26:02,145] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 462/1998 [1:31:36<6:04:43, 14.25s/it]09/01/2023 03:26:02 - INFO - __main__ -   Step: 462, LR: 1.584774193548387e-05, Loss: 0.5212345719337463
[2023-09-01 03:26:16,594] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 463/1998 [1:31:51<6:06:02, 14.31s/it]09/01/2023 03:26:16 - INFO - __main__ -   Step: 463, LR: 1.583741935483871e-05, Loss: 0.5674121379852295
[2023-09-01 03:26:29,585] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 464/1998 [1:32:04<5:55:41, 13.91s/it]09/01/2023 03:26:29 - INFO - __main__ -   Step: 464, LR: 1.582709677419355e-05, Loss: 0.6068457365036011
[2023-09-01 03:26:44,487] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 465/1998 [1:32:18<6:03:03, 14.21s/it]09/01/2023 03:26:44 - INFO - __main__ -   Step: 465, LR: 1.5816774193548387e-05, Loss: 0.4691513776779175
[2023-09-01 03:26:58,799] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 466/1998 [1:32:33<6:03:36, 14.24s/it]09/01/2023 03:26:58 - INFO - __main__ -   Step: 466, LR: 1.5806451612903226e-05, Loss: 0.6357558965682983
[2023-09-01 03:27:13,733] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 467/1998 [1:32:48<6:08:40, 14.45s/it]09/01/2023 03:27:13 - INFO - __main__ -   Step: 467, LR: 1.5796129032258066e-05, Loss: 0.5383368730545044
[2023-09-01 03:27:28,017] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 468/1998 [1:33:02<6:07:10, 14.40s/it]09/01/2023 03:27:28 - INFO - __main__ -   Step: 468, LR: 1.5785806451612902e-05, Loss: 0.5377485752105713
[2023-09-01 03:27:41,019] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 23%|██▎       | 469/1998 [1:33:15<5:56:15, 13.98s/it]09/01/2023 03:27:41 - INFO - __main__ -   Step: 469, LR: 1.5775483870967742e-05, Loss: 0.5846508741378784
[2023-09-01 03:27:56,321] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▎       | 470/1998 [1:33:30<6:06:07, 14.38s/it]09/01/2023 03:27:56 - INFO - __main__ -   Step: 470, LR: 1.5765161290322582e-05, Loss: 0.5517324805259705
[2023-09-01 03:28:10,781] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▎       | 471/1998 [1:33:45<6:06:31, 14.40s/it]09/01/2023 03:28:10 - INFO - __main__ -   Step: 471, LR: 1.575483870967742e-05, Loss: 0.6010000705718994
[2023-09-01 03:28:24,676] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▎       | 472/1998 [1:33:59<6:02:24, 14.25s/it]09/01/2023 03:28:24 - INFO - __main__ -   Step: 472, LR: 1.5744516129032258e-05, Loss: 0.6184507012367249
[2023-09-01 03:28:40,532] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▎       | 473/1998 [1:34:14<6:14:25, 14.73s/it]09/01/2023 03:28:40 - INFO - __main__ -   Step: 473, LR: 1.5734193548387097e-05, Loss: 0.49802595376968384
[2023-09-01 03:28:55,187] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▎       | 474/1998 [1:34:29<6:13:35, 14.71s/it]09/01/2023 03:28:55 - INFO - __main__ -   Step: 474, LR: 1.5723870967741937e-05, Loss: 0.5203564763069153
[2023-09-01 03:29:10,005] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 475/1998 [1:34:44<6:14:11, 14.74s/it]09/01/2023 03:29:10 - INFO - __main__ -   Step: 475, LR: 1.5713548387096777e-05, Loss: 0.5067914724349976
[2023-09-01 03:29:23,627] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 476/1998 [1:34:58<6:05:25, 14.41s/it]09/01/2023 03:29:23 - INFO - __main__ -   Step: 476, LR: 1.5703225806451613e-05, Loss: 0.6172372698783875
[2023-09-01 03:29:38,419] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 477/1998 [1:35:12<6:08:07, 14.52s/it]09/01/2023 03:29:38 - INFO - __main__ -   Step: 477, LR: 1.5692903225806453e-05, Loss: 0.5121246576309204
[2023-09-01 03:29:52,567] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 478/1998 [1:35:27<6:05:02, 14.41s/it]09/01/2023 03:29:52 - INFO - __main__ -   Step: 478, LR: 1.5682580645161292e-05, Loss: 0.4956696629524231
[2023-09-01 03:30:07,535] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 479/1998 [1:35:41<6:09:02, 14.58s/it]09/01/2023 03:30:07 - INFO - __main__ -   Step: 479, LR: 1.5672258064516132e-05, Loss: 0.5998237133026123
[2023-09-01 03:30:20,852] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 480/1998 [1:35:55<5:59:13, 14.20s/it]09/01/2023 03:30:20 - INFO - __main__ -   Step: 480, LR: 1.566193548387097e-05, Loss: 0.5794490575790405
[2023-09-01 03:30:35,916] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 481/1998 [1:36:10<6:05:33, 14.46s/it]09/01/2023 03:30:35 - INFO - __main__ -   Step: 481, LR: 1.5651612903225808e-05, Loss: 0.6071949005126953
[2023-09-01 03:30:49,394] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 482/1998 [1:36:23<5:57:53, 14.16s/it]09/01/2023 03:30:49 - INFO - __main__ -   Step: 482, LR: 1.5641290322580648e-05, Loss: 0.6575608253479004
[2023-09-01 03:31:03,742] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 483/1998 [1:36:38<5:59:02, 14.22s/it]09/01/2023 03:31:03 - INFO - __main__ -   Step: 483, LR: 1.5630967741935484e-05, Loss: 0.5529912114143372
[2023-09-01 03:31:17,840] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 484/1998 [1:36:52<5:57:52, 14.18s/it]09/01/2023 03:31:17 - INFO - __main__ -   Step: 484, LR: 1.5620645161290324e-05, Loss: 0.5685153007507324
[2023-09-01 03:31:32,122] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 485/1998 [1:37:06<5:58:24, 14.21s/it]09/01/2023 03:31:32 - INFO - __main__ -   Step: 485, LR: 1.5610322580645163e-05, Loss: 0.6113426089286804
[2023-09-01 03:31:46,535] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 486/1998 [1:37:20<5:59:40, 14.27s/it]09/01/2023 03:31:46 - INFO - __main__ -   Step: 486, LR: 1.5600000000000003e-05, Loss: 0.5840446949005127
[2023-09-01 03:32:00,318] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 487/1998 [1:37:34<5:55:44, 14.13s/it]09/01/2023 03:32:00 - INFO - __main__ -   Step: 487, LR: 1.558967741935484e-05, Loss: 0.549419641494751
[2023-09-01 03:32:15,082] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 488/1998 [1:37:49<6:00:19, 14.32s/it]09/01/2023 03:32:15 - INFO - __main__ -   Step: 488, LR: 1.557935483870968e-05, Loss: 0.5357447862625122
[2023-09-01 03:32:29,019] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 24%|██▍       | 489/1998 [1:38:03<5:57:12, 14.20s/it]09/01/2023 03:32:29 - INFO - __main__ -   Step: 489, LR: 1.556903225806452e-05, Loss: 0.533734917640686
[2023-09-01 03:32:42,733] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 490/1998 [1:38:17<5:53:16, 14.06s/it]09/01/2023 03:32:42 - INFO - __main__ -   Step: 490, LR: 1.555870967741936e-05, Loss: 0.5186859369277954
[2023-09-01 03:32:56,933] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 491/1998 [1:38:31<5:54:07, 14.10s/it]09/01/2023 03:32:56 - INFO - __main__ -   Step: 491, LR: 1.5548387096774195e-05, Loss: 0.6108802556991577
[2023-09-01 03:33:12,830] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 492/1998 [1:38:47<6:07:25, 14.64s/it]09/01/2023 03:33:12 - INFO - __main__ -   Step: 492, LR: 1.5538064516129034e-05, Loss: 0.6386617422103882
[2023-09-01 03:33:28,385] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 493/1998 [1:39:02<6:14:04, 14.91s/it]09/01/2023 03:33:28 - INFO - __main__ -   Step: 493, LR: 1.5527741935483874e-05, Loss: 0.5246149897575378
[2023-09-01 03:33:42,283] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 494/1998 [1:39:16<6:06:11, 14.61s/it]09/01/2023 03:33:42 - INFO - __main__ -   Step: 494, LR: 1.551741935483871e-05, Loss: 0.541704535484314
[2023-09-01 03:33:57,044] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 495/1998 [1:39:31<6:07:05, 14.65s/it]09/01/2023 03:33:57 - INFO - __main__ -   Step: 495, LR: 1.550709677419355e-05, Loss: 0.5250141024589539
[2023-09-01 03:34:10,172] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 496/1998 [1:39:44<5:55:23, 14.20s/it]09/01/2023 03:34:10 - INFO - __main__ -   Step: 496, LR: 1.5496774193548386e-05, Loss: 0.528850793838501
[2023-09-01 03:34:23,612] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 497/1998 [1:39:58<5:49:28, 13.97s/it]09/01/2023 03:34:23 - INFO - __main__ -   Step: 497, LR: 1.5486451612903226e-05, Loss: 0.6880314946174622
[2023-09-01 03:34:37,999] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 498/1998 [1:40:12<5:52:22, 14.09s/it]09/01/2023 03:34:38 - INFO - __main__ -   Step: 498, LR: 1.5476129032258066e-05, Loss: 0.5174802541732788
[2023-09-01 03:34:51,506] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▍       | 499/1998 [1:40:25<5:47:43, 13.92s/it]09/01/2023 03:34:51 - INFO - __main__ -   Step: 499, LR: 1.5465806451612902e-05, Loss: 0.5836334824562073
[2023-09-01 03:35:06,268] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 500/1998 [1:40:40<5:53:48, 14.17s/it]09/01/2023 03:35:06 - INFO - __main__ -   Step: 500, LR: 1.5455483870967742e-05, Loss: 0.5717651844024658
09/01/2023 03:35:06 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500
09/01/2023 03:35:06 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 03:35:06,278] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 03:35:06,284] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 03:35:06,284] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 03:35:06,284] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 03:35:06,284] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 03:35:06,285] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 03:35:06,285] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 03:35:06,299] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 03:35:06,299] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 03:35:06,299] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 03:35:06,300] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 03:35:06,300] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 03:35:06,300] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 03:35:06,300] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 03:35:06,300] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 03:36:04,099] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 03:36:04,099] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 03:36:04,785] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 03:36:04,785] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 03:36:08,046] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 03:36:08,046] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 03:36:08,237] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 03:36:08,238] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 03:36:08,243] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 03:36:08,243] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 03:36:08,243] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 03:36:08,243] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 03:36:08 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/pytorch_model
09/01/2023 03:36:08 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/scheduler.bin
09/01/2023 03:36:08 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_500/random_states_0.pkl
09/01/2023 03:36:08 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:40,  5.54it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:47,  4.74it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:57,  3.86it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:01,  3.62it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.73it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.47it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.46it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.67it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.82it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.89it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.03it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.12it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.17it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.22it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.25it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.26it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.21it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.01it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.92it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.02it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.10it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.16it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.19it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.00it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.63it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.79it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.64it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.86it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.99it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.84it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  3.99it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.89it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.70it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.79it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.94it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.02it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:50,  3.77it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.90it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.00it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.07it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.06it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.80it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.51it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.71it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.57it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:51,  3.47it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.47it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:52,  3.41it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.55it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.46it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.46it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.41it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.75it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.61it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.80it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.86it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.90it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.00it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.04it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:39,  4.10it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.14it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.14it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.15it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.19it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.13it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.18it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.98it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.85it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.80it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.05it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.12it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.84it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.95it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.60it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.72it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.80it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.92it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:35,  4.06it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.92it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.08it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.14it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.10it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.15it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.19it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.03it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:31,  4.13it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:33,  3.87it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.90it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  4.00it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:31,  4.01it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  4.01it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.09it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.10it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.15it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.17it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.20it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.18it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.93it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.02it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.13it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.76it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.93it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.04it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.90it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.01it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.06it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.05it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:26,  4.14it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.17it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.21it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.25it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.28it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.30it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.27it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.31it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.87it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.58it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.78it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.91it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.94it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.08it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:23,  3.92it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.05it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.94it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.09it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.13it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.23it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.26it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.32it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:19,  4.32it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.32it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.35it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:18,  4.39it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.37it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.39it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.43it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.41it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.40it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.40it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.35it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.38it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.35it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:17,  4.27it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.97it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.10it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.20it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.26it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.29it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.32it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:15,  4.32it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.34it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.38it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.41it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.44it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.47it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.46it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.20it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.29it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:42<00:13,  4.29it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.35it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.35it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.14it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.86it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.98it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.10it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.19it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:44<00:11,  4.01it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.14it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.25it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.29it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.29it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:09,  4.30it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.33it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.13it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.12it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.22it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.26it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.32it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.11it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.19it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.25it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.18it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.24it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.31it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.33it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.36it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.39it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.98it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.09it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.18it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.26it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.32it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.38it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.40it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.39it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.40it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:51<00:04,  4.39it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.37it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.38it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.15it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.19it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.22it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.25it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.29it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.32it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.35it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.25it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.31it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.35it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:54<00:01,  4.36it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.39it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.41it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.42it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.44it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.42it/s][A09/01/2023 03:37:04 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 03:37:05 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.97it/s]
09/01/2023 03:37:05 - INFO - __main__ -   Step: 500, Validation Metrics: {'accuracy': 0.8009443570039811, 'f1_micro': 0.800944357003981, 'f1_macro': 0.4041804969586698, 'f1_weighted': 0.7452326347819341, 'f1_1': 0.8877016662258662, 'f1_-1': 0.2276176024279211, 'f1_0': 0.09722222222222222, 'precision_micro': 0.8009443570039811, 'precision_macro': 0.5978309991763067, 'precision_weighted': 0.7527188023544102, 'precision_1': 0.8139489766223688, 'precision_-1': 0.5474452554744526, 'precision_0': 0.43209876543209874, 'recall_micro': 0.8009443570039811, 'recall_macro': 0.3915343141086798, 'recall_weighted': 0.8009443570039811, 'recall_1': 0.9761516984644021, 'recall_-1': 0.14367816091954022, 'recall_0': 0.054773082942097026}
[2023-09-01 03:37:19,802] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 501/1998 [1:42:54<20:47:00, 49.98s/it]09/01/2023 03:37:19 - INFO - __main__ -   Step: 501, LR: 1.544516129032258e-05, Loss: 0.5143262147903442
[2023-09-01 03:37:33,551] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 502/1998 [1:43:08<16:15:09, 39.11s/it]09/01/2023 03:37:33 - INFO - __main__ -   Step: 502, LR: 1.543483870967742e-05, Loss: 0.5299420952796936
[2023-09-01 03:37:47,219] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 503/1998 [1:43:21<13:04:19, 31.48s/it]09/01/2023 03:37:47 - INFO - __main__ -   Step: 503, LR: 1.5424516129032257e-05, Loss: 0.5678783655166626
[2023-09-01 03:38:02,056] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 504/1998 [1:43:36<10:59:29, 26.49s/it]09/01/2023 03:38:02 - INFO - __main__ -   Step: 504, LR: 1.5414193548387097e-05, Loss: 0.5449305772781372
[2023-09-01 03:38:17,622] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 505/1998 [1:43:52<9:37:32, 23.21s/it] 09/01/2023 03:38:17 - INFO - __main__ -   Step: 505, LR: 1.5403870967741937e-05, Loss: 0.5332841873168945
[2023-09-01 03:38:31,453] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 506/1998 [1:44:05<8:27:11, 20.40s/it]09/01/2023 03:38:31 - INFO - __main__ -   Step: 506, LR: 1.5393548387096776e-05, Loss: 0.5363844633102417
[2023-09-01 03:38:46,782] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 507/1998 [1:44:21<7:49:04, 18.88s/it]09/01/2023 03:38:46 - INFO - __main__ -   Step: 507, LR: 1.5383225806451613e-05, Loss: 0.5929828882217407
[2023-09-01 03:39:01,210] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 508/1998 [1:44:35<7:15:37, 17.54s/it]09/01/2023 03:39:01 - INFO - __main__ -   Step: 508, LR: 1.5372903225806452e-05, Loss: 0.6105504035949707
[2023-09-01 03:39:14,922] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 25%|██▌       | 509/1998 [1:44:49<6:46:48, 16.39s/it]09/01/2023 03:39:14 - INFO - __main__ -   Step: 509, LR: 1.5362580645161292e-05, Loss: 0.4915115535259247
[2023-09-01 03:39:29,664] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 510/1998 [1:45:04<6:34:15, 15.90s/it]09/01/2023 03:39:29 - INFO - __main__ -   Step: 510, LR: 1.5352258064516132e-05, Loss: 0.6120186448097229
[2023-09-01 03:39:43,859] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 511/1998 [1:45:18<6:21:19, 15.39s/it]09/01/2023 03:39:43 - INFO - __main__ -   Step: 511, LR: 1.5341935483870968e-05, Loss: 0.5555485486984253
[2023-09-01 03:39:57,484] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 512/1998 [1:45:31<6:07:59, 14.86s/it]09/01/2023 03:39:57 - INFO - __main__ -   Step: 512, LR: 1.5331612903225808e-05, Loss: 0.5742896795272827
[2023-09-01 03:40:12,684] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 513/1998 [1:45:47<6:10:16, 14.96s/it]09/01/2023 03:40:12 - INFO - __main__ -   Step: 513, LR: 1.5321290322580647e-05, Loss: 0.6220654249191284
[2023-09-01 03:40:26,646] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 514/1998 [1:46:01<6:02:37, 14.66s/it]09/01/2023 03:40:26 - INFO - __main__ -   Step: 514, LR: 1.5310967741935484e-05, Loss: 0.5711511373519897
[2023-09-01 03:40:40,194] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 515/1998 [1:46:14<5:54:07, 14.33s/it]09/01/2023 03:40:40 - INFO - __main__ -   Step: 515, LR: 1.5300645161290323e-05, Loss: 0.5870293378829956
[2023-09-01 03:40:54,234] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 516/1998 [1:46:28<5:51:45, 14.24s/it]09/01/2023 03:40:54 - INFO - __main__ -   Step: 516, LR: 1.5290322580645163e-05, Loss: 0.5130889415740967
[2023-09-01 03:41:07,594] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 517/1998 [1:46:42<5:44:59, 13.98s/it]09/01/2023 03:41:07 - INFO - __main__ -   Step: 517, LR: 1.5280000000000003e-05, Loss: 0.5642797350883484
[2023-09-01 03:41:21,211] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 518/1998 [1:46:55<5:42:06, 13.87s/it]09/01/2023 03:41:21 - INFO - __main__ -   Step: 518, LR: 1.526967741935484e-05, Loss: 0.5810482501983643
[2023-09-01 03:41:34,732] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 519/1998 [1:47:09<5:39:17, 13.76s/it]09/01/2023 03:41:34 - INFO - __main__ -   Step: 519, LR: 1.525935483870968e-05, Loss: 0.5585640668869019
[2023-09-01 03:41:49,206] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 520/1998 [1:47:23<5:44:18, 13.98s/it]09/01/2023 03:41:49 - INFO - __main__ -   Step: 520, LR: 1.5249032258064518e-05, Loss: 0.6961110830307007
[2023-09-01 03:42:05,521] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 521/1998 [1:47:39<6:01:20, 14.68s/it]09/01/2023 03:42:05 - INFO - __main__ -   Step: 521, LR: 1.5238709677419356e-05, Loss: 0.5853593349456787
[2023-09-01 03:42:19,686] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 522/1998 [1:47:54<5:57:18, 14.52s/it]09/01/2023 03:42:19 - INFO - __main__ -   Step: 522, LR: 1.5228387096774196e-05, Loss: 0.5470203161239624
[2023-09-01 03:42:33,604] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 523/1998 [1:48:08<5:52:35, 14.34s/it]09/01/2023 03:42:33 - INFO - __main__ -   Step: 523, LR: 1.5218064516129034e-05, Loss: 0.5591795444488525
[2023-09-01 03:42:48,414] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▌       | 524/1998 [1:48:22<5:55:47, 14.48s/it]09/01/2023 03:42:48 - INFO - __main__ -   Step: 524, LR: 1.5207741935483872e-05, Loss: 0.5823980569839478
[2023-09-01 03:43:02,946] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▋       | 525/1998 [1:48:37<5:55:55, 14.50s/it]09/01/2023 03:43:02 - INFO - __main__ -   Step: 525, LR: 1.5197419354838712e-05, Loss: 0.5914103388786316
[2023-09-01 03:43:16,857] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▋       | 526/1998 [1:48:51<5:51:21, 14.32s/it]09/01/2023 03:43:16 - INFO - __main__ -   Step: 526, LR: 1.518709677419355e-05, Loss: 0.5303481817245483
[2023-09-01 03:43:32,239] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▋       | 527/1998 [1:49:06<5:58:54, 14.64s/it]09/01/2023 03:43:32 - INFO - __main__ -   Step: 527, LR: 1.517677419354839e-05, Loss: 0.5177291035652161
[2023-09-01 03:43:45,734] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▋       | 528/1998 [1:49:20<5:50:15, 14.30s/it]09/01/2023 03:43:45 - INFO - __main__ -   Step: 528, LR: 1.5166451612903227e-05, Loss: 0.5655819177627563
[2023-09-01 03:43:59,535] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 26%|██▋       | 529/1998 [1:49:33<5:46:22, 14.15s/it]09/01/2023 03:43:59 - INFO - __main__ -   Step: 529, LR: 1.5156129032258067e-05, Loss: 0.5382250547409058
[2023-09-01 03:44:13,959] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 530/1998 [1:49:48<5:48:10, 14.23s/it]09/01/2023 03:44:13 - INFO - __main__ -   Step: 530, LR: 1.5145806451612905e-05, Loss: 0.5775640606880188
[2023-09-01 03:44:27,411] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 531/1998 [1:50:01<5:42:13, 14.00s/it]09/01/2023 03:44:27 - INFO - __main__ -   Step: 531, LR: 1.5135483870967741e-05, Loss: 0.536179780960083
[2023-09-01 03:44:41,659] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 532/1998 [1:50:16<5:43:50, 14.07s/it]09/01/2023 03:44:41 - INFO - __main__ -   Step: 532, LR: 1.5125161290322581e-05, Loss: 0.6524673104286194
[2023-09-01 03:44:55,548] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 533/1998 [1:50:30<5:42:15, 14.02s/it]09/01/2023 03:44:55 - INFO - __main__ -   Step: 533, LR: 1.5114838709677419e-05, Loss: 0.5356125831604004
[2023-09-01 03:45:08,737] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 534/1998 [1:50:43<5:35:57, 13.77s/it]09/01/2023 03:45:08 - INFO - __main__ -   Step: 534, LR: 1.5104516129032259e-05, Loss: 0.5632075667381287
[2023-09-01 03:45:21,851] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 535/1998 [1:50:56<5:30:56, 13.57s/it]09/01/2023 03:45:21 - INFO - __main__ -   Step: 535, LR: 1.5094193548387097e-05, Loss: 0.6024520397186279
[2023-09-01 03:45:35,508] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 536/1998 [1:51:09<5:31:19, 13.60s/it]09/01/2023 03:45:35 - INFO - __main__ -   Step: 536, LR: 1.5083870967741936e-05, Loss: 0.5507439374923706
[2023-09-01 03:45:50,251] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 537/1998 [1:51:24<5:39:28, 13.94s/it]09/01/2023 03:45:50 - INFO - __main__ -   Step: 537, LR: 1.5073548387096774e-05, Loss: 0.537882924079895
[2023-09-01 03:46:05,035] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 538/1998 [1:51:39<5:45:23, 14.19s/it]09/01/2023 03:46:05 - INFO - __main__ -   Step: 538, LR: 1.5063225806451614e-05, Loss: 0.6255795955657959
[2023-09-01 03:46:18,116] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 539/1998 [1:51:52<5:37:02, 13.86s/it]09/01/2023 03:46:18 - INFO - __main__ -   Step: 539, LR: 1.5052903225806452e-05, Loss: 0.5379806160926819
[2023-09-01 03:46:31,327] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 540/1998 [1:52:05<5:32:04, 13.67s/it]09/01/2023 03:46:31 - INFO - __main__ -   Step: 540, LR: 1.5042580645161292e-05, Loss: 0.5799558162689209
[2023-09-01 03:46:45,136] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 541/1998 [1:52:19<5:32:53, 13.71s/it]09/01/2023 03:46:45 - INFO - __main__ -   Step: 541, LR: 1.503225806451613e-05, Loss: 0.5678068995475769
[2023-09-01 03:46:59,758] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 542/1998 [1:52:34<5:39:18, 13.98s/it]09/01/2023 03:46:59 - INFO - __main__ -   Step: 542, LR: 1.5021935483870968e-05, Loss: 0.5313225388526917
[2023-09-01 03:47:13,236] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 543/1998 [1:52:47<5:35:24, 13.83s/it]09/01/2023 03:47:13 - INFO - __main__ -   Step: 543, LR: 1.5011612903225807e-05, Loss: 0.522704005241394
[2023-09-01 03:47:26,164] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 544/1998 [1:53:00<5:28:36, 13.56s/it]09/01/2023 03:47:26 - INFO - __main__ -   Step: 544, LR: 1.5001290322580645e-05, Loss: 0.5636048316955566
[2023-09-01 03:47:40,407] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 545/1998 [1:53:14<5:33:20, 13.77s/it]09/01/2023 03:47:40 - INFO - __main__ -   Step: 545, LR: 1.4990967741935485e-05, Loss: 0.5203790068626404
[2023-09-01 03:47:54,352] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 546/1998 [1:53:28<5:34:25, 13.82s/it]09/01/2023 03:47:54 - INFO - __main__ -   Step: 546, LR: 1.4980645161290323e-05, Loss: 0.5614822506904602
[2023-09-01 03:48:08,205] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 547/1998 [1:53:42<5:34:26, 13.83s/it]09/01/2023 03:48:08 - INFO - __main__ -   Step: 547, LR: 1.4970322580645163e-05, Loss: 0.6396011114120483
[2023-09-01 03:48:22,771] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 548/1998 [1:53:57<5:39:33, 14.05s/it]09/01/2023 03:48:22 - INFO - __main__ -   Step: 548, LR: 1.496e-05, Loss: 0.5509138107299805
[2023-09-01 03:48:36,505] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 27%|██▋       | 549/1998 [1:54:10<5:37:01, 13.96s/it]09/01/2023 03:48:36 - INFO - __main__ -   Step: 549, LR: 1.494967741935484e-05, Loss: 0.5928200483322144
[2023-09-01 03:48:50,510] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 550/1998 [1:54:24<5:37:08, 13.97s/it]09/01/2023 03:48:50 - INFO - __main__ -   Step: 550, LR: 1.4939354838709678e-05, Loss: 0.6470648050308228
[2023-09-01 03:49:03,582] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 551/1998 [1:54:38<5:30:25, 13.70s/it]09/01/2023 03:49:03 - INFO - __main__ -   Step: 551, LR: 1.4929032258064518e-05, Loss: 0.5775691270828247
[2023-09-01 03:49:18,444] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 552/1998 [1:54:52<5:38:34, 14.05s/it]09/01/2023 03:49:18 - INFO - __main__ -   Step: 552, LR: 1.4918709677419356e-05, Loss: 0.5181635022163391
[2023-09-01 03:49:31,501] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 553/1998 [1:55:05<5:31:10, 13.75s/it]09/01/2023 03:49:31 - INFO - __main__ -   Step: 553, LR: 1.4908387096774196e-05, Loss: 0.5936605334281921
[2023-09-01 03:49:45,775] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 554/1998 [1:55:20<5:34:43, 13.91s/it]09/01/2023 03:49:45 - INFO - __main__ -   Step: 554, LR: 1.4898064516129034e-05, Loss: 0.49855780601501465
[2023-09-01 03:49:59,869] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 555/1998 [1:55:34<5:35:49, 13.96s/it]09/01/2023 03:49:59 - INFO - __main__ -   Step: 555, LR: 1.4887741935483872e-05, Loss: 0.6367327570915222
[2023-09-01 03:50:13,980] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 556/1998 [1:55:48<5:36:39, 14.01s/it]09/01/2023 03:50:13 - INFO - __main__ -   Step: 556, LR: 1.4877419354838711e-05, Loss: 0.5827407836914062
[2023-09-01 03:50:27,539] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 557/1998 [1:56:02<5:33:11, 13.87s/it]09/01/2023 03:50:27 - INFO - __main__ -   Step: 557, LR: 1.486709677419355e-05, Loss: 0.5490230917930603
[2023-09-01 03:50:42,704] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 558/1998 [1:56:17<5:42:15, 14.26s/it]09/01/2023 03:50:42 - INFO - __main__ -   Step: 558, LR: 1.4856774193548389e-05, Loss: 0.5789687037467957
[2023-09-01 03:50:56,408] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 559/1998 [1:56:30<5:38:00, 14.09s/it]09/01/2023 03:50:56 - INFO - __main__ -   Step: 559, LR: 1.4846451612903227e-05, Loss: 0.5782546997070312
[2023-09-01 03:51:10,437] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 560/1998 [1:56:44<5:37:18, 14.07s/it]09/01/2023 03:51:10 - INFO - __main__ -   Step: 560, LR: 1.4836129032258067e-05, Loss: 0.5702768564224243
[2023-09-01 03:51:24,912] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 561/1998 [1:56:59<5:39:57, 14.19s/it]09/01/2023 03:51:24 - INFO - __main__ -   Step: 561, LR: 1.4825806451612905e-05, Loss: 0.530220091342926
[2023-09-01 03:51:39,414] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 562/1998 [1:57:13<5:41:55, 14.29s/it]09/01/2023 03:51:39 - INFO - __main__ -   Step: 562, LR: 1.4815483870967744e-05, Loss: 0.5202850699424744
[2023-09-01 03:51:54,500] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 563/1998 [1:57:28<5:47:25, 14.53s/it]09/01/2023 03:51:54 - INFO - __main__ -   Step: 563, LR: 1.4805161290322582e-05, Loss: 0.5231497287750244
[2023-09-01 03:52:08,277] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 564/1998 [1:57:42<5:41:48, 14.30s/it]09/01/2023 03:52:08 - INFO - __main__ -   Step: 564, LR: 1.4794838709677422e-05, Loss: 0.5541192293167114
[2023-09-01 03:52:22,373] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 565/1998 [1:57:56<5:40:06, 14.24s/it]09/01/2023 03:52:22 - INFO - __main__ -   Step: 565, LR: 1.478451612903226e-05, Loss: 0.5806310176849365
[2023-09-01 03:52:36,861] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 566/1998 [1:58:11<5:41:38, 14.31s/it]09/01/2023 03:52:36 - INFO - __main__ -   Step: 566, LR: 1.47741935483871e-05, Loss: 0.48132553696632385
[2023-09-01 03:52:51,424] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 567/1998 [1:58:25<5:43:10, 14.39s/it]09/01/2023 03:52:51 - INFO - __main__ -   Step: 567, LR: 1.4763870967741936e-05, Loss: 0.5376524925231934
[2023-09-01 03:53:06,375] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 568/1998 [1:58:40<5:46:57, 14.56s/it]09/01/2023 03:53:06 - INFO - __main__ -   Step: 568, LR: 1.4753548387096774e-05, Loss: 0.5074424743652344
[2023-09-01 03:53:21,219] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 28%|██▊       | 569/1998 [1:58:55<5:48:45, 14.64s/it]09/01/2023 03:53:21 - INFO - __main__ -   Step: 569, LR: 1.4743225806451614e-05, Loss: 0.6030994653701782
[2023-09-01 03:53:35,486] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▊       | 570/1998 [1:59:09<5:45:49, 14.53s/it]09/01/2023 03:53:35 - INFO - __main__ -   Step: 570, LR: 1.4732903225806452e-05, Loss: 0.6047171950340271
[2023-09-01 03:53:48,402] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▊       | 571/1998 [1:59:22<5:34:03, 14.05s/it]09/01/2023 03:53:48 - INFO - __main__ -   Step: 571, LR: 1.4722580645161291e-05, Loss: 0.630807638168335
[2023-09-01 03:54:02,159] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▊       | 572/1998 [1:59:36<5:31:46, 13.96s/it]09/01/2023 03:54:02 - INFO - __main__ -   Step: 572, LR: 1.471225806451613e-05, Loss: 0.5932837128639221
[2023-09-01 03:54:16,103] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▊       | 573/1998 [1:59:50<5:31:25, 13.95s/it]09/01/2023 03:54:16 - INFO - __main__ -   Step: 573, LR: 1.4701935483870967e-05, Loss: 0.5287728309631348
[2023-09-01 03:54:30,937] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▊       | 574/1998 [2:00:05<5:37:26, 14.22s/it]09/01/2023 03:54:30 - INFO - __main__ -   Step: 574, LR: 1.4691612903225807e-05, Loss: 0.5697672963142395
[2023-09-01 03:54:45,139] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 575/1998 [2:00:19<5:37:06, 14.21s/it]09/01/2023 03:54:45 - INFO - __main__ -   Step: 575, LR: 1.4681290322580645e-05, Loss: 0.5727388858795166
[2023-09-01 03:54:59,558] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 576/1998 [2:00:34<5:38:19, 14.28s/it]09/01/2023 03:54:59 - INFO - __main__ -   Step: 576, LR: 1.4670967741935485e-05, Loss: 0.5664206743240356
[2023-09-01 03:55:13,168] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 577/1998 [2:00:47<5:33:21, 14.08s/it]09/01/2023 03:55:13 - INFO - __main__ -   Step: 577, LR: 1.4660645161290323e-05, Loss: 0.5927364826202393
[2023-09-01 03:55:28,207] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 578/1998 [2:01:02<5:39:57, 14.36s/it]09/01/2023 03:55:28 - INFO - __main__ -   Step: 578, LR: 1.4650322580645162e-05, Loss: 0.6050856709480286
[2023-09-01 03:55:42,123] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 579/1998 [2:01:16<5:36:32, 14.23s/it]09/01/2023 03:55:42 - INFO - __main__ -   Step: 579, LR: 1.464e-05, Loss: 0.643936038017273
[2023-09-01 03:55:57,175] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 580/1998 [2:01:31<5:42:08, 14.48s/it]09/01/2023 03:55:57 - INFO - __main__ -   Step: 580, LR: 1.462967741935484e-05, Loss: 0.4511122703552246
[2023-09-01 03:56:11,853] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 581/1998 [2:01:46<5:43:18, 14.54s/it]09/01/2023 03:56:11 - INFO - __main__ -   Step: 581, LR: 1.4619354838709678e-05, Loss: 0.594947338104248
[2023-09-01 03:56:26,472] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 582/1998 [2:02:00<5:43:39, 14.56s/it]09/01/2023 03:56:26 - INFO - __main__ -   Step: 582, LR: 1.4609032258064518e-05, Loss: 0.5372114777565002
[2023-09-01 03:56:40,731] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 583/1998 [2:02:15<5:41:16, 14.47s/it]09/01/2023 03:56:40 - INFO - __main__ -   Step: 583, LR: 1.4598709677419356e-05, Loss: 0.5081204175949097
[2023-09-01 03:56:56,671] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 584/1998 [2:02:31<5:51:25, 14.91s/it]09/01/2023 03:56:56 - INFO - __main__ -   Step: 584, LR: 1.4588387096774195e-05, Loss: 0.5202568769454956
[2023-09-01 03:57:10,508] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 585/1998 [2:02:44<5:43:34, 14.59s/it]09/01/2023 03:57:10 - INFO - __main__ -   Step: 585, LR: 1.4578064516129033e-05, Loss: 0.5864531993865967
[2023-09-01 03:57:24,221] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 586/1998 [2:02:58<5:37:08, 14.33s/it]09/01/2023 03:57:24 - INFO - __main__ -   Step: 586, LR: 1.4567741935483871e-05, Loss: 0.5095993280410767
[2023-09-01 03:57:37,208] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 587/1998 [2:03:11<5:27:27, 13.92s/it]09/01/2023 03:57:37 - INFO - __main__ -   Step: 587, LR: 1.4557419354838711e-05, Loss: 0.5745946168899536
[2023-09-01 03:57:51,416] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 588/1998 [2:03:25<5:29:13, 14.01s/it]09/01/2023 03:57:51 - INFO - __main__ -   Step: 588, LR: 1.4547096774193549e-05, Loss: 0.5723027586936951
[2023-09-01 03:58:04,652] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 29%|██▉       | 589/1998 [2:03:39<5:23:32, 13.78s/it]09/01/2023 03:58:04 - INFO - __main__ -   Step: 589, LR: 1.4536774193548389e-05, Loss: 0.5608394145965576
[2023-09-01 03:58:18,051] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 590/1998 [2:03:52<5:20:39, 13.66s/it]09/01/2023 03:58:18 - INFO - __main__ -   Step: 590, LR: 1.4526451612903227e-05, Loss: 0.4993766248226166
[2023-09-01 03:58:33,168] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 591/1998 [2:04:07<5:30:38, 14.10s/it]09/01/2023 03:58:33 - INFO - __main__ -   Step: 591, LR: 1.4516129032258066e-05, Loss: 0.5885796546936035
[2023-09-01 03:58:48,423] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 592/1998 [2:04:22<5:38:31, 14.45s/it]09/01/2023 03:58:48 - INFO - __main__ -   Step: 592, LR: 1.4505806451612904e-05, Loss: 0.5452184677124023
[2023-09-01 03:59:02,248] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 593/1998 [2:04:36<5:33:55, 14.26s/it]09/01/2023 03:59:02 - INFO - __main__ -   Step: 593, LR: 1.4495483870967744e-05, Loss: 0.5249334573745728
[2023-09-01 03:59:15,918] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 594/1998 [2:04:50<5:29:32, 14.08s/it]09/01/2023 03:59:15 - INFO - __main__ -   Step: 594, LR: 1.4485161290322582e-05, Loss: 0.5523266196250916
[2023-09-01 03:59:30,634] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 595/1998 [2:05:05<5:33:44, 14.27s/it]09/01/2023 03:59:30 - INFO - __main__ -   Step: 595, LR: 1.4474838709677422e-05, Loss: 0.49970918893814087
[2023-09-01 03:59:45,203] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 596/1998 [2:05:19<5:35:35, 14.36s/it]09/01/2023 03:59:45 - INFO - __main__ -   Step: 596, LR: 1.446451612903226e-05, Loss: 0.5172134637832642
[2023-09-01 03:59:59,498] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 597/1998 [2:05:33<5:34:52, 14.34s/it]09/01/2023 03:59:59 - INFO - __main__ -   Step: 597, LR: 1.44541935483871e-05, Loss: 0.6271063089370728
[2023-09-01 04:00:14,476] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 598/1998 [2:05:48<5:39:05, 14.53s/it]09/01/2023 04:00:14 - INFO - __main__ -   Step: 598, LR: 1.4443870967741937e-05, Loss: 0.6393766403198242
[2023-09-01 04:00:28,670] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|██▉       | 599/1998 [2:06:03<5:36:28, 14.43s/it]09/01/2023 04:00:28 - INFO - __main__ -   Step: 599, LR: 1.4433548387096775e-05, Loss: 0.5050598382949829
[2023-09-01 04:00:41,882] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 600/1998 [2:06:16<5:27:43, 14.07s/it]09/01/2023 04:00:41 - INFO - __main__ -   Step: 600, LR: 1.4423225806451615e-05, Loss: 0.6787577271461487
09/01/2023 04:00:41 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600
09/01/2023 04:00:41 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 04:00:41,892] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 04:00:41,898] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 04:00:41,898] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 04:00:41,898] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 04:00:41,898] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 04:00:41,899] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 04:00:41,899] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 04:00:41,912] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 04:00:41,912] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 04:00:41,913] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 04:00:41,914] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 04:00:41,915] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 04:00:41,915] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 04:00:41,915] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 04:00:41,915] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 04:01:43,027] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 04:01:43,027] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 04:01:44,322] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 04:01:44,322] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 04:01:45,471] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 04:01:45,471] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 04:01:45,595] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 04:01:45,596] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 04:01:45,599] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:01:45,599] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:01:45,599] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:01:45,600] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 04:01:45 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/pytorch_model
09/01/2023 04:01:45 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/scheduler.bin
09/01/2023 04:01:45 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_600/random_states_0.pkl
09/01/2023 04:01:45 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:39,  5.68it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:46,  4.80it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:57,  3.91it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:01,  3.64it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.74it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.46it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:07,  3.28it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.45it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<01:00,  3.62it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:57,  3.78it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.88it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  3.99it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.05it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.13it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.18it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:50,  4.18it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.21it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.19it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:52,  3.99it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:53,  3.88it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  3.99it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.08it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.11it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:49,  4.13it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.96it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.60it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.78it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.63it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.82it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.96it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.83it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:49,  3.96it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:50,  3.86it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:09<00:52,  3.68it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.78it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.91it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.00it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:10<00:50,  3.76it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.89it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  3.98it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.05it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.05it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.79it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.51it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.69it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.55it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.43it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.47it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:52,  3.41it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.54it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.41it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.45it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.40it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.75it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.60it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.78it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.84it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:16<00:42,  3.90it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.97it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:41,  4.01it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.07it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.10it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.14it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.14it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.16it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.12it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.16it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.97it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.83it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:19<00:40,  3.78it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.89it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.03it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:37,  4.09it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:20<00:39,  3.81it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:38,  3.93it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.59it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.71it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:37,  3.91it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.05it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.92it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.96it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:34,  4.05it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.11it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.07it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:24<00:32,  4.12it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.13it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  3.99it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.07it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.82it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.86it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.96it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.99it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:31,  4.05it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.06it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.10it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:27<00:29,  4.12it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.15it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:29,  4.15it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.79it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:28<00:30,  3.91it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.00it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:29,  4.03it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.11it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.75it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.92it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:28,  4.01it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.88it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:30<00:27,  4.00it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.06it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.07it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:26,  4.15it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:31<00:25,  4.16it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.20it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.22it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.25it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.25it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:24,  4.24it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.28it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.86it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:33<00:27,  3.56it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:26,  3.75it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:25,  3.87it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.92it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:34<00:23,  4.05it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.88it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.04it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.93it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:35<00:22,  4.05it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.11it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.18it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.22it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.28it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:20,  4.28it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.27it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.30it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.35it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:37<00:18,  4.33it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.35it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.36it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.37it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:38<00:17,  4.34it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.37it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.33it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.33it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.31it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.24it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.80it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:18,  3.94it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.06it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.13it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.20it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.23it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.28it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:41<00:15,  4.27it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.30it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.34it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.36it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:42<00:13,  4.37it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.39it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.39it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:14,  4.12it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:43<00:13,  4.19it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.20it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.25it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.25it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:13,  4.07it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.81it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.93it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.03it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.12it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.97it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.08it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:11,  4.17it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.24it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:46<00:10,  4.25it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.26it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.30it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:10,  4.10it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:47<00:09,  4.09it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.17it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:09,  4.21it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.27it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:48<00:08,  4.08it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.14it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.22it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.16it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:49<00:07,  4.23it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.28it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.30it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.33it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.35it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.97it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.06it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:06,  4.15it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.22it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:51<00:05,  4.28it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.31it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.33it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.36it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:52<00:04,  4.37it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.36it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.36it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.35it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:53<00:03,  4.13it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.16it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.19it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.20it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.24it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:54<00:02,  4.28it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.31it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.23it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.27it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:55<00:01,  4.32it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.32it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.36it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.38it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:56<00:00,  4.39it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:56<00:00,  4.40it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.41it/s][A09/01/2023 04:02:42 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 04:02:42 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:02:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.95it/s]
09/01/2023 04:02:43 - INFO - __main__ -   Step: 600, Validation Metrics: {'accuracy': 0.7939079714841218, 'f1_micro': 0.7939079714841218, 'f1_macro': 0.41813387884408354, 'f1_weighted': 0.7520909863185268, 'f1_1': 0.8816379450056724, 'f1_-1': 0.33072164948453603, 'f1_0': 0.042042042042042045, 'precision_micro': 0.7939079714841218, 'precision_macro': 0.6027786219514866, 'precision_weighted': 0.7533418565927872, 'precision_1': 0.8229954614220878, 'precision_-1': 0.4668218859138533, 'precision_0': 0.5185185185185185, 'recall_micro': 0.7939079714841218, 'recall_macro': 0.40908479290356164, 'recall_weighted': 0.7939079714841218, 'recall_1': 0.949278734295021, 'recall_-1': 0.256066411238825, 'recall_0': 0.02190923317683881}
[2023-09-01 04:02:58,911] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 601/1998 [2:08:33<19:46:23, 50.95s/it]09/01/2023 04:02:58 - INFO - __main__ -   Step: 601, LR: 1.4412903225806453e-05, Loss: 0.5663882493972778
[2023-09-01 04:03:12,238] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 602/1998 [2:08:46<15:22:54, 39.67s/it]09/01/2023 04:03:12 - INFO - __main__ -   Step: 602, LR: 1.4402580645161291e-05, Loss: 0.5154076218605042
[2023-09-01 04:03:26,626] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 603/1998 [2:09:01<12:25:55, 32.08s/it]09/01/2023 04:03:26 - INFO - __main__ -   Step: 603, LR: 1.4392258064516129e-05, Loss: 0.549028754234314
[2023-09-01 04:03:41,333] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 604/1998 [2:09:15<10:24:16, 26.87s/it]09/01/2023 04:03:41 - INFO - __main__ -   Step: 604, LR: 1.4381935483870967e-05, Loss: 0.5872315168380737
[2023-09-01 04:03:55,436] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 605/1998 [2:09:29<8:54:54, 23.04s/it] 09/01/2023 04:03:55 - INFO - __main__ -   Step: 605, LR: 1.4371612903225807e-05, Loss: 0.582355260848999
[2023-09-01 04:04:10,162] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 606/1998 [2:09:44<7:56:39, 20.55s/it]09/01/2023 04:04:10 - INFO - __main__ -   Step: 606, LR: 1.4361290322580645e-05, Loss: 0.5156711339950562
[2023-09-01 04:04:26,213] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 607/1998 [2:10:00<7:25:03, 19.20s/it]09/01/2023 04:04:26 - INFO - __main__ -   Step: 607, LR: 1.4350967741935484e-05, Loss: 0.5252786874771118
[2023-09-01 04:04:39,729] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 608/1998 [2:10:14<6:45:15, 17.49s/it]09/01/2023 04:04:39 - INFO - __main__ -   Step: 608, LR: 1.4340645161290322e-05, Loss: 0.5606955885887146
[2023-09-01 04:04:55,134] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 30%|███       | 609/1998 [2:10:29<6:30:27, 16.87s/it]09/01/2023 04:04:55 - INFO - __main__ -   Step: 609, LR: 1.4330322580645162e-05, Loss: 0.4804905652999878
[2023-09-01 04:05:09,760] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 610/1998 [2:10:44<6:14:37, 16.19s/it]09/01/2023 04:05:09 - INFO - __main__ -   Step: 610, LR: 1.432e-05, Loss: 0.560968279838562
[2023-09-01 04:05:23,536] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 611/1998 [2:10:57<5:57:35, 15.47s/it]09/01/2023 04:05:23 - INFO - __main__ -   Step: 611, LR: 1.430967741935484e-05, Loss: 0.5433366298675537
[2023-09-01 04:05:39,033] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 612/1998 [2:11:13<5:57:31, 15.48s/it]09/01/2023 04:05:39 - INFO - __main__ -   Step: 612, LR: 1.4299354838709678e-05, Loss: 0.4736914336681366
[2023-09-01 04:05:52,194] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 613/1998 [2:11:26<5:41:13, 14.78s/it]09/01/2023 04:05:52 - INFO - __main__ -   Step: 613, LR: 1.4289032258064517e-05, Loss: 0.5280351638793945
[2023-09-01 04:06:06,099] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 614/1998 [2:11:40<5:34:54, 14.52s/it]09/01/2023 04:06:06 - INFO - __main__ -   Step: 614, LR: 1.4278709677419355e-05, Loss: 0.5906237363815308
[2023-09-01 04:06:20,546] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 615/1998 [2:11:55<5:34:10, 14.50s/it]09/01/2023 04:06:20 - INFO - __main__ -   Step: 615, LR: 1.4268387096774195e-05, Loss: 0.5075627565383911
[2023-09-01 04:06:34,900] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 616/1998 [2:12:09<5:32:56, 14.45s/it]09/01/2023 04:06:34 - INFO - __main__ -   Step: 616, LR: 1.4258064516129033e-05, Loss: 0.5413982272148132
[2023-09-01 04:06:48,548] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 617/1998 [2:12:23<5:27:07, 14.21s/it]09/01/2023 04:06:48 - INFO - __main__ -   Step: 617, LR: 1.4247741935483873e-05, Loss: 0.5532487630844116
[2023-09-01 04:07:03,072] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 618/1998 [2:12:37<5:29:02, 14.31s/it]09/01/2023 04:07:03 - INFO - __main__ -   Step: 618, LR: 1.423741935483871e-05, Loss: 0.5979281663894653
[2023-09-01 04:07:17,670] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 619/1998 [2:12:52<5:30:48, 14.39s/it]09/01/2023 04:07:17 - INFO - __main__ -   Step: 619, LR: 1.4227096774193549e-05, Loss: 0.5544484853744507
[2023-09-01 04:07:31,556] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 620/1998 [2:13:06<5:27:04, 14.24s/it]09/01/2023 04:07:31 - INFO - __main__ -   Step: 620, LR: 1.4216774193548388e-05, Loss: 0.5452905893325806
[2023-09-01 04:07:45,445] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 621/1998 [2:13:19<5:24:24, 14.14s/it]09/01/2023 04:07:45 - INFO - __main__ -   Step: 621, LR: 1.4206451612903226e-05, Loss: 0.5847973227500916
[2023-09-01 04:08:00,434] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 622/1998 [2:13:34<5:30:03, 14.39s/it]09/01/2023 04:08:00 - INFO - __main__ -   Step: 622, LR: 1.4196129032258066e-05, Loss: 0.567467212677002
[2023-09-01 04:08:14,393] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 623/1998 [2:13:48<5:26:49, 14.26s/it]09/01/2023 04:08:14 - INFO - __main__ -   Step: 623, LR: 1.4185806451612904e-05, Loss: 0.5480588674545288
[2023-09-01 04:08:29,923] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███       | 624/1998 [2:14:04<5:35:18, 14.64s/it]09/01/2023 04:08:29 - INFO - __main__ -   Step: 624, LR: 1.4175483870967744e-05, Loss: 0.5460697412490845
[2023-09-01 04:08:43,694] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███▏      | 625/1998 [2:14:18<5:29:04, 14.38s/it]09/01/2023 04:08:43 - INFO - __main__ -   Step: 625, LR: 1.4165161290322582e-05, Loss: 0.4755953550338745
[2023-09-01 04:08:57,808] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███▏      | 626/1998 [2:14:32<5:27:00, 14.30s/it]09/01/2023 04:08:57 - INFO - __main__ -   Step: 626, LR: 1.4154838709677421e-05, Loss: 0.556054949760437
[2023-09-01 04:09:10,646] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███▏      | 627/1998 [2:14:45<5:16:44, 13.86s/it]09/01/2023 04:09:10 - INFO - __main__ -   Step: 627, LR: 1.414451612903226e-05, Loss: 0.5896629095077515
[2023-09-01 04:09:23,824] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███▏      | 628/1998 [2:14:58<5:11:49, 13.66s/it]09/01/2023 04:09:23 - INFO - __main__ -   Step: 628, LR: 1.41341935483871e-05, Loss: 0.575232982635498
[2023-09-01 04:09:38,870] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 31%|███▏      | 629/1998 [2:15:13<5:21:06, 14.07s/it]09/01/2023 04:09:38 - INFO - __main__ -   Step: 629, LR: 1.4123870967741937e-05, Loss: 0.5532515048980713
[2023-09-01 04:09:53,092] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 630/1998 [2:15:27<5:21:53, 14.12s/it]09/01/2023 04:09:53 - INFO - __main__ -   Step: 630, LR: 1.4113548387096777e-05, Loss: 0.5558784008026123
[2023-09-01 04:10:07,308] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 631/1998 [2:15:41<5:22:19, 14.15s/it]09/01/2023 04:10:07 - INFO - __main__ -   Step: 631, LR: 1.4103225806451615e-05, Loss: 0.5835236310958862
[2023-09-01 04:10:21,331] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 632/1998 [2:15:55<5:21:14, 14.11s/it]09/01/2023 04:10:21 - INFO - __main__ -   Step: 632, LR: 1.4092903225806453e-05, Loss: 0.6251420974731445
[2023-09-01 04:10:37,345] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 633/1998 [2:16:11<5:34:00, 14.68s/it]09/01/2023 04:10:37 - INFO - __main__ -   Step: 633, LR: 1.4082580645161292e-05, Loss: 0.5888185501098633
[2023-09-01 04:10:52,338] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 634/1998 [2:16:26<5:35:52, 14.77s/it]09/01/2023 04:10:52 - INFO - __main__ -   Step: 634, LR: 1.407225806451613e-05, Loss: 0.5755725502967834
[2023-09-01 04:11:05,647] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 635/1998 [2:16:40<5:25:38, 14.33s/it]09/01/2023 04:11:05 - INFO - __main__ -   Step: 635, LR: 1.406193548387097e-05, Loss: 0.6057952642440796
[2023-09-01 04:11:19,286] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 636/1998 [2:16:53<5:20:39, 14.13s/it]09/01/2023 04:11:19 - INFO - __main__ -   Step: 636, LR: 1.4051612903225808e-05, Loss: 0.5515527725219727
[2023-09-01 04:11:33,400] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 637/1998 [2:17:07<5:20:20, 14.12s/it]09/01/2023 04:11:33 - INFO - __main__ -   Step: 637, LR: 1.4041290322580648e-05, Loss: 0.5698378682136536
[2023-09-01 04:11:47,361] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 638/1998 [2:17:21<5:19:00, 14.07s/it]09/01/2023 04:11:47 - INFO - __main__ -   Step: 638, LR: 1.4030967741935484e-05, Loss: 0.6300657391548157
[2023-09-01 04:12:03,173] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 639/1998 [2:17:37<5:30:35, 14.60s/it]09/01/2023 04:12:03 - INFO - __main__ -   Step: 639, LR: 1.4020645161290322e-05, Loss: 0.5447933077812195
[2023-09-01 04:12:19,645] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 640/1998 [2:17:54<5:43:05, 15.16s/it]09/01/2023 04:12:19 - INFO - __main__ -   Step: 640, LR: 1.4010322580645162e-05, Loss: 0.6003159284591675
[2023-09-01 04:12:34,323] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 641/1998 [2:18:08<5:39:34, 15.01s/it]09/01/2023 04:12:34 - INFO - __main__ -   Step: 641, LR: 1.4e-05, Loss: 0.5670595169067383
[2023-09-01 04:12:50,971] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 642/1998 [2:18:25<5:50:23, 15.50s/it]09/01/2023 04:12:50 - INFO - __main__ -   Step: 642, LR: 1.398967741935484e-05, Loss: 0.48903751373291016
[2023-09-01 04:13:04,857] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 643/1998 [2:18:39<5:39:10, 15.02s/it]09/01/2023 04:13:04 - INFO - __main__ -   Step: 643, LR: 1.3979354838709677e-05, Loss: 0.5587890148162842
[2023-09-01 04:13:20,366] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 644/1998 [2:18:54<5:42:14, 15.17s/it]09/01/2023 04:13:20 - INFO - __main__ -   Step: 644, LR: 1.3969032258064517e-05, Loss: 0.4863239526748657
[2023-09-01 04:13:34,655] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 645/1998 [2:19:09<5:36:03, 14.90s/it]09/01/2023 04:13:34 - INFO - __main__ -   Step: 645, LR: 1.3958709677419355e-05, Loss: 0.4983612596988678
[2023-09-01 04:13:49,862] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 646/1998 [2:19:24<5:37:52, 14.99s/it]09/01/2023 04:13:49 - INFO - __main__ -   Step: 646, LR: 1.3948387096774195e-05, Loss: 0.5901678204536438
[2023-09-01 04:14:03,200] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 647/1998 [2:19:37<5:26:25, 14.50s/it]09/01/2023 04:14:03 - INFO - __main__ -   Step: 647, LR: 1.3938064516129033e-05, Loss: 0.5576598048210144
[2023-09-01 04:14:17,580] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 648/1998 [2:19:52<5:25:23, 14.46s/it]09/01/2023 04:14:17 - INFO - __main__ -   Step: 648, LR: 1.3927741935483872e-05, Loss: 0.5437871813774109
[2023-09-01 04:14:31,604] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 32%|███▏      | 649/1998 [2:20:06<5:22:12, 14.33s/it]09/01/2023 04:14:31 - INFO - __main__ -   Step: 649, LR: 1.391741935483871e-05, Loss: 0.5946101546287537
[2023-09-01 04:14:45,352] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 650/1998 [2:20:19<5:18:02, 14.16s/it]09/01/2023 04:14:45 - INFO - __main__ -   Step: 650, LR: 1.3907096774193548e-05, Loss: 0.5549284219741821
[2023-09-01 04:14:59,752] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 651/1998 [2:20:34<5:19:26, 14.23s/it]09/01/2023 04:14:59 - INFO - __main__ -   Step: 651, LR: 1.3896774193548388e-05, Loss: 0.5949705839157104
[2023-09-01 04:15:14,002] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 652/1998 [2:20:48<5:19:20, 14.24s/it]09/01/2023 04:15:14 - INFO - __main__ -   Step: 652, LR: 1.3886451612903226e-05, Loss: 0.5501936674118042
[2023-09-01 04:15:28,113] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 653/1998 [2:21:02<5:18:16, 14.20s/it]09/01/2023 04:15:28 - INFO - __main__ -   Step: 653, LR: 1.3876129032258066e-05, Loss: 0.5520431995391846
[2023-09-01 04:15:42,607] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 654/1998 [2:21:17<5:20:01, 14.29s/it]09/01/2023 04:15:42 - INFO - __main__ -   Step: 654, LR: 1.3865806451612904e-05, Loss: 0.5129178762435913
[2023-09-01 04:15:56,659] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 655/1998 [2:21:31<5:18:12, 14.22s/it]09/01/2023 04:15:56 - INFO - __main__ -   Step: 655, LR: 1.3855483870967743e-05, Loss: 0.643692135810852
[2023-09-01 04:16:10,024] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 656/1998 [2:21:44<5:12:15, 13.96s/it]09/01/2023 04:16:10 - INFO - __main__ -   Step: 656, LR: 1.3845161290322581e-05, Loss: 0.5506430864334106
[2023-09-01 04:16:24,079] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 657/1998 [2:21:58<5:12:39, 13.99s/it]09/01/2023 04:16:24 - INFO - __main__ -   Step: 657, LR: 1.3834838709677421e-05, Loss: 0.5946481227874756
[2023-09-01 04:16:39,132] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 658/1998 [2:22:13<5:19:33, 14.31s/it]09/01/2023 04:16:39 - INFO - __main__ -   Step: 658, LR: 1.3824516129032259e-05, Loss: 0.6139117479324341
[2023-09-01 04:16:53,342] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 659/1998 [2:22:27<5:18:39, 14.28s/it]09/01/2023 04:16:53 - INFO - __main__ -   Step: 659, LR: 1.3814193548387099e-05, Loss: 0.5627806782722473
[2023-09-01 04:17:07,593] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 660/1998 [2:22:42<5:18:14, 14.27s/it]09/01/2023 04:17:07 - INFO - __main__ -   Step: 660, LR: 1.3803870967741937e-05, Loss: 0.5338371396064758
[2023-09-01 04:17:21,201] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 661/1998 [2:22:55<5:13:34, 14.07s/it]09/01/2023 04:17:21 - INFO - __main__ -   Step: 661, LR: 1.3793548387096777e-05, Loss: 0.6138445138931274
[2023-09-01 04:17:34,208] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 662/1998 [2:23:08<5:06:13, 13.75s/it]09/01/2023 04:17:34 - INFO - __main__ -   Step: 662, LR: 1.3783225806451614e-05, Loss: 0.591981053352356
[2023-09-01 04:17:47,856] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 663/1998 [2:23:22<5:05:17, 13.72s/it]09/01/2023 04:17:47 - INFO - __main__ -   Step: 663, LR: 1.3772903225806452e-05, Loss: 0.5841126441955566
[2023-09-01 04:18:02,824] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 664/1998 [2:23:37<5:13:22, 14.10s/it]09/01/2023 04:18:02 - INFO - __main__ -   Step: 664, LR: 1.3762580645161292e-05, Loss: 0.5888848304748535
[2023-09-01 04:18:17,407] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 665/1998 [2:23:51<5:16:23, 14.24s/it]09/01/2023 04:18:17 - INFO - __main__ -   Step: 665, LR: 1.375225806451613e-05, Loss: 0.5792456865310669
 33%|███▎      | 666/1998 [2:23:59<4:30:45, 12.20s/it]09/01/2023 04:18:24 - INFO - __main__ -   Step: 666, LR: 1.374193548387097e-05, Loss: 0.36730849742889404
09/01/2023 04:18:24 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0
09/01/2023 04:18:24 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 04:18:24,842] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 04:18:24,848] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 04:18:24,848] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 04:18:24,848] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 04:18:24,848] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 04:18:24,849] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 04:18:24,849] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 04:18:24,862] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 04:18:24,862] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 04:18:24,862] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 04:18:24,863] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 04:18:24,864] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 04:18:24,864] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 04:18:24,864] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 04:18:24,864] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
 33%|███▎      | 666/1998 [2:24:17<4:30:45, 12.20s/it][2023-09-01 04:19:23,721] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 04:19:23,721] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 04:19:24,186] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 04:19:24,186] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 04:19:26,411] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 04:19:26,412] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 04:19:27,281] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 04:19:27,281] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 04:19:27,285] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:19:27,285] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:19:27,285] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:19:27,285] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 04:19:27 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/pytorch_model
09/01/2023 04:19:27 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/scheduler.bin
09/01/2023 04:19:27 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_0/random_states_0.pkl
09/01/2023 04:19:27 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.93it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.93it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.97it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.68it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:58,  3.77it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.49it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.30it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.47it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.66it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.81it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.89it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.01it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.09it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.15it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.21it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.25it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.26it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.22it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.01it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:53,  3.90it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.00it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.07it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.13it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.18it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.99it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.61it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.80it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.64it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.86it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.97it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.83it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  3.98it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:50,  3.87it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.68it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.79it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.93it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.02it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:50,  3.77it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.90it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.01it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.08it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.09it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.82it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.52it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.70it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.57it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.44it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.48it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:52,  3.41it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:50,  3.54it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.45it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.40it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.45it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.40it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.76it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.60it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.77it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.84it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:43,  3.88it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.00it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.03it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.08it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.13it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.16it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.17it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.19it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.14it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.18it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.97it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.84it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.80it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.05it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.11it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.83it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.97it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.61it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.71it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.78it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.85it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.92it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.95it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:35,  4.05it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.92it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.94it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.06it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.14it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.09it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.14it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.18it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.02it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.09it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:34,  3.83it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.87it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.96it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.98it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  3.99it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.08it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.09it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.14it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.18it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:28,  4.22it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.19it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.81it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.94it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.02it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.05it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.12it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.76it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:28,  3.94it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.04it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.89it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.01it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.07it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.10it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.17it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.19it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:24,  4.24it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.26it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.27it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.27it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.25it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.31it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.87it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.61it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.80it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.92it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.94it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.06it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.89it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.03it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.93it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.06it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.11it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.21it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.24it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.29it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:20,  4.29it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.29it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.32it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.34it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.35it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.37it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.40it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.37it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.35it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.36it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.33it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.35it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.30it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.24it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.79it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.95it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.06it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.15it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.23it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.26it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.31it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:14,  4.34it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.37it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.40it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.40it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.38it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.41it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.41it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.15it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.23it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.26it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.31it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.31it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.10it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.96it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.07it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.16it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.98it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.11it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.21it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.25it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.27it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.30it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.34it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.12it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.09it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.19it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.24it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.31it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.09it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.15it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.23it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.15it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.22it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.28it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.31it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.33it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.33it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.95it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.07it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.19it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.27it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.33it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.38it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.41it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.40it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.39it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.40it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.41it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.41it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.17it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.20it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.23it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.26it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.29it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.31it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.35it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.26it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.33it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.34it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.34it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.37it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.39it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.40it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.42it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.42it/s][A09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:20:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.97it/s]
09/01/2023 04:20:24 - INFO - __main__ -   Step: 666, Validation Metrics: {'accuracy': 0.8010369410239793, 'f1_micro': 0.8010369410239793, 'f1_macro': 0.39061933968548956, 'f1_weighted': 0.744187613028412, 'f1_1': 0.8875019833923943, 'f1_-1': 0.24519940915805025, 'f1_0': 0.0391566265060241, 'precision_micro': 0.8010369410239793, 'precision_macro': 0.6230593280169524, 'precision_weighted': 0.7559820699933285, 'precision_1': 0.8136941130831151, 'precision_-1': 0.535483870967742, 'precision_0': 0.52, 'recall_micro': 0.8010369410239793, 'recall_macro': 0.38512782821790864, 'recall_weighted': 0.8010369410239793, 'recall_1': 0.9760353652861796, 'recall_-1': 0.15900383141762453, 'recall_0': 0.02034428794992175}
[2023-09-01 04:20:31,195] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 667/1998 [2:26:13<18:01:31, 48.75s/it]09/01/2023 04:20:38 - INFO - __main__ -   Step: 667, LR: 1.3731612903225808e-05, Loss: 0.46932876110076904
[2023-09-01 04:20:45,688] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 668/1998 [2:26:27<14:12:24, 38.45s/it]09/01/2023 04:20:53 - INFO - __main__ -   Step: 668, LR: 1.3721290322580648e-05, Loss: 0.4872802495956421
[2023-09-01 04:21:00,274] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 33%|███▎      | 669/1998 [2:26:42<11:33:59, 31.33s/it]09/01/2023 04:21:08 - INFO - __main__ -   Step: 669, LR: 1.3710967741935485e-05, Loss: 0.4649304747581482
[2023-09-01 04:21:13,767] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▎      | 670/1998 [2:26:57<9:45:31, 26.45s/it] 09/01/2023 04:21:23 - INFO - __main__ -   Step: 670, LR: 1.3700645161290325e-05, Loss: 0.5048234462738037
[2023-09-01 04:21:29,205] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▎      | 671/1998 [2:27:10<8:15:03, 22.38s/it]09/01/2023 04:21:35 - INFO - __main__ -   Step: 671, LR: 1.3690322580645163e-05, Loss: 0.4541432857513428
[2023-09-01 04:21:41,880] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▎      | 672/1998 [2:27:24<7:17:53, 19.81s/it]09/01/2023 04:21:49 - INFO - __main__ -   Step: 672, LR: 1.3680000000000003e-05, Loss: 0.4769282937049866
[2023-09-01 04:21:56,704] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▎      | 673/1998 [2:27:39<6:47:27, 18.45s/it]09/01/2023 04:22:05 - INFO - __main__ -   Step: 673, LR: 1.3669677419354839e-05, Loss: 0.5370721220970154
[2023-09-01 04:22:11,760] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▎      | 674/1998 [2:27:53<6:16:36, 17.07s/it]09/01/2023 04:22:18 - INFO - __main__ -   Step: 674, LR: 1.3659354838709677e-05, Loss: 0.4834582209587097
[2023-09-01 04:22:25,849] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 675/1998 [2:28:08<6:03:44, 16.50s/it]09/01/2023 04:22:34 - INFO - __main__ -   Step: 675, LR: 1.3649032258064517e-05, Loss: 0.5099565982818604
[2023-09-01 04:22:40,566] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 676/1998 [2:28:22<5:46:16, 15.72s/it]09/01/2023 04:22:47 - INFO - __main__ -   Step: 676, LR: 1.3638709677419355e-05, Loss: 0.4467528164386749
[2023-09-01 04:22:54,290] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 677/1998 [2:28:36<5:33:41, 15.16s/it]09/01/2023 04:23:01 - INFO - __main__ -   Step: 677, LR: 1.3628387096774194e-05, Loss: 0.6163001656532288
[2023-09-01 04:23:07,793] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 678/1998 [2:28:49<5:23:16, 14.69s/it]09/01/2023 04:23:15 - INFO - __main__ -   Step: 678, LR: 1.3618064516129032e-05, Loss: 0.4397273063659668
[2023-09-01 04:23:21,600] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 679/1998 [2:29:03<5:16:18, 14.39s/it]09/01/2023 04:23:29 - INFO - __main__ -   Step: 679, LR: 1.3607741935483872e-05, Loss: 0.4380304217338562
[2023-09-01 04:23:35,202] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 680/1998 [2:29:17<5:15:57, 14.38s/it]09/01/2023 04:23:43 - INFO - __main__ -   Step: 680, LR: 1.359741935483871e-05, Loss: 0.49970537424087524
[2023-09-01 04:23:50,176] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 681/1998 [2:29:32<5:17:52, 14.48s/it]09/01/2023 04:23:58 - INFO - __main__ -   Step: 681, LR: 1.3587096774193548e-05, Loss: 0.49061936140060425
[2023-09-01 04:24:04,916] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 682/1998 [2:29:47<5:19:33, 14.57s/it]09/01/2023 04:24:12 - INFO - __main__ -   Step: 682, LR: 1.3576774193548388e-05, Loss: 0.5389814376831055
[2023-09-01 04:24:19,558] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 683/1998 [2:30:01<5:18:55, 14.55s/it]09/01/2023 04:24:27 - INFO - __main__ -   Step: 683, LR: 1.3566451612903226e-05, Loss: 0.44115132093429565
[2023-09-01 04:24:33,254] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 684/1998 [2:30:15<5:13:00, 14.29s/it]09/01/2023 04:24:41 - INFO - __main__ -   Step: 684, LR: 1.3556129032258065e-05, Loss: 0.5462090969085693
[2023-09-01 04:24:48,159] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 685/1998 [2:30:30<5:18:24, 14.55s/it]09/01/2023 04:24:56 - INFO - __main__ -   Step: 685, LR: 1.3545806451612903e-05, Loss: 0.5270729660987854
[2023-09-01 04:25:02,594] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 686/1998 [2:30:44<5:13:26, 14.33s/it]09/01/2023 04:25:10 - INFO - __main__ -   Step: 686, LR: 1.3535483870967743e-05, Loss: 0.4898282289505005
[2023-09-01 04:25:15,930] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 687/1998 [2:30:58<5:07:05, 14.05s/it]09/01/2023 04:25:23 - INFO - __main__ -   Step: 687, LR: 1.3525161290322581e-05, Loss: 0.4889846444129944
[2023-09-01 04:25:30,389] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 688/1998 [2:31:12<5:09:38, 14.18s/it]09/01/2023 04:25:38 - INFO - __main__ -   Step: 688, LR: 1.351483870967742e-05, Loss: 0.3985409736633301
[2023-09-01 04:25:45,301] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 34%|███▍      | 689/1998 [2:31:28<5:19:14, 14.63s/it]09/01/2023 04:25:53 - INFO - __main__ -   Step: 689, LR: 1.3504516129032259e-05, Loss: 0.5170093774795532
[2023-09-01 04:25:59,937] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 690/1998 [2:31:42<5:16:02, 14.50s/it]09/01/2023 04:26:07 - INFO - __main__ -   Step: 690, LR: 1.3494193548387099e-05, Loss: 0.4896892309188843
[2023-09-01 04:26:14,704] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 691/1998 [2:31:57<5:21:35, 14.76s/it]09/01/2023 04:26:23 - INFO - __main__ -   Step: 691, LR: 1.3483870967741936e-05, Loss: 0.4530628025531769
[2023-09-01 04:26:31,401] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 692/1998 [2:32:14<5:31:19, 15.22s/it]09/01/2023 04:26:39 - INFO - __main__ -   Step: 692, LR: 1.3473548387096776e-05, Loss: 0.5466817617416382
[2023-09-01 04:26:47,048] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 693/1998 [2:32:28<5:26:15, 15.00s/it]09/01/2023 04:26:54 - INFO - __main__ -   Step: 693, LR: 1.3463225806451614e-05, Loss: 0.5220659971237183
[2023-09-01 04:26:59,846] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 694/1998 [2:32:41<5:13:45, 14.44s/it]09/01/2023 04:27:07 - INFO - __main__ -   Step: 694, LR: 1.3452903225806452e-05, Loss: 0.3654382526874542
[2023-09-01 04:27:13,634] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 695/1998 [2:32:55<5:11:17, 14.33s/it]09/01/2023 04:27:21 - INFO - __main__ -   Step: 695, LR: 1.3442580645161292e-05, Loss: 0.4919654130935669
[2023-09-01 04:27:27,572] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 696/1998 [2:33:09<5:05:20, 14.07s/it]09/01/2023 04:27:34 - INFO - __main__ -   Step: 696, LR: 1.343225806451613e-05, Loss: 0.5078861713409424
[2023-09-01 04:27:41,440] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 697/1998 [2:33:24<5:11:57, 14.39s/it]09/01/2023 04:27:49 - INFO - __main__ -   Step: 697, LR: 1.342193548387097e-05, Loss: 0.40728098154067993
[2023-09-01 04:27:56,328] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 698/1998 [2:33:38<5:10:38, 14.34s/it]09/01/2023 04:28:04 - INFO - __main__ -   Step: 698, LR: 1.3411612903225808e-05, Loss: 0.4618781805038452
[2023-09-01 04:28:09,855] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▍      | 699/1998 [2:33:51<5:02:28, 13.97s/it]09/01/2023 04:28:17 - INFO - __main__ -   Step: 699, LR: 1.3401290322580647e-05, Loss: 0.5190892219543457
[2023-09-01 04:28:23,939] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 700/1998 [2:34:05<5:03:57, 14.05s/it]09/01/2023 04:28:31 - INFO - __main__ -   Step: 700, LR: 1.3390967741935485e-05, Loss: 0.44055837392807007
09/01/2023 04:28:31 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700
09/01/2023 04:28:31 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 04:28:31,432] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 04:28:31,438] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 04:28:31,438] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 04:28:31,438] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 04:28:31,438] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 04:28:31,439] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 04:28:31,439] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 04:28:31,452] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 04:28:31,453] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 04:28:31,453] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 04:28:31,453] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 04:28:31,454] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 04:28:31,454] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 04:28:31,454] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 04:28:31,454] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 04:29:27,020] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 04:29:27,020] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 04:29:29,691] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 04:29:29,691] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 04:29:31,817] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 04:29:31,818] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 04:29:33,233] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 04:29:33,233] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 04:29:33,237] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:29:33,237] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:29:33,237] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:29:33,238] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 04:29:33 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/pytorch_model
09/01/2023 04:29:33 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/scheduler.bin
09/01/2023 04:29:33 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_700/random_states_0.pkl
09/01/2023 04:29:33 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.94it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.93it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.97it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.68it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:58,  3.77it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.48it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.30it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.47it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.68it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.83it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.92it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.04it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:51,  4.12it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:50,  4.18it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:49,  4.25it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.27it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.27it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.24it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.02it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.91it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.02it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.11it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:05<00:48,  4.17it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.20it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.01it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.62it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.80it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.64it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.86it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.99it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.85it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  3.99it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.88it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.70it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.80it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.95it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.02it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:50,  3.77it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.91it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.02it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.10it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.08it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.81it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.51it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:48,  3.72it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.59it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:51,  3.47it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.49it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:51,  3.43it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.55it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.47it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.41it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.77it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.62it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.82it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.88it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.92it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.02it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.05it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:39,  4.11it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.14it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.17it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.16it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.19it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.13it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.19it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.97it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.84it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.79it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.92it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.06it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.13it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.84it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.97it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.61it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.71it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.93it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:35,  4.07it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.94it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.95it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.07it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.13it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.09it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.15it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.20it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.02it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.12it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:33,  3.86it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.89it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.99it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.99it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  3.99it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.09it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.10it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.14it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.18it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:28,  4.22it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.19it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.82it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.95it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.03it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.05it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.11it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.75it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.93it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:28,  4.03it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.89it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.00it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.06it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.06it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:26,  4.14it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.18it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.24it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.26it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.29it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.30it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:31<00:23,  4.29it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.33it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.88it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.59it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.79it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.92it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.95it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.09it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:23,  3.93it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.06it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.96it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.10it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.14it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.23it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.26it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.28it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:35<00:20,  4.28it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.29it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.33it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.36it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.35it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.39it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.41it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.40it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.38it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:37<00:17,  4.42it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.37it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.40it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.37it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:17,  4.28it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.96it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.08it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:39<00:16,  4.17it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.25it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.27it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.32it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:15,  4.33it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.37it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.41it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:13,  4.44it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.45it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:41<00:13,  4.47it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.46it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.19it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.27it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:42<00:13,  4.28it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.35it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.34it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.13it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:43<00:13,  3.85it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.98it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.09it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.18it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:44<00:11,  4.00it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.14it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.24it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.29it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.30it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:09,  4.32it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.37it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.14it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.13it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:46<00:09,  4.22it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.27it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.34it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.12it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:47<00:08,  4.19it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:07,  4.28it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.19it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.24it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.31it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.34it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.36it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.39it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.98it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.10it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.20it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.28it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.33it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:50<00:05,  4.39it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.43it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.43it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.43it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:51<00:04,  4.42it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.41it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.42it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.19it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.22it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.26it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.29it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.32it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.35it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:53<00:02,  4.37it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.28it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.33it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.37it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:54<00:01,  4.38it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.42it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.42it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.44it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.45it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.45it/s][A09/01/2023 04:30:29 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:30:30 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.98it/s]
09/01/2023 04:30:30 - INFO - __main__ -   Step: 700, Validation Metrics: {'accuracy': 0.7894639385242107, 'f1_micro': 0.7894639385242107, 'f1_macro': 0.42557137195208455, 'f1_weighted': 0.7524041624823694, 'f1_1': 0.8783570300157978, 'f1_-1': 0.3471522665633475, 'f1_0': 0.051204819277108425, 'precision_micro': 0.7894639385242107, 'precision_macro': 0.649106425170777, 'precision_weighted': 0.7615498509934134, 'precision_1': 0.8259399651675033, 'precision_-1': 0.4413793103448276, 'precision_0': 0.68, 'recall_micro': 0.7894639385242107, 'recall_macro': 0.4168537781059065, 'recall_weighted': 0.7894639385242107, 'recall_1': 0.9378780828292229, 'recall_-1': 0.28607918263090676, 'recall_0': 0.026604068857589983}
[2023-09-01 04:30:36,483] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 701/1998 [2:36:17<17:49:03, 49.46s/it]09/01/2023 04:30:43 - INFO - __main__ -   Step: 701, LR: 1.3380645161290325e-05, Loss: 0.44329941272735596
[2023-09-01 04:30:48,937] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 702/1998 [2:36:30<13:50:48, 38.46s/it]09/01/2023 04:30:56 - INFO - __main__ -   Step: 702, LR: 1.3370322580645163e-05, Loss: 0.47187739610671997
[2023-09-01 04:31:02,006] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 703/1998 [2:36:44<11:11:07, 31.09s/it]09/01/2023 04:31:10 - INFO - __main__ -   Step: 703, LR: 1.3360000000000003e-05, Loss: 0.4981204569339752
[2023-09-01 04:31:15,958] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 704/1998 [2:36:58<9:17:15, 25.84s/it] 09/01/2023 04:31:23 - INFO - __main__ -   Step: 704, LR: 1.334967741935484e-05, Loss: 0.45204025506973267
[2023-09-01 04:31:30,692] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 705/1998 [2:37:12<8:02:49, 22.41s/it]09/01/2023 04:31:38 - INFO - __main__ -   Step: 705, LR: 1.333935483870968e-05, Loss: 0.44299641251564026
[2023-09-01 04:31:44,693] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 706/1998 [2:37:26<7:10:19, 19.98s/it]09/01/2023 04:31:52 - INFO - __main__ -   Step: 706, LR: 1.3329032258064518e-05, Loss: 0.4244336783885956
[2023-09-01 04:31:59,519] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 707/1998 [2:37:41<6:34:49, 18.35s/it]09/01/2023 04:32:07 - INFO - __main__ -   Step: 707, LR: 1.3318709677419356e-05, Loss: 0.4619395434856415
[2023-09-01 04:32:12,748] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 708/1998 [2:37:54<6:00:23, 16.76s/it]09/01/2023 04:32:20 - INFO - __main__ -   Step: 708, LR: 1.3308387096774196e-05, Loss: 0.4873354434967041
[2023-09-01 04:32:27,001] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 35%|███▌      | 709/1998 [2:38:08<5:42:53, 15.96s/it]09/01/2023 04:32:34 - INFO - __main__ -   Step: 709, LR: 1.3298064516129032e-05, Loss: 0.4512474238872528
[2023-09-01 04:32:40,662] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 710/1998 [2:38:22<5:28:30, 15.30s/it]09/01/2023 04:32:47 - INFO - __main__ -   Step: 710, LR: 1.3287741935483872e-05, Loss: 0.4391201138496399
[2023-09-01 04:32:53,905] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 711/1998 [2:38:35<5:16:17, 14.75s/it]09/01/2023 04:33:01 - INFO - __main__ -   Step: 711, LR: 1.327741935483871e-05, Loss: 0.5163693428039551
[2023-09-01 04:33:07,634] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 712/1998 [2:38:49<5:09:27, 14.44s/it]09/01/2023 04:33:15 - INFO - __main__ -   Step: 712, LR: 1.3267096774193548e-05, Loss: 0.4829004406929016
[2023-09-01 04:33:20,791] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 713/1998 [2:39:03<5:03:35, 14.18s/it]09/01/2023 04:33:28 - INFO - __main__ -   Step: 713, LR: 1.3256774193548387e-05, Loss: 0.5048065185546875
[2023-09-01 04:33:34,411] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 714/1998 [2:39:16<4:58:56, 13.97s/it]09/01/2023 04:33:42 - INFO - __main__ -   Step: 714, LR: 1.3246451612903225e-05, Loss: 0.4772307872772217
[2023-09-01 04:33:48,398] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 715/1998 [2:39:29<4:54:37, 13.78s/it]09/01/2023 04:33:55 - INFO - __main__ -   Step: 715, LR: 1.3236129032258065e-05, Loss: 0.5119204521179199
[2023-09-01 04:34:02,409] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 716/1998 [2:39:44<5:02:20, 14.15s/it]09/01/2023 04:34:10 - INFO - __main__ -   Step: 716, LR: 1.3225806451612903e-05, Loss: 0.490888386964798
[2023-09-01 04:34:17,515] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 717/1998 [2:39:59<5:01:34, 14.12s/it]09/01/2023 04:34:24 - INFO - __main__ -   Step: 717, LR: 1.3215483870967743e-05, Loss: 0.41306203603744507
[2023-09-01 04:34:30,137] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 718/1998 [2:40:11<4:51:51, 13.68s/it]09/01/2023 04:34:37 - INFO - __main__ -   Step: 718, LR: 1.320516129032258e-05, Loss: 0.4846402108669281
[2023-09-01 04:34:43,572] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 719/1998 [2:40:25<4:49:16, 13.57s/it]09/01/2023 04:34:50 - INFO - __main__ -   Step: 719, LR: 1.319483870967742e-05, Loss: 0.5241457223892212
[2023-09-01 04:34:56,845] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 720/1998 [2:40:39<4:54:39, 13.83s/it]09/01/2023 04:35:05 - INFO - __main__ -   Step: 720, LR: 1.3184516129032259e-05, Loss: 0.5468694567680359
[2023-09-01 04:35:11,883] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 721/1998 [2:40:54<4:59:36, 14.08s/it]09/01/2023 04:35:19 - INFO - __main__ -   Step: 721, LR: 1.3174193548387098e-05, Loss: 0.46056777238845825
[2023-09-01 04:35:26,020] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 722/1998 [2:41:07<4:57:36, 13.99s/it]09/01/2023 04:35:33 - INFO - __main__ -   Step: 722, LR: 1.3163870967741936e-05, Loss: 0.5422464609146118
[2023-09-01 04:35:39,942] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 723/1998 [2:41:21<4:57:51, 14.02s/it]09/01/2023 04:35:47 - INFO - __main__ -   Step: 723, LR: 1.3153548387096776e-05, Loss: 0.5276992321014404
[2023-09-01 04:35:53,986] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▌      | 724/1998 [2:41:36<4:58:01, 14.04s/it]09/01/2023 04:36:01 - INFO - __main__ -   Step: 724, LR: 1.3143225806451614e-05, Loss: 0.5201596021652222
[2023-09-01 04:36:08,534] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▋      | 725/1998 [2:41:52<5:09:59, 14.61s/it]09/01/2023 04:36:17 - INFO - __main__ -   Step: 725, LR: 1.3132903225806452e-05, Loss: 0.5108176469802856
[2023-09-01 04:36:23,939] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▋      | 726/1998 [2:42:06<5:08:15, 14.54s/it]09/01/2023 04:36:31 - INFO - __main__ -   Step: 726, LR: 1.3122580645161292e-05, Loss: 0.546044647693634
[2023-09-01 04:36:38,895] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▋      | 727/1998 [2:42:21<5:10:27, 14.66s/it]09/01/2023 04:36:46 - INFO - __main__ -   Step: 727, LR: 1.311225806451613e-05, Loss: 0.5378775596618652
[2023-09-01 04:36:53,340] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▋      | 728/1998 [2:42:35<5:06:15, 14.47s/it]09/01/2023 04:37:00 - INFO - __main__ -   Step: 728, LR: 1.310193548387097e-05, Loss: 0.47410616278648376
[2023-09-01 04:37:07,718] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 36%|███▋      | 729/1998 [2:42:49<5:05:05, 14.43s/it]09/01/2023 04:37:15 - INFO - __main__ -   Step: 729, LR: 1.3091612903225807e-05, Loss: 0.5919151902198792
[2023-09-01 04:37:21,339] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 730/1998 [2:43:03<5:03:18, 14.35s/it]09/01/2023 04:37:29 - INFO - __main__ -   Step: 730, LR: 1.3081290322580647e-05, Loss: 0.534546434879303
[2023-09-01 04:37:35,732] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 731/1998 [2:43:18<5:04:27, 14.42s/it]09/01/2023 04:37:43 - INFO - __main__ -   Step: 731, LR: 1.3070967741935485e-05, Loss: 0.4719351828098297
[2023-09-01 04:37:50,389] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 732/1998 [2:43:32<5:03:39, 14.39s/it]09/01/2023 04:37:58 - INFO - __main__ -   Step: 732, LR: 1.3060645161290325e-05, Loss: 0.4752442538738251
[2023-09-01 04:38:05,063] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 733/1998 [2:43:47<5:06:38, 14.54s/it]09/01/2023 04:38:13 - INFO - __main__ -   Step: 733, LR: 1.3050322580645163e-05, Loss: 0.48781299591064453
[2023-09-01 04:38:19,880] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 734/1998 [2:44:02<5:06:05, 14.53s/it]09/01/2023 04:38:27 - INFO - __main__ -   Step: 734, LR: 1.3040000000000002e-05, Loss: 0.487350732088089
[2023-09-01 04:38:34,353] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 735/1998 [2:44:16<5:04:23, 14.46s/it]09/01/2023 04:38:41 - INFO - __main__ -   Step: 735, LR: 1.302967741935484e-05, Loss: 0.5498676896095276
[2023-09-01 04:38:48,653] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 736/1998 [2:44:31<5:06:58, 14.59s/it]09/01/2023 04:38:56 - INFO - __main__ -   Step: 736, LR: 1.301935483870968e-05, Loss: 0.43621349334716797
[2023-09-01 04:39:03,714] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 737/1998 [2:44:45<5:03:27, 14.44s/it]09/01/2023 04:39:10 - INFO - __main__ -   Step: 737, LR: 1.3009032258064518e-05, Loss: 0.4372740685939789
[2023-09-01 04:39:17,722] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 738/1998 [2:44:59<5:00:20, 14.30s/it]09/01/2023 04:39:24 - INFO - __main__ -   Step: 738, LR: 1.2998709677419356e-05, Loss: 0.4708465039730072
[2023-09-01 04:39:30,854] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 739/1998 [2:45:12<4:54:07, 14.02s/it]09/01/2023 04:39:38 - INFO - __main__ -   Step: 739, LR: 1.2988387096774196e-05, Loss: 0.5082989931106567
[2023-09-01 04:39:44,618] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 740/1998 [2:45:26<4:54:28, 14.05s/it]09/01/2023 04:39:52 - INFO - __main__ -   Step: 740, LR: 1.2978064516129034e-05, Loss: 0.46668756008148193
[2023-09-01 04:39:58,322] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 741/1998 [2:45:40<4:51:21, 13.91s/it]09/01/2023 04:40:06 - INFO - __main__ -   Step: 741, LR: 1.2967741935483873e-05, Loss: 0.4705052971839905
[2023-09-01 04:40:11,911] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 742/1998 [2:45:54<4:53:38, 14.03s/it]09/01/2023 04:40:20 - INFO - __main__ -   Step: 742, LR: 1.2957419354838711e-05, Loss: 0.54837965965271
[2023-09-01 04:40:26,914] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 743/1998 [2:46:08<4:50:32, 13.89s/it]09/01/2023 04:40:33 - INFO - __main__ -   Step: 743, LR: 1.2947096774193551e-05, Loss: 0.47513124346733093
[2023-09-01 04:40:39,719] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 744/1998 [2:46:21<4:42:42, 13.53s/it]09/01/2023 04:40:46 - INFO - __main__ -   Step: 744, LR: 1.2936774193548389e-05, Loss: 0.4591771066188812
[2023-09-01 04:40:52,593] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 745/1998 [2:46:34<4:44:00, 13.60s/it]09/01/2023 04:41:00 - INFO - __main__ -   Step: 745, LR: 1.2926451612903225e-05, Loss: 0.5482660531997681
[2023-09-01 04:41:07,634] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 746/1998 [2:46:49<4:49:22, 13.87s/it]09/01/2023 04:41:14 - INFO - __main__ -   Step: 746, LR: 1.2916129032258065e-05, Loss: 0.49832892417907715
[2023-09-01 04:41:20,709] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 747/1998 [2:47:03<4:50:14, 13.92s/it]09/01/2023 04:41:28 - INFO - __main__ -   Step: 747, LR: 1.2905806451612903e-05, Loss: 0.44946762919425964
[2023-09-01 04:41:36,778] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 748/1998 [2:47:19<5:01:51, 14.49s/it]09/01/2023 04:41:44 - INFO - __main__ -   Step: 748, LR: 1.2895483870967743e-05, Loss: 0.48719522356987
[2023-09-01 04:41:52,392] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 37%|███▋      | 749/1998 [2:47:33<5:03:55, 14.60s/it]09/01/2023 04:41:59 - INFO - __main__ -   Step: 749, LR: 1.288516129032258e-05, Loss: 0.5231220126152039
[2023-09-01 04:42:06,043] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 750/1998 [2:47:47<4:57:30, 14.30s/it]09/01/2023 04:42:13 - INFO - __main__ -   Step: 750, LR: 1.287483870967742e-05, Loss: 0.4405946135520935
[2023-09-01 04:42:19,494] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 751/1998 [2:48:01<4:56:14, 14.25s/it]09/01/2023 04:42:27 - INFO - __main__ -   Step: 751, LR: 1.2864516129032258e-05, Loss: 0.47406378388404846
[2023-09-01 04:42:33,890] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 752/1998 [2:48:15<4:53:34, 14.14s/it]09/01/2023 04:42:41 - INFO - __main__ -   Step: 752, LR: 1.2854193548387098e-05, Loss: 0.5345677137374878
[2023-09-01 04:42:48,510] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 753/1998 [2:48:31<5:02:19, 14.57s/it]09/01/2023 04:42:56 - INFO - __main__ -   Step: 753, LR: 1.2843870967741936e-05, Loss: 0.4946111738681793
[2023-09-01 04:43:03,064] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 754/1998 [2:48:44<4:56:45, 14.31s/it]09/01/2023 04:43:10 - INFO - __main__ -   Step: 754, LR: 1.2833548387096776e-05, Loss: 0.43481385707855225
[2023-09-01 04:43:16,687] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 755/1998 [2:48:58<4:54:31, 14.22s/it]09/01/2023 04:43:24 - INFO - __main__ -   Step: 755, LR: 1.2823225806451614e-05, Loss: 0.5734721422195435
[2023-09-01 04:43:31,279] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 756/1998 [2:49:13<4:58:07, 14.40s/it]09/01/2023 04:43:39 - INFO - __main__ -   Step: 756, LR: 1.2812903225806452e-05, Loss: 0.5103107690811157
[2023-09-01 04:43:46,097] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 757/1998 [2:49:28<4:58:07, 14.41s/it]09/01/2023 04:43:53 - INFO - __main__ -   Step: 757, LR: 1.2802580645161291e-05, Loss: 0.46255558729171753
[2023-09-01 04:43:59,945] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 758/1998 [2:49:42<4:56:01, 14.32s/it]09/01/2023 04:44:07 - INFO - __main__ -   Step: 758, LR: 1.279225806451613e-05, Loss: 0.4549758732318878
[2023-09-01 04:44:14,148] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 759/1998 [2:49:56<4:54:17, 14.25s/it]09/01/2023 04:44:21 - INFO - __main__ -   Step: 759, LR: 1.2781935483870969e-05, Loss: 0.5303016901016235
[2023-09-01 04:44:28,726] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 760/1998 [2:50:10<4:52:44, 14.19s/it]09/01/2023 04:44:35 - INFO - __main__ -   Step: 760, LR: 1.2771612903225807e-05, Loss: 0.49299129843711853
[2023-09-01 04:44:42,423] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 761/1998 [2:50:24<4:50:29, 14.09s/it]09/01/2023 04:44:49 - INFO - __main__ -   Step: 761, LR: 1.2761290322580647e-05, Loss: 0.4784654676914215
[2023-09-01 04:44:55,760] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 762/1998 [2:50:37<4:46:06, 13.89s/it]09/01/2023 04:45:03 - INFO - __main__ -   Step: 762, LR: 1.2750967741935485e-05, Loss: 0.4578886330127716
[2023-09-01 04:45:09,854] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 763/1998 [2:50:51<4:46:40, 13.93s/it]09/01/2023 04:45:17 - INFO - __main__ -   Step: 763, LR: 1.2740645161290324e-05, Loss: 0.4963388442993164
[2023-09-01 04:45:23,907] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 764/1998 [2:51:05<4:48:18, 14.02s/it]09/01/2023 04:45:31 - INFO - __main__ -   Step: 764, LR: 1.2730322580645162e-05, Loss: 0.48460817337036133
[2023-09-01 04:45:38,058] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 765/1998 [2:51:19<4:47:24, 13.99s/it]09/01/2023 04:45:45 - INFO - __main__ -   Step: 765, LR: 1.2720000000000002e-05, Loss: 0.5318622589111328
[2023-09-01 04:45:51,565] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 766/1998 [2:51:33<4:46:42, 13.96s/it]09/01/2023 04:45:59 - INFO - __main__ -   Step: 766, LR: 1.270967741935484e-05, Loss: 0.5137794017791748
[2023-09-01 04:46:06,069] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 767/1998 [2:51:48<4:50:11, 14.14s/it]09/01/2023 04:46:13 - INFO - __main__ -   Step: 767, LR: 1.269935483870968e-05, Loss: 0.4223126173019409
[2023-09-01 04:46:20,341] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 768/1998 [2:52:02<4:52:43, 14.28s/it]09/01/2023 04:46:28 - INFO - __main__ -   Step: 768, LR: 1.2689032258064518e-05, Loss: 0.5121502876281738
[2023-09-01 04:46:34,175] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 38%|███▊      | 769/1998 [2:52:16<4:50:13, 14.17s/it]09/01/2023 04:46:42 - INFO - __main__ -   Step: 769, LR: 1.2678709677419356e-05, Loss: 0.5518165826797485
[2023-09-01 04:46:48,897] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▊      | 770/1998 [2:52:30<4:48:18, 14.09s/it]09/01/2023 04:46:56 - INFO - __main__ -   Step: 770, LR: 1.2668387096774195e-05, Loss: 0.4699435234069824
[2023-09-01 04:47:02,435] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▊      | 771/1998 [2:52:44<4:47:19, 14.05s/it]09/01/2023 04:47:10 - INFO - __main__ -   Step: 771, LR: 1.2658064516129033e-05, Loss: 0.4910467565059662
[2023-09-01 04:47:15,777] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▊      | 772/1998 [2:52:58<4:42:37, 13.83s/it]09/01/2023 04:47:23 - INFO - __main__ -   Step: 772, LR: 1.2647741935483873e-05, Loss: 0.46239322423934937
[2023-09-01 04:47:29,726] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▊      | 773/1998 [2:53:12<4:49:11, 14.16s/it]09/01/2023 04:47:38 - INFO - __main__ -   Step: 773, LR: 1.2637419354838711e-05, Loss: 0.4996550679206848
[2023-09-01 04:47:45,652] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▊      | 774/1998 [2:53:27<4:53:29, 14.39s/it]09/01/2023 04:47:53 - INFO - __main__ -   Step: 774, LR: 1.262709677419355e-05, Loss: 0.4357954263687134
[2023-09-01 04:48:00,190] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 775/1998 [2:53:42<4:56:21, 14.54s/it]09/01/2023 04:48:08 - INFO - __main__ -   Step: 775, LR: 1.2616774193548389e-05, Loss: 0.5503079891204834
[2023-09-01 04:48:14,780] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 776/1998 [2:53:56<4:53:36, 14.42s/it]09/01/2023 04:48:22 - INFO - __main__ -   Step: 776, LR: 1.2606451612903228e-05, Loss: 0.4590367078781128
[2023-09-01 04:48:28,476] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 777/1998 [2:54:10<4:50:23, 14.27s/it]09/01/2023 04:48:36 - INFO - __main__ -   Step: 777, LR: 1.2596129032258066e-05, Loss: 0.47990602254867554
[2023-09-01 04:48:42,784] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 778/1998 [2:54:24<4:45:50, 14.06s/it]09/01/2023 04:48:49 - INFO - __main__ -   Step: 778, LR: 1.2585806451612906e-05, Loss: 0.4782658815383911
[2023-09-01 04:48:56,085] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 779/1998 [2:54:37<4:42:20, 13.90s/it]09/01/2023 04:49:03 - INFO - __main__ -   Step: 779, LR: 1.2575483870967744e-05, Loss: 0.4687197208404541
[2023-09-01 04:49:09,959] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 780/1998 [2:54:51<4:42:43, 13.93s/it]09/01/2023 04:49:17 - INFO - __main__ -   Step: 780, LR: 1.256516129032258e-05, Loss: 0.5449609756469727
[2023-09-01 04:49:23,712] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 781/1998 [2:55:06<4:47:24, 14.17s/it]09/01/2023 04:49:32 - INFO - __main__ -   Step: 781, LR: 1.255483870967742e-05, Loss: 0.4136725068092346
[2023-09-01 04:49:37,941] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 782/1998 [2:55:20<4:43:21, 13.98s/it]09/01/2023 04:49:45 - INFO - __main__ -   Step: 782, LR: 1.2544516129032258e-05, Loss: 0.4738747477531433
[2023-09-01 04:49:52,221] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 783/1998 [2:55:35<4:49:52, 14.32s/it]09/01/2023 04:50:00 - INFO - __main__ -   Step: 783, LR: 1.2534193548387098e-05, Loss: 0.5366916656494141
[2023-09-01 04:50:08,058] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 784/1998 [2:55:50<4:52:18, 14.45s/it]09/01/2023 04:50:15 - INFO - __main__ -   Step: 784, LR: 1.2523870967741936e-05, Loss: 0.5256509780883789
[2023-09-01 04:50:22,247] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 785/1998 [2:56:04<4:49:25, 14.32s/it]09/01/2023 04:50:29 - INFO - __main__ -   Step: 785, LR: 1.2513548387096775e-05, Loss: 0.5053219795227051
[2023-09-01 04:50:35,947] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 786/1998 [2:56:18<4:48:47, 14.30s/it]09/01/2023 04:50:43 - INFO - __main__ -   Step: 786, LR: 1.2503225806451613e-05, Loss: 0.5920053720474243
[2023-09-01 04:50:51,120] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 787/1998 [2:56:32<4:50:12, 14.38s/it]09/01/2023 04:50:58 - INFO - __main__ -   Step: 787, LR: 1.2492903225806451e-05, Loss: 0.47615817189216614
[2023-09-01 04:51:05,244] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 788/1998 [2:56:47<4:48:49, 14.32s/it]09/01/2023 04:51:12 - INFO - __main__ -   Step: 788, LR: 1.2482580645161291e-05, Loss: 0.5008782148361206
[2023-09-01 04:51:18,801] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 39%|███▉      | 789/1998 [2:57:01<4:47:18, 14.26s/it]09/01/2023 04:51:26 - INFO - __main__ -   Step: 789, LR: 1.2472258064516129e-05, Loss: 0.4510709047317505
[2023-09-01 04:51:32,395] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 790/1998 [2:57:15<4:45:11, 14.17s/it]09/01/2023 04:51:40 - INFO - __main__ -   Step: 790, LR: 1.2461935483870969e-05, Loss: 0.5748200416564941
[2023-09-01 04:51:48,167] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 791/1998 [2:57:30<4:52:50, 14.56s/it]09/01/2023 04:51:56 - INFO - __main__ -   Step: 791, LR: 1.2451612903225807e-05, Loss: 0.4700784385204315
[2023-09-01 04:52:02,884] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 792/1998 [2:57:44<4:50:16, 14.44s/it]09/01/2023 04:52:10 - INFO - __main__ -   Step: 792, LR: 1.2441290322580646e-05, Loss: 0.5814617872238159
[2023-09-01 04:52:17,756] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 793/1998 [2:58:00<4:55:02, 14.69s/it]09/01/2023 04:52:25 - INFO - __main__ -   Step: 793, LR: 1.2430967741935484e-05, Loss: 0.5478343963623047
[2023-09-01 04:52:32,964] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 794/1998 [2:58:15<4:57:34, 14.83s/it]09/01/2023 04:52:40 - INFO - __main__ -   Step: 794, LR: 1.2420645161290324e-05, Loss: 0.44307130575180054
[2023-09-01 04:52:47,451] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 795/1998 [2:58:28<4:49:55, 14.46s/it]09/01/2023 04:52:54 - INFO - __main__ -   Step: 795, LR: 1.2410322580645162e-05, Loss: 0.5352816581726074
[2023-09-01 04:53:00,303] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 796/1998 [2:58:41<4:41:43, 14.06s/it]09/01/2023 04:53:07 - INFO - __main__ -   Step: 796, LR: 1.2400000000000002e-05, Loss: 0.5541894435882568
[2023-09-01 04:53:15,845] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 797/1998 [2:58:58<4:55:31, 14.76s/it]09/01/2023 04:53:23 - INFO - __main__ -   Step: 797, LR: 1.238967741935484e-05, Loss: 0.563858151435852
[2023-09-01 04:53:31,777] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 798/1998 [2:59:14<5:03:37, 15.18s/it]09/01/2023 04:53:39 - INFO - __main__ -   Step: 798, LR: 1.237935483870968e-05, Loss: 0.49564361572265625
[2023-09-01 04:53:46,966] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|███▉      | 799/1998 [2:59:30<5:06:58, 15.36s/it]09/01/2023 04:53:55 - INFO - __main__ -   Step: 799, LR: 1.2369032258064517e-05, Loss: 0.41756826639175415
[2023-09-01 04:54:03,060] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 800/1998 [2:59:44<5:02:56, 15.17s/it]09/01/2023 04:54:10 - INFO - __main__ -   Step: 800, LR: 1.2358709677419355e-05, Loss: 0.49300798773765564
09/01/2023 04:54:10 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800
09/01/2023 04:54:10 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 04:54:10,516] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 04:54:10,522] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 04:54:10,523] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 04:54:10,523] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 04:54:10,523] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 04:54:10,524] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 04:54:10,524] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 04:54:10,537] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 04:54:10,537] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 04:54:10,537] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 04:54:10,538] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 04:54:10,539] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 04:54:10,539] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 04:54:10,539] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 04:54:10,539] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 04:55:07,512] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 04:55:07,512] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 04:55:09,604] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 04:55:09,604] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 04:55:11,947] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 04:55:11,948] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 04:55:13,475] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 04:55:13,475] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 04:55:13,479] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:55:13,479] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:55:13,480] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 04:55:13,480] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 04:55:13 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/pytorch_model
09/01/2023 04:55:13 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/scheduler.bin
09/01/2023 04:55:13 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_800/random_states_0.pkl
09/01/2023 04:55:13 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.88it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:46,  4.88it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.94it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:01,  3.65it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.74it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.47it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.46it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.66it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.82it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.92it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.03it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.09it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.15it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.19it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:50,  4.20it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.23it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.19it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:52,  3.98it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:53,  3.89it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  3.98it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.07it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.10it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:49,  4.13it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.96it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.60it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.78it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.63it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.82it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.97it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.83it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:49,  3.97it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:50,  3.87it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.67it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.79it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.94it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.01it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:50,  3.77it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.90it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  3.99it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.05it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.04it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.79it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.50it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.68it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:51,  3.55it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.46it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.48it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:52,  3.42it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.55it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.44it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:51,  3.39it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:48,  3.58it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.75it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.60it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.77it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.83it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:16<00:43,  3.88it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.98it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:41,  4.02it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.04it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.08it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.11it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.13it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.17it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.12it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.17it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.95it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.83it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:19<00:40,  3.79it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.90it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.03it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.12it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:20<00:39,  3.83it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:38,  3.94it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.60it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:40,  3.69it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.94it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.99it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.06it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.93it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.96it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.07it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.14it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.09it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:24<00:32,  4.14it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.19it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.02it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.08it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.83it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.86it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.96it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.98it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  3.98it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:31,  4.04it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.06it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.11it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:27<00:29,  4.13it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.17it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:29,  4.16it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:28<00:30,  3.90it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.00it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:29,  4.03it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.10it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.75it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.91it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:28,  4.03it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.89it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:30<00:27,  4.01it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.07it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.08it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.17it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.17it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.18it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.22it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.26it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.27it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.25it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.30it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.86it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:33<00:27,  3.57it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:26,  3.77it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.91it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.93it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.06it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.90it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.03it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.93it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.06it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.12it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.20it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.24it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.30it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:19,  4.30it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.31it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.34it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.36it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:37<00:18,  4.34it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.37it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.39it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.37it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.34it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.36it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.33it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.35it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.35it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.28it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.97it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.09it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.18it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.26it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.28it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.31it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:41<00:15,  4.29it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.31it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.33it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.35it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.36it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.37it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.38it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:14,  4.13it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.22it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.21it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.28it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.30it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.10it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.82it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.95it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.04it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.12it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.96it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.09it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:11,  4.17it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.23it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:46<00:10,  4.23it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.24it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.29it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.11it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:47<00:09,  4.09it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.17it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:09,  4.20it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.26it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:48<00:08,  4.08it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.15it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.21it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.14it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.21it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.26it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.30it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.33it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.35it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.97it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.07it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:06,  4.14it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.22it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:51<00:05,  4.28it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.32it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.35it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.37it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:52<00:04,  4.36it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.31it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.33it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.33it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.12it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.17it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.22it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.24it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.27it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:54<00:02,  4.29it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.33it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.25it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.29it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:55<00:01,  4.34it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.32it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.33it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.36it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.38it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:56<00:00,  4.39it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.39it/s][A09/01/2023 04:56:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 04:56:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:56:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:56:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:56:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 04:56:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:56:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:56:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:56:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 04:56:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:56:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:56:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 04:56:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.95it/s]
09/01/2023 04:56:11 - INFO - __main__ -   Step: 800, Validation Metrics: {'accuracy': 0.8010369410239793, 'f1_micro': 0.8010369410239793, 'f1_macro': 0.37521157422961676, 'f1_weighted': 0.7374588626242138, 'f1_1': 0.8879083937388381, 'f1_-1': 0.19517313746065057, 'f1_0': 0.04255319148936171, 'precision_micro': 0.8010369410239793, 'precision_macro': 0.697774803628041, 'precision_weighted': 0.767090128226017, 'precision_1': 0.8094234820915533, 'precision_-1': 0.5470588235294118, 'precision_0': 0.7368421052631579, 'recall_micro': 0.8010369410239793, 'recall_macro': 0.3746437339576541, 'recall_weighted': 0.8010369410239793, 'recall_1': 0.9832480223359702, 'recall_-1': 0.11877394636015326, 'recall_0': 0.02190923317683881}
[2023-09-01 04:56:17,245] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 801/1998 [3:01:59<16:54:57, 50.88s/it]09/01/2023 04:56:24 - INFO - __main__ -   Step: 801, LR: 1.2348387096774195e-05, Loss: 0.49412471055984497
[2023-09-01 04:56:30,390] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 802/1998 [3:02:13<13:12:42, 39.77s/it]09/01/2023 04:56:38 - INFO - __main__ -   Step: 802, LR: 1.2338064516129033e-05, Loss: 0.5468108654022217
[2023-09-01 04:56:45,232] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 803/1998 [3:02:27<10:38:07, 32.04s/it]09/01/2023 04:56:52 - INFO - __main__ -   Step: 803, LR: 1.2327741935483873e-05, Loss: 0.5261486768722534
[2023-09-01 04:56:58,454] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 804/1998 [3:02:40<8:46:08, 26.44s/it] 09/01/2023 04:57:05 - INFO - __main__ -   Step: 804, LR: 1.231741935483871e-05, Loss: 0.5252344608306885
[2023-09-01 04:57:12,469] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 805/1998 [3:02:54<7:32:36, 22.76s/it]09/01/2023 04:57:20 - INFO - __main__ -   Step: 805, LR: 1.230709677419355e-05, Loss: 0.485523521900177
[2023-09-01 04:57:26,897] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 806/1998 [3:03:09<6:43:56, 20.33s/it]09/01/2023 04:57:34 - INFO - __main__ -   Step: 806, LR: 1.2296774193548388e-05, Loss: 0.4376406669616699
[2023-09-01 04:57:41,094] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 807/1998 [3:03:23<6:05:58, 18.44s/it]09/01/2023 04:57:48 - INFO - __main__ -   Step: 807, LR: 1.2286451612903228e-05, Loss: 0.5130902528762817
[2023-09-01 04:57:54,841] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 808/1998 [3:03:36<5:36:19, 16.96s/it]09/01/2023 04:58:02 - INFO - __main__ -   Step: 808, LR: 1.2276129032258066e-05, Loss: 0.5134871602058411
[2023-09-01 04:58:08,799] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 40%|████      | 809/1998 [3:03:50<5:14:50, 15.89s/it]09/01/2023 04:58:15 - INFO - __main__ -   Step: 809, LR: 1.2265806451612906e-05, Loss: 0.5259041786193848
[2023-09-01 04:58:22,673] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 810/1998 [3:04:04<5:08:20, 15.57s/it]09/01/2023 04:58:30 - INFO - __main__ -   Step: 810, LR: 1.2255483870967744e-05, Loss: 0.520571231842041
[2023-09-01 04:58:37,165] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 811/1998 [3:04:19<5:00:50, 15.21s/it]09/01/2023 04:58:44 - INFO - __main__ -   Step: 811, LR: 1.2245161290322583e-05, Loss: 0.46945613622665405
[2023-09-01 04:58:50,782] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 812/1998 [3:04:32<4:48:03, 14.57s/it]09/01/2023 04:58:57 - INFO - __main__ -   Step: 812, LR: 1.2234838709677421e-05, Loss: 0.561806321144104
[2023-09-01 04:59:04,856] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 813/1998 [3:04:47<4:50:20, 14.70s/it]09/01/2023 04:59:12 - INFO - __main__ -   Step: 813, LR: 1.222451612903226e-05, Loss: 0.47561830282211304
[2023-09-01 04:59:19,457] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 814/1998 [3:05:01<4:45:19, 14.46s/it]09/01/2023 04:59:26 - INFO - __main__ -   Step: 814, LR: 1.2214193548387099e-05, Loss: 0.4310701787471771
[2023-09-01 04:59:33,842] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 815/1998 [3:05:15<4:44:18, 14.42s/it]09/01/2023 04:59:41 - INFO - __main__ -   Step: 815, LR: 1.2203870967741937e-05, Loss: 0.5587079524993896
[2023-09-01 04:59:47,101] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 816/1998 [3:05:29<4:37:50, 14.10s/it]09/01/2023 04:59:54 - INFO - __main__ -   Step: 816, LR: 1.2193548387096775e-05, Loss: 0.4872491955757141
[2023-09-01 05:00:00,734] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 817/1998 [3:05:42<4:32:43, 13.86s/it]09/01/2023 05:00:07 - INFO - __main__ -   Step: 817, LR: 1.2183225806451613e-05, Loss: 0.48844069242477417
[2023-09-01 05:00:13,862] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 818/1998 [3:05:56<4:32:45, 13.87s/it]09/01/2023 05:00:21 - INFO - __main__ -   Step: 818, LR: 1.2172903225806451e-05, Loss: 0.46699759364128113
[2023-09-01 05:00:27,338] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 819/1998 [3:06:09<4:30:26, 13.76s/it]09/01/2023 05:00:35 - INFO - __main__ -   Step: 819, LR: 1.216258064516129e-05, Loss: 0.45364615321159363
[2023-09-01 05:00:41,590] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 820/1998 [3:06:23<4:29:57, 13.75s/it]09/01/2023 05:00:48 - INFO - __main__ -   Step: 820, LR: 1.2152258064516129e-05, Loss: 0.5492674112319946
[2023-09-01 05:00:55,319] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 821/1998 [3:06:37<4:29:41, 13.75s/it]09/01/2023 05:01:02 - INFO - __main__ -   Step: 821, LR: 1.2141935483870968e-05, Loss: 0.48125046491622925
[2023-09-01 05:01:09,584] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 822/1998 [3:06:51<4:33:15, 13.94s/it]09/01/2023 05:01:17 - INFO - __main__ -   Step: 822, LR: 1.2131612903225806e-05, Loss: 0.5457341074943542
[2023-09-01 05:01:24,165] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 823/1998 [3:07:05<4:33:40, 13.97s/it]09/01/2023 05:01:31 - INFO - __main__ -   Step: 823, LR: 1.2121290322580646e-05, Loss: 0.4060262143611908
[2023-09-01 05:01:37,327] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████      | 824/1998 [3:07:19<4:31:35, 13.88s/it]09/01/2023 05:01:44 - INFO - __main__ -   Step: 824, LR: 1.2110967741935484e-05, Loss: 0.4646821618080139
[2023-09-01 05:01:51,645] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████▏     | 825/1998 [3:07:34<4:39:00, 14.27s/it]09/01/2023 05:01:59 - INFO - __main__ -   Step: 825, LR: 1.2100645161290324e-05, Loss: 0.48763781785964966
[2023-09-01 05:02:06,367] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████▏     | 826/1998 [3:07:48<4:35:20, 14.10s/it]09/01/2023 05:02:13 - INFO - __main__ -   Step: 826, LR: 1.2090322580645162e-05, Loss: 0.5319356918334961
[2023-09-01 05:02:20,343] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████▏     | 827/1998 [3:08:04<4:45:59, 14.65s/it]09/01/2023 05:02:29 - INFO - __main__ -   Step: 827, LR: 1.2080000000000001e-05, Loss: 0.46332642436027527
[2023-09-01 05:02:36,733] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████▏     | 828/1998 [3:08:19<4:48:16, 14.78s/it]09/01/2023 05:02:44 - INFO - __main__ -   Step: 828, LR: 1.206967741935484e-05, Loss: 0.46878600120544434
[2023-09-01 05:02:51,005] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 41%|████▏     | 829/1998 [3:08:33<4:42:25, 14.50s/it]09/01/2023 05:02:58 - INFO - __main__ -   Step: 829, LR: 1.2059354838709679e-05, Loss: 0.47676581144332886
[2023-09-01 05:03:05,146] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 830/1998 [3:08:47<4:42:14, 14.50s/it]09/01/2023 05:03:13 - INFO - __main__ -   Step: 830, LR: 1.2049032258064517e-05, Loss: 0.5601456165313721
[2023-09-01 05:03:20,139] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 831/1998 [3:09:02<4:43:47, 14.59s/it]09/01/2023 05:03:27 - INFO - __main__ -   Step: 831, LR: 1.2038709677419355e-05, Loss: 0.5140312314033508
[2023-09-01 05:03:34,589] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 832/1998 [3:09:16<4:40:47, 14.45s/it]09/01/2023 05:03:41 - INFO - __main__ -   Step: 832, LR: 1.2028387096774195e-05, Loss: 0.5366020798683167
[2023-09-01 05:03:48,081] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 833/1998 [3:09:30<4:39:17, 14.38s/it]09/01/2023 05:03:56 - INFO - __main__ -   Step: 833, LR: 1.2018064516129033e-05, Loss: 0.49061131477355957
[2023-09-01 05:04:02,277] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 834/1998 [3:09:44<4:34:11, 14.13s/it]09/01/2023 05:04:09 - INFO - __main__ -   Step: 834, LR: 1.2007741935483872e-05, Loss: 0.4770524501800537
[2023-09-01 05:04:16,255] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 835/1998 [3:09:58<4:35:04, 14.19s/it]09/01/2023 05:04:24 - INFO - __main__ -   Step: 835, LR: 1.199741935483871e-05, Loss: 0.5193995833396912
[2023-09-01 05:04:30,352] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 836/1998 [3:10:11<4:30:21, 13.96s/it]09/01/2023 05:04:37 - INFO - __main__ -   Step: 836, LR: 1.198709677419355e-05, Loss: 0.5371267795562744
[2023-09-01 05:04:44,021] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 837/1998 [3:10:26<4:32:04, 14.06s/it]09/01/2023 05:04:51 - INFO - __main__ -   Step: 837, LR: 1.1976774193548388e-05, Loss: 0.459530234336853
[2023-09-01 05:04:57,399] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 838/1998 [3:10:39<4:27:06, 13.82s/it]09/01/2023 05:05:05 - INFO - __main__ -   Step: 838, LR: 1.1966451612903228e-05, Loss: 0.4747794270515442
[2023-09-01 05:05:11,616] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 839/1998 [3:10:52<4:24:40, 13.70s/it]09/01/2023 05:05:18 - INFO - __main__ -   Step: 839, LR: 1.1956129032258066e-05, Loss: 0.6440536975860596
[2023-09-01 05:05:25,348] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 840/1998 [3:11:07<4:28:35, 13.92s/it]09/01/2023 05:05:32 - INFO - __main__ -   Step: 840, LR: 1.1945806451612905e-05, Loss: 0.5007501244544983
[2023-09-01 05:05:39,178] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 841/1998 [3:11:21<4:26:55, 13.84s/it]09/01/2023 05:05:46 - INFO - __main__ -   Step: 841, LR: 1.1935483870967743e-05, Loss: 0.500472903251648
[2023-09-01 05:05:53,676] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 842/1998 [3:11:35<4:32:56, 14.17s/it]09/01/2023 05:06:01 - INFO - __main__ -   Step: 842, LR: 1.1925161290322583e-05, Loss: 0.42247867584228516
[2023-09-01 05:06:08,356] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 843/1998 [3:11:50<4:35:07, 14.29s/it]09/01/2023 05:06:16 - INFO - __main__ -   Step: 843, LR: 1.1914838709677421e-05, Loss: 0.49374228715896606
[2023-09-01 05:06:22,280] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 844/1998 [3:12:03<4:28:41, 13.97s/it]09/01/2023 05:06:29 - INFO - __main__ -   Step: 844, LR: 1.1904516129032259e-05, Loss: 0.5210928916931152
[2023-09-01 05:06:36,520] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 845/1998 [3:12:18<4:30:28, 14.08s/it]09/01/2023 05:06:43 - INFO - __main__ -   Step: 845, LR: 1.1894193548387099e-05, Loss: 0.49812644720077515
[2023-09-01 05:06:49,952] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 846/1998 [3:12:31<4:28:26, 13.98s/it]09/01/2023 05:06:57 - INFO - __main__ -   Step: 846, LR: 1.1883870967741937e-05, Loss: 0.47744566202163696
[2023-09-01 05:07:03,568] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 847/1998 [3:12:45<4:26:54, 13.91s/it]09/01/2023 05:07:11 - INFO - __main__ -   Step: 847, LR: 1.1873548387096776e-05, Loss: 0.4379178285598755
[2023-09-01 05:07:17,386] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 848/1998 [3:12:59<4:27:36, 13.96s/it]09/01/2023 05:07:25 - INFO - __main__ -   Step: 848, LR: 1.1863225806451614e-05, Loss: 0.5455862283706665
[2023-09-01 05:07:30,487] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 42%|████▏     | 849/1998 [3:13:12<4:23:20, 13.75s/it]09/01/2023 05:07:38 - INFO - __main__ -   Step: 849, LR: 1.1852903225806454e-05, Loss: 0.49430057406425476
[2023-09-01 05:07:44,737] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 850/1998 [3:13:26<4:23:33, 13.77s/it]09/01/2023 05:07:52 - INFO - __main__ -   Step: 850, LR: 1.1842580645161292e-05, Loss: 0.476483017206192
[2023-09-01 05:07:58,630] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 851/1998 [3:13:40<4:23:24, 13.78s/it]09/01/2023 05:08:06 - INFO - __main__ -   Step: 851, LR: 1.1832258064516128e-05, Loss: 0.43269455432891846
[2023-09-01 05:08:12,204] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 852/1998 [3:13:53<4:21:15, 13.68s/it]09/01/2023 05:08:19 - INFO - __main__ -   Step: 852, LR: 1.1821935483870968e-05, Loss: 0.4273489713668823
[2023-09-01 05:08:26,211] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 853/1998 [3:14:08<4:24:37, 13.87s/it]09/01/2023 05:08:33 - INFO - __main__ -   Step: 853, LR: 1.1811612903225806e-05, Loss: 0.4421566128730774
[2023-09-01 05:08:40,561] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 854/1998 [3:14:22<4:27:41, 14.04s/it]09/01/2023 05:08:48 - INFO - __main__ -   Step: 854, LR: 1.1801290322580646e-05, Loss: 0.5162283182144165
[2023-09-01 05:08:54,173] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 855/1998 [3:14:36<4:27:35, 14.05s/it]09/01/2023 05:09:02 - INFO - __main__ -   Step: 855, LR: 1.1790967741935484e-05, Loss: 0.45577508211135864
[2023-09-01 05:09:09,411] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 856/1998 [3:14:51<4:28:49, 14.12s/it]09/01/2023 05:09:16 - INFO - __main__ -   Step: 856, LR: 1.1780645161290323e-05, Loss: 0.5080945491790771
[2023-09-01 05:09:23,871] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 857/1998 [3:15:05<4:31:12, 14.26s/it]09/01/2023 05:09:31 - INFO - __main__ -   Step: 857, LR: 1.1770322580645161e-05, Loss: 0.4453542232513428
[2023-09-01 05:09:38,224] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 858/1998 [3:15:20<4:32:06, 14.32s/it]09/01/2023 05:09:45 - INFO - __main__ -   Step: 858, LR: 1.1760000000000001e-05, Loss: 0.49415552616119385
[2023-09-01 05:09:52,527] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 859/1998 [3:15:34<4:33:18, 14.40s/it]09/01/2023 05:10:00 - INFO - __main__ -   Step: 859, LR: 1.1749677419354839e-05, Loss: 0.5084943771362305
[2023-09-01 05:10:06,629] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 860/1998 [3:15:48<4:29:51, 14.23s/it]09/01/2023 05:10:14 - INFO - __main__ -   Step: 860, LR: 1.1739354838709679e-05, Loss: 0.4912703037261963
[2023-09-01 05:10:20,153] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 861/1998 [3:16:01<4:23:40, 13.91s/it]09/01/2023 05:10:27 - INFO - __main__ -   Step: 861, LR: 1.1729032258064517e-05, Loss: 0.5328272581100464
[2023-09-01 05:10:33,584] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 862/1998 [3:16:15<4:21:02, 13.79s/it]09/01/2023 05:10:40 - INFO - __main__ -   Step: 862, LR: 1.1718709677419355e-05, Loss: 0.46747925877571106
[2023-09-01 05:10:46,295] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 863/1998 [3:16:28<4:17:58, 13.64s/it]09/01/2023 05:10:54 - INFO - __main__ -   Step: 863, LR: 1.1708387096774194e-05, Loss: 0.43907737731933594
[2023-09-01 05:11:00,981] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 864/1998 [3:16:42<4:21:42, 13.85s/it]09/01/2023 05:11:08 - INFO - __main__ -   Step: 864, LR: 1.1698064516129032e-05, Loss: 0.5333976745605469
[2023-09-01 05:11:14,266] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 865/1998 [3:16:56<4:18:35, 13.69s/it]09/01/2023 05:11:21 - INFO - __main__ -   Step: 865, LR: 1.1687741935483872e-05, Loss: 0.5275543332099915
[2023-09-01 05:11:27,497] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 866/1998 [3:17:09<4:16:38, 13.60s/it]09/01/2023 05:11:35 - INFO - __main__ -   Step: 866, LR: 1.167741935483871e-05, Loss: 0.4706959128379822
[2023-09-01 05:11:41,471] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 867/1998 [3:17:23<4:17:29, 13.66s/it]09/01/2023 05:11:48 - INFO - __main__ -   Step: 867, LR: 1.166709677419355e-05, Loss: 0.5150087475776672
[2023-09-01 05:11:54,611] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 868/1998 [3:17:37<4:18:00, 13.70s/it]09/01/2023 05:12:02 - INFO - __main__ -   Step: 868, LR: 1.1656774193548388e-05, Loss: 0.44872376322746277
[2023-09-01 05:12:09,247] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 43%|████▎     | 869/1998 [3:17:52<4:24:30, 14.06s/it]09/01/2023 05:12:17 - INFO - __main__ -   Step: 869, LR: 1.1646451612903227e-05, Loss: 0.431358277797699
[2023-09-01 05:12:24,636] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▎     | 870/1998 [3:18:07<4:30:38, 14.40s/it]09/01/2023 05:12:32 - INFO - __main__ -   Step: 870, LR: 1.1636129032258065e-05, Loss: 0.4818502962589264
[2023-09-01 05:12:39,471] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▎     | 871/1998 [3:18:21<4:29:57, 14.37s/it]09/01/2023 05:12:47 - INFO - __main__ -   Step: 871, LR: 1.1625806451612905e-05, Loss: 0.46166202425956726
[2023-09-01 05:12:53,291] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▎     | 872/1998 [3:18:34<4:24:10, 14.08s/it]09/01/2023 05:13:00 - INFO - __main__ -   Step: 872, LR: 1.1615483870967743e-05, Loss: 0.5026166439056396
[2023-09-01 05:13:07,317] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▎     | 873/1998 [3:18:49<4:24:51, 14.13s/it]09/01/2023 05:13:14 - INFO - __main__ -   Step: 873, LR: 1.1605161290322583e-05, Loss: 0.46465951204299927
[2023-09-01 05:13:20,662] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▎     | 874/1998 [3:19:02<4:19:47, 13.87s/it]09/01/2023 05:13:27 - INFO - __main__ -   Step: 874, LR: 1.159483870967742e-05, Loss: 0.47651737928390503
[2023-09-01 05:13:33,844] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 875/1998 [3:19:16<4:19:01, 13.84s/it]09/01/2023 05:13:41 - INFO - __main__ -   Step: 875, LR: 1.1584516129032259e-05, Loss: 0.5039193630218506
[2023-09-01 05:13:48,636] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 876/1998 [3:19:30<4:20:52, 13.95s/it]09/01/2023 05:13:55 - INFO - __main__ -   Step: 876, LR: 1.1574193548387098e-05, Loss: 0.5389478206634521
[2023-09-01 05:14:03,039] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 877/1998 [3:19:45<4:24:03, 14.13s/it]09/01/2023 05:14:10 - INFO - __main__ -   Step: 877, LR: 1.1563870967741936e-05, Loss: 0.5189268589019775
[2023-09-01 05:14:17,038] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 878/1998 [3:19:59<4:24:43, 14.18s/it]09/01/2023 05:14:24 - INFO - __main__ -   Step: 878, LR: 1.1553548387096776e-05, Loss: 0.5485310554504395
[2023-09-01 05:14:30,756] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 879/1998 [3:20:12<4:20:58, 13.99s/it]09/01/2023 05:14:38 - INFO - __main__ -   Step: 879, LR: 1.1543225806451614e-05, Loss: 0.4323825538158417
[2023-09-01 05:14:44,175] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 880/1998 [3:20:25<4:15:29, 13.71s/it]09/01/2023 05:14:51 - INFO - __main__ -   Step: 880, LR: 1.1532903225806454e-05, Loss: 0.5164427161216736
[2023-09-01 05:14:57,511] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 881/1998 [3:20:39<4:13:56, 13.64s/it]09/01/2023 05:15:04 - INFO - __main__ -   Step: 881, LR: 1.1522580645161292e-05, Loss: 0.47804853320121765
[2023-09-01 05:15:12,043] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 882/1998 [3:20:55<4:26:51, 14.35s/it]09/01/2023 05:15:20 - INFO - __main__ -   Step: 882, LR: 1.1512258064516131e-05, Loss: 0.4631550908088684
[2023-09-01 05:15:29,040] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 883/1998 [3:21:11<4:37:25, 14.93s/it]09/01/2023 05:15:37 - INFO - __main__ -   Step: 883, LR: 1.150193548387097e-05, Loss: 0.5323247909545898
[2023-09-01 05:15:44,645] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 884/1998 [3:21:27<4:41:29, 15.16s/it]09/01/2023 05:15:52 - INFO - __main__ -   Step: 884, LR: 1.1491612903225809e-05, Loss: 0.43560683727264404
[2023-09-01 05:15:59,728] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 885/1998 [3:21:41<4:37:03, 14.94s/it]09/01/2023 05:16:07 - INFO - __main__ -   Step: 885, LR: 1.1481290322580647e-05, Loss: 0.47063541412353516
[2023-09-01 05:16:14,166] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 886/1998 [3:21:56<4:34:30, 14.81s/it]09/01/2023 05:16:21 - INFO - __main__ -   Step: 886, LR: 1.1470967741935487e-05, Loss: 0.4417952299118042
[2023-09-01 05:16:28,877] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 887/1998 [3:22:11<4:33:46, 14.78s/it]09/01/2023 05:16:36 - INFO - __main__ -   Step: 887, LR: 1.1460645161290323e-05, Loss: 0.48469093441963196
[2023-09-01 05:16:43,114] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 888/1998 [3:22:25<4:31:13, 14.66s/it]09/01/2023 05:16:50 - INFO - __main__ -   Step: 888, LR: 1.1450322580645161e-05, Loss: 0.48108789324760437
[2023-09-01 05:16:57,283] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 44%|████▍     | 889/1998 [3:22:40<4:31:57, 14.71s/it]09/01/2023 05:17:05 - INFO - __main__ -   Step: 889, LR: 1.144e-05, Loss: 0.4555476903915405
[2023-09-01 05:17:12,671] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 890/1998 [3:22:54<4:27:26, 14.48s/it]09/01/2023 05:17:19 - INFO - __main__ -   Step: 890, LR: 1.1429677419354839e-05, Loss: 0.5360134840011597
[2023-09-01 05:17:26,018] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 891/1998 [3:23:07<4:21:54, 14.20s/it]09/01/2023 05:17:33 - INFO - __main__ -   Step: 891, LR: 1.1419354838709678e-05, Loss: 0.4004082977771759
[2023-09-01 05:17:39,254] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 892/1998 [3:23:21<4:17:49, 13.99s/it]09/01/2023 05:17:46 - INFO - __main__ -   Step: 892, LR: 1.1409032258064516e-05, Loss: 0.513568103313446
[2023-09-01 05:17:52,824] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 893/1998 [3:23:35<4:17:23, 13.98s/it]09/01/2023 05:18:00 - INFO - __main__ -   Step: 893, LR: 1.1398709677419354e-05, Loss: 0.4487903118133545
[2023-09-01 05:18:07,635] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 894/1998 [3:23:49<4:20:31, 14.16s/it]09/01/2023 05:18:15 - INFO - __main__ -   Step: 894, LR: 1.1388387096774194e-05, Loss: 0.42334532737731934
[2023-09-01 05:18:21,374] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 895/1998 [3:24:03<4:18:30, 14.06s/it]09/01/2023 05:18:29 - INFO - __main__ -   Step: 895, LR: 1.1378064516129032e-05, Loss: 0.5426124334335327
[2023-09-01 05:18:34,960] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 896/1998 [3:24:17<4:15:34, 13.92s/it]09/01/2023 05:18:42 - INFO - __main__ -   Step: 896, LR: 1.1367741935483872e-05, Loss: 0.4911268353462219
[2023-09-01 05:18:49,000] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 897/1998 [3:24:31<4:16:30, 13.98s/it]09/01/2023 05:18:56 - INFO - __main__ -   Step: 897, LR: 1.135741935483871e-05, Loss: 0.4815782606601715
[2023-09-01 05:19:03,148] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 898/1998 [3:24:45<4:17:24, 14.04s/it]09/01/2023 05:19:10 - INFO - __main__ -   Step: 898, LR: 1.134709677419355e-05, Loss: 0.5050044655799866
[2023-09-01 05:19:17,039] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▍     | 899/1998 [3:24:58<4:14:14, 13.88s/it]09/01/2023 05:19:24 - INFO - __main__ -   Step: 899, LR: 1.1336774193548387e-05, Loss: 0.5020856857299805
[2023-09-01 05:19:31,437] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 900/1998 [3:25:13<4:15:46, 13.98s/it]09/01/2023 05:19:38 - INFO - __main__ -   Step: 900, LR: 1.1326451612903227e-05, Loss: 0.4763641953468323
09/01/2023 05:19:38 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900
09/01/2023 05:19:38 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 05:19:38,707] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 05:19:38,714] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 05:19:38,714] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 05:19:38,714] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 05:19:38,714] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 05:19:38,715] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 05:19:38,715] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 05:19:38,728] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 05:19:38,729] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 05:19:38,729] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 05:19:38,729] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 05:19:38,730] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 05:19:38,730] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 05:19:38,730] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 05:19:38,730] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 05:20:36,234] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 05:20:36,234] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 05:20:39,941] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 05:20:39,947] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 05:20:41,314] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 05:20:41,314] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 05:20:42,289] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 05:20:42,289] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 05:20:42,293] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 05:20:42,293] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 05:20:42,293] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 05:20:42,293] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 05:20:42 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/pytorch_model
09/01/2023 05:20:42 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/scheduler.bin
09/01/2023 05:20:42 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_900/random_states_0.pkl
09/01/2023 05:20:42 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:41,  5.45it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:47,  4.71it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:58,  3.85it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:01,  3.62it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.71it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.46it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:07,  3.28it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.45it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.66it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.81it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.89it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.02it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.08it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.16it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.21it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.24it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.25it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.21it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.01it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.91it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.00it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.09it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.14it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.17it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.98it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.61it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.80it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.64it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.85it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.99it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.86it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  4.00it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.89it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.70it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.80it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.93it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.03it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:50,  3.78it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.92it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.01it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.07it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.06it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.80it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.52it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.70it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.56it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.45it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.48it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:51,  3.42it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.55it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.47it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.41it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.76it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.61it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.78it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.85it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.89it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.99it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.04it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.07it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.10it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.13it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.14it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.17it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.13it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.19it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.99it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.86it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.80it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.91it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.04it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.12it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.83it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.96it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.61it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.71it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.85it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:37,  3.91it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.98it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.06it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.94it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.99it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.08it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.13it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.08it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.14it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.19it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.02it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.10it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.84it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.87it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.98it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.98it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  3.98it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:31,  4.05it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.06it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.10it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.13it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.17it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:29,  4.17it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.91it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.01it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.12it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.75it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.92it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.04it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.90it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.02it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:26,  4.09it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.08it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.16it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.18it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.21it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.25it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.27it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.27it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.26it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.30it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.86it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.61it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.80it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.93it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.95it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.08it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.89it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.03it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.93it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.06it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.13it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.21it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.23it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.30it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:19,  4.31it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.32it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.34it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.34it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.33it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.37it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.39it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.38it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.35it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.37it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.35it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.35it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.34it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.27it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.96it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.08it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.18it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.25it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.29it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.31it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:15,  4.29it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.32it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.35it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.35it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:14,  4.35it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.38it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.39it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.15it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.23it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.23it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.29it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.31it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.11it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.96it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.05it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.13it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.97it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.09it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.18it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.23it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:46<00:10,  4.25it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.27it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.31it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.12it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.11it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.19it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:09,  4.22it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.26it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.08it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.17it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.24it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.17it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.24it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.29it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.33it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.36it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.37it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.98it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.09it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.17it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.24it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.30it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.34it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.37it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.37it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.37it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.36it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.37it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.37it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.13it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.18it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.23it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.24it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.27it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:54<00:02,  4.29it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.34it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.26it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.29it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.33it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.34it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.35it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.36it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.38it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:56<00:00,  4.40it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.40it/s][A09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 05:21:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.96it/s]
09/01/2023 05:21:39 - INFO - __main__ -   Step: 900, Validation Metrics: {'accuracy': 0.7847421535043052, 'f1_micro': 0.7847421535043052, 'f1_macro': 0.4478440875980742, 'f1_weighted': 0.7541349510397538, 'f1_1': 0.875, 'f1_-1': 0.3500749625187406, 'f1_0': 0.1184573002754821, 'precision_micro': 0.7847421535043052, 'precision_macro': 0.5822611834017722, 'precision_weighted': 0.7502493613172752, 'precision_1': 0.8287557220141489, 'precision_-1': 0.4237749546279492, 'precision_0': 0.4942528735632184, 'recall_micro': 0.7847421535043052, 'recall_macro': 0.43073824919528664, 'recall_weighted': 0.7847421535043052, 'recall_1': 0.9267100977198697, 'recall_-1': 0.29821200510855683, 'recall_0': 0.06729264475743349}
[2023-09-01 05:21:47,119] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 901/1998 [3:27:29<15:24:33, 50.57s/it]09/01/2023 05:21:54 - INFO - __main__ -   Step: 901, LR: 1.1316129032258065e-05, Loss: 0.4856569766998291
[2023-09-01 05:22:01,469] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 902/1998 [3:27:43<12:05:55, 39.74s/it]09/01/2023 05:22:09 - INFO - __main__ -   Step: 902, LR: 1.1305806451612905e-05, Loss: 0.49509763717651367
[2023-09-01 05:22:15,219] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 903/1998 [3:27:57<9:44:58, 32.05s/it] 09/01/2023 05:22:23 - INFO - __main__ -   Step: 903, LR: 1.1295483870967743e-05, Loss: 0.46318700909614563
[2023-09-01 05:22:30,119] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 904/1998 [3:28:11<8:07:05, 26.71s/it]09/01/2023 05:22:37 - INFO - __main__ -   Step: 904, LR: 1.1285161290322582e-05, Loss: 0.4792802333831787
[2023-09-01 05:22:44,209] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 905/1998 [3:28:26<7:00:37, 23.09s/it]09/01/2023 05:22:52 - INFO - __main__ -   Step: 905, LR: 1.127483870967742e-05, Loss: 0.5596262812614441
[2023-09-01 05:22:58,139] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 906/1998 [3:28:40<6:09:24, 20.30s/it]09/01/2023 05:23:05 - INFO - __main__ -   Step: 906, LR: 1.126451612903226e-05, Loss: 0.3834577798843384
[2023-09-01 05:23:12,594] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 907/1998 [3:28:54<5:33:40, 18.35s/it]09/01/2023 05:23:19 - INFO - __main__ -   Step: 907, LR: 1.1254193548387098e-05, Loss: 0.49063774943351746
[2023-09-01 05:23:25,723] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 908/1998 [3:29:07<5:06:28, 16.87s/it]09/01/2023 05:23:33 - INFO - __main__ -   Step: 908, LR: 1.1243870967741936e-05, Loss: 0.5385700464248657
[2023-09-01 05:23:39,000] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 45%|████▌     | 909/1998 [3:29:20<4:44:26, 15.67s/it]09/01/2023 05:23:46 - INFO - __main__ -   Step: 909, LR: 1.1233548387096776e-05, Loss: 0.520897626876831
[2023-09-01 05:23:52,146] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 910/1998 [3:29:33<4:31:00, 14.95s/it]09/01/2023 05:23:59 - INFO - __main__ -   Step: 910, LR: 1.1223225806451614e-05, Loss: 0.467889666557312
[2023-09-01 05:24:05,475] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 911/1998 [3:29:47<4:26:41, 14.72s/it]09/01/2023 05:24:13 - INFO - __main__ -   Step: 911, LR: 1.1212903225806453e-05, Loss: 0.5204175114631653
[2023-09-01 05:24:20,086] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 912/1998 [3:30:01<4:22:36, 14.51s/it]09/01/2023 05:24:27 - INFO - __main__ -   Step: 912, LR: 1.1202580645161291e-05, Loss: 0.4865993857383728
[2023-09-01 05:24:33,272] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 913/1998 [3:30:15<4:19:54, 14.37s/it]09/01/2023 05:24:41 - INFO - __main__ -   Step: 913, LR: 1.1192258064516131e-05, Loss: 0.5389786958694458
[2023-09-01 05:24:47,310] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 914/1998 [3:30:29<4:13:23, 14.03s/it]09/01/2023 05:24:54 - INFO - __main__ -   Step: 914, LR: 1.1181935483870969e-05, Loss: 0.48836010694503784
[2023-09-01 05:25:00,857] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 915/1998 [3:30:43<4:15:00, 14.13s/it]09/01/2023 05:25:09 - INFO - __main__ -   Step: 915, LR: 1.1171612903225809e-05, Loss: 0.4545305371284485
[2023-09-01 05:25:15,494] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 916/1998 [3:30:57<4:11:16, 13.93s/it]09/01/2023 05:25:22 - INFO - __main__ -   Step: 916, LR: 1.1161290322580647e-05, Loss: 0.5098720788955688
[2023-09-01 05:25:30,628] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 917/1998 [3:31:12<4:20:38, 14.47s/it]09/01/2023 05:25:38 - INFO - __main__ -   Step: 917, LR: 1.1150967741935486e-05, Loss: 0.4789479970932007
[2023-09-01 05:25:44,461] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 918/1998 [3:31:26<4:15:47, 14.21s/it]09/01/2023 05:25:51 - INFO - __main__ -   Step: 918, LR: 1.1140645161290324e-05, Loss: 0.49291250109672546
[2023-09-01 05:25:58,138] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 919/1998 [3:31:40<4:15:12, 14.19s/it]09/01/2023 05:26:06 - INFO - __main__ -   Step: 919, LR: 1.1130322580645164e-05, Loss: 0.5080934762954712
[2023-09-01 05:26:12,531] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 920/1998 [3:31:54<4:14:31, 14.17s/it]09/01/2023 05:26:20 - INFO - __main__ -   Step: 920, LR: 1.1120000000000002e-05, Loss: 0.4608779847621918
[2023-09-01 05:26:26,400] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 921/1998 [3:32:07<4:09:28, 13.90s/it]09/01/2023 05:26:33 - INFO - __main__ -   Step: 921, LR: 1.110967741935484e-05, Loss: 0.409648597240448
[2023-09-01 05:26:39,509] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 922/1998 [3:32:20<4:03:32, 13.58s/it]09/01/2023 05:26:46 - INFO - __main__ -   Step: 922, LR: 1.1099354838709678e-05, Loss: 0.48685216903686523
[2023-09-01 05:26:52,165] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 923/1998 [3:32:34<4:04:53, 13.67s/it]09/01/2023 05:27:00 - INFO - __main__ -   Step: 923, LR: 1.1089032258064516e-05, Loss: 0.5372127294540405
[2023-09-01 05:27:06,561] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▌     | 924/1998 [3:32:48<4:05:43, 13.73s/it]09/01/2023 05:27:14 - INFO - __main__ -   Step: 924, LR: 1.1078709677419356e-05, Loss: 0.5691835880279541
[2023-09-01 05:27:20,120] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▋     | 925/1998 [3:33:01<4:03:30, 13.62s/it]09/01/2023 05:27:27 - INFO - __main__ -   Step: 925, LR: 1.1068387096774194e-05, Loss: 0.4897717833518982
[2023-09-01 05:27:32,930] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▋     | 926/1998 [3:33:14<4:00:36, 13.47s/it]09/01/2023 05:27:40 - INFO - __main__ -   Step: 926, LR: 1.1058064516129032e-05, Loss: 0.4595482051372528
[2023-09-01 05:27:46,303] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▋     | 927/1998 [3:33:28<4:01:11, 13.51s/it]09/01/2023 05:27:54 - INFO - __main__ -   Step: 927, LR: 1.1047741935483871e-05, Loss: 0.4826746881008148
[2023-09-01 05:28:00,452] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▋     | 928/1998 [3:33:42<4:04:00, 13.68s/it]09/01/2023 05:28:08 - INFO - __main__ -   Step: 928, LR: 1.103741935483871e-05, Loss: 0.42414480447769165
[2023-09-01 05:28:15,032] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 46%|████▋     | 929/1998 [3:33:57<4:08:19, 13.94s/it]09/01/2023 05:28:22 - INFO - __main__ -   Step: 929, LR: 1.1027096774193549e-05, Loss: 0.43485429883003235
[2023-09-01 05:28:28,797] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 930/1998 [3:34:10<4:04:25, 13.73s/it]09/01/2023 05:28:35 - INFO - __main__ -   Step: 930, LR: 1.1016774193548387e-05, Loss: 0.5031039714813232
[2023-09-01 05:28:42,865] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 931/1998 [3:34:25<4:10:06, 14.06s/it]09/01/2023 05:28:50 - INFO - __main__ -   Step: 931, LR: 1.1006451612903227e-05, Loss: 0.45891401171684265
[2023-09-01 05:28:56,959] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 932/1998 [3:34:39<4:09:04, 14.02s/it]09/01/2023 05:29:04 - INFO - __main__ -   Step: 932, LR: 1.0996129032258065e-05, Loss: 0.5390803217887878
[2023-09-01 05:29:10,815] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 933/1998 [3:34:53<4:10:59, 14.14s/it]09/01/2023 05:29:19 - INFO - __main__ -   Step: 933, LR: 1.0985806451612904e-05, Loss: 0.46658915281295776
[2023-09-01 05:29:26,823] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 934/1998 [3:35:09<4:18:07, 14.56s/it]09/01/2023 05:29:34 - INFO - __main__ -   Step: 934, LR: 1.0975483870967742e-05, Loss: 0.4551997780799866
[2023-09-01 05:29:42,037] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 935/1998 [3:35:24<4:22:50, 14.84s/it]09/01/2023 05:29:50 - INFO - __main__ -   Step: 935, LR: 1.0965161290322582e-05, Loss: 0.4895785450935364
[2023-09-01 05:29:56,927] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 936/1998 [3:35:38<4:18:59, 14.63s/it]09/01/2023 05:30:04 - INFO - __main__ -   Step: 936, LR: 1.095483870967742e-05, Loss: 0.5317293405532837
[2023-09-01 05:30:11,005] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 937/1998 [3:35:52<4:12:44, 14.29s/it]09/01/2023 05:30:17 - INFO - __main__ -   Step: 937, LR: 1.094451612903226e-05, Loss: 0.5028437376022339
[2023-09-01 05:30:24,774] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 938/1998 [3:36:07<4:15:25, 14.46s/it]09/01/2023 05:30:32 - INFO - __main__ -   Step: 938, LR: 1.0934193548387098e-05, Loss: 0.5396972894668579
[2023-09-01 05:30:39,550] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 939/1998 [3:36:22<4:18:13, 14.63s/it]09/01/2023 05:30:47 - INFO - __main__ -   Step: 939, LR: 1.0923870967741936e-05, Loss: 0.5064934492111206
[2023-09-01 05:30:54,354] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 940/1998 [3:36:36<4:18:48, 14.68s/it]09/01/2023 05:31:02 - INFO - __main__ -   Step: 940, LR: 1.0913548387096775e-05, Loss: 0.42966097593307495
[2023-09-01 05:31:08,281] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 941/1998 [3:36:49<4:08:48, 14.12s/it]09/01/2023 05:31:15 - INFO - __main__ -   Step: 941, LR: 1.0903225806451613e-05, Loss: 0.46959829330444336
[2023-09-01 05:31:21,416] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 942/1998 [3:37:03<4:08:49, 14.14s/it]09/01/2023 05:31:29 - INFO - __main__ -   Step: 942, LR: 1.0892903225806453e-05, Loss: 0.4248132109642029
[2023-09-01 05:31:35,548] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 943/1998 [3:37:17<4:05:33, 13.97s/it]09/01/2023 05:31:43 - INFO - __main__ -   Step: 943, LR: 1.0882580645161291e-05, Loss: 0.39051553606987
[2023-09-01 05:31:49,449] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 944/1998 [3:37:32<4:13:05, 14.41s/it]09/01/2023 05:31:58 - INFO - __main__ -   Step: 944, LR: 1.087225806451613e-05, Loss: 0.4835607409477234
[2023-09-01 05:32:05,725] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 945/1998 [3:37:48<4:18:38, 14.74s/it]09/01/2023 05:32:14 - INFO - __main__ -   Step: 945, LR: 1.0861935483870969e-05, Loss: 0.5286614298820496
[2023-09-01 05:32:20,506] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 946/1998 [3:38:02<4:15:04, 14.55s/it]09/01/2023 05:32:28 - INFO - __main__ -   Step: 946, LR: 1.0851612903225808e-05, Loss: 0.4664642810821533
[2023-09-01 05:32:34,353] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 947/1998 [3:38:16<4:12:00, 14.39s/it]09/01/2023 05:32:42 - INFO - __main__ -   Step: 947, LR: 1.0841290322580646e-05, Loss: 0.4907078742980957
[2023-09-01 05:32:47,598] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 948/1998 [3:38:29<4:05:26, 14.03s/it]09/01/2023 05:32:55 - INFO - __main__ -   Step: 948, LR: 1.0830967741935486e-05, Loss: 0.5054652690887451
[2023-09-01 05:33:01,499] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 47%|████▋     | 949/1998 [3:38:43<4:05:04, 14.02s/it]09/01/2023 05:33:09 - INFO - __main__ -   Step: 949, LR: 1.0820645161290324e-05, Loss: 0.4220873713493347
[2023-09-01 05:33:15,272] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 950/1998 [3:38:57<4:01:04, 13.80s/it]09/01/2023 05:33:22 - INFO - __main__ -   Step: 950, LR: 1.0810322580645164e-05, Loss: 0.5017908811569214
[2023-09-01 05:33:30,022] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 951/1998 [3:39:12<4:08:17, 14.23s/it]09/01/2023 05:33:37 - INFO - __main__ -   Step: 951, LR: 1.0800000000000002e-05, Loss: 0.48448383808135986
[2023-09-01 05:33:43,748] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 952/1998 [3:39:25<4:05:04, 14.06s/it]09/01/2023 05:33:51 - INFO - __main__ -   Step: 952, LR: 1.078967741935484e-05, Loss: 0.4760989844799042
[2023-09-01 05:33:57,779] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 953/1998 [3:39:39<4:03:19, 13.97s/it]09/01/2023 05:34:05 - INFO - __main__ -   Step: 953, LR: 1.077935483870968e-05, Loss: 0.49545079469680786
[2023-09-01 05:34:11,582] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 954/1998 [3:39:54<4:08:31, 14.28s/it]09/01/2023 05:34:20 - INFO - __main__ -   Step: 954, LR: 1.0769032258064517e-05, Loss: 0.5472066402435303
[2023-09-01 05:34:27,050] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 955/1998 [3:40:10<4:14:20, 14.63s/it]09/01/2023 05:34:35 - INFO - __main__ -   Step: 955, LR: 1.0758709677419357e-05, Loss: 0.49862924218177795
[2023-09-01 05:34:42,583] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 956/1998 [3:40:24<4:13:09, 14.58s/it]09/01/2023 05:34:50 - INFO - __main__ -   Step: 956, LR: 1.0748387096774195e-05, Loss: 0.507972240447998
[2023-09-01 05:34:56,016] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 957/1998 [3:40:37<4:06:24, 14.20s/it]09/01/2023 05:35:03 - INFO - __main__ -   Step: 957, LR: 1.0738064516129035e-05, Loss: 0.45474743843078613
[2023-09-01 05:35:09,744] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 958/1998 [3:40:51<4:05:11, 14.15s/it]09/01/2023 05:35:17 - INFO - __main__ -   Step: 958, LR: 1.0727741935483871e-05, Loss: 0.46398311853408813
[2023-09-01 05:35:23,808] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 959/1998 [3:41:05<4:02:42, 14.02s/it]09/01/2023 05:35:31 - INFO - __main__ -   Step: 959, LR: 1.0717419354838709e-05, Loss: 0.46662768721580505
[2023-09-01 05:35:37,783] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 960/1998 [3:41:20<4:05:27, 14.19s/it]09/01/2023 05:35:45 - INFO - __main__ -   Step: 960, LR: 1.0707096774193549e-05, Loss: 0.4734994173049927
[2023-09-01 05:35:51,912] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 961/1998 [3:41:34<4:03:07, 14.07s/it]09/01/2023 05:35:59 - INFO - __main__ -   Step: 961, LR: 1.0696774193548387e-05, Loss: 0.49996572732925415
[2023-09-01 05:36:06,079] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 962/1998 [3:41:49<4:07:47, 14.35s/it]09/01/2023 05:36:14 - INFO - __main__ -   Step: 962, LR: 1.0686451612903226e-05, Loss: 0.500897228717804
[2023-09-01 05:36:21,271] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 963/1998 [3:42:03<4:06:54, 14.31s/it]09/01/2023 05:36:28 - INFO - __main__ -   Step: 963, LR: 1.0676129032258064e-05, Loss: 0.484264075756073
[2023-09-01 05:36:35,315] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 964/1998 [3:42:18<4:11:37, 14.60s/it]09/01/2023 05:36:44 - INFO - __main__ -   Step: 964, LR: 1.0665806451612904e-05, Loss: 0.4791421890258789
[2023-09-01 05:36:52,284] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 965/1998 [3:42:34<4:18:39, 15.02s/it]09/01/2023 05:37:00 - INFO - __main__ -   Step: 965, LR: 1.0655483870967742e-05, Loss: 0.4971366822719574
[2023-09-01 05:37:07,233] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 966/1998 [3:42:49<4:15:37, 14.86s/it]09/01/2023 05:37:14 - INFO - __main__ -   Step: 966, LR: 1.0645161290322582e-05, Loss: 0.5392334461212158
[2023-09-01 05:37:20,710] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 967/1998 [3:43:03<4:10:44, 14.59s/it]09/01/2023 05:37:28 - INFO - __main__ -   Step: 967, LR: 1.063483870967742e-05, Loss: 0.48319822549819946
[2023-09-01 05:37:35,003] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 968/1998 [3:43:17<4:10:40, 14.60s/it]09/01/2023 05:37:43 - INFO - __main__ -   Step: 968, LR: 1.062451612903226e-05, Loss: 0.5166526436805725
[2023-09-01 05:37:49,830] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 48%|████▊     | 969/1998 [3:43:32<4:09:12, 14.53s/it]09/01/2023 05:37:57 - INFO - __main__ -   Step: 969, LR: 1.0614193548387097e-05, Loss: 0.5162890553474426
[2023-09-01 05:38:04,024] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▊     | 970/1998 [3:43:46<4:06:13, 14.37s/it]09/01/2023 05:38:11 - INFO - __main__ -   Step: 970, LR: 1.0603870967741935e-05, Loss: 0.49180102348327637
[2023-09-01 05:38:17,986] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▊     | 971/1998 [3:44:00<4:05:54, 14.37s/it]09/01/2023 05:38:25 - INFO - __main__ -   Step: 971, LR: 1.0593548387096775e-05, Loss: 0.5611814856529236
[2023-09-01 05:38:32,821] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▊     | 972/1998 [3:44:14<4:04:18, 14.29s/it]09/01/2023 05:38:39 - INFO - __main__ -   Step: 972, LR: 1.0583225806451613e-05, Loss: 0.4536421000957489
[2023-09-01 05:38:46,642] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▊     | 973/1998 [3:44:29<4:06:08, 14.41s/it]09/01/2023 05:38:54 - INFO - __main__ -   Step: 973, LR: 1.0572903225806453e-05, Loss: 0.5086513757705688
[2023-09-01 05:39:00,471] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▊     | 974/1998 [3:44:43<4:03:31, 14.27s/it]09/01/2023 05:39:08 - INFO - __main__ -   Step: 974, LR: 1.056258064516129e-05, Loss: 0.40795615315437317
[2023-09-01 05:39:15,162] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 975/1998 [3:44:58<4:09:54, 14.66s/it]09/01/2023 05:39:24 - INFO - __main__ -   Step: 975, LR: 1.055225806451613e-05, Loss: 0.4884335398674011
[2023-09-01 05:39:31,399] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 976/1998 [3:45:12<4:07:50, 14.55s/it]09/01/2023 05:39:38 - INFO - __main__ -   Step: 976, LR: 1.0541935483870968e-05, Loss: 0.4605582654476166
[2023-09-01 05:39:44,674] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 977/1998 [3:45:26<4:00:47, 14.15s/it]09/01/2023 05:39:51 - INFO - __main__ -   Step: 977, LR: 1.0531612903225808e-05, Loss: 0.49980488419532776
[2023-09-01 05:39:58,975] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 978/1998 [3:45:40<4:01:37, 14.21s/it]09/01/2023 05:40:06 - INFO - __main__ -   Step: 978, LR: 1.0521290322580646e-05, Loss: 0.48323968052864075
[2023-09-01 05:40:12,495] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 979/1998 [3:45:54<3:58:57, 14.07s/it]09/01/2023 05:40:19 - INFO - __main__ -   Step: 979, LR: 1.0510967741935486e-05, Loss: 0.46383774280548096
[2023-09-01 05:40:26,644] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 980/1998 [3:46:08<3:57:15, 13.98s/it]09/01/2023 05:40:33 - INFO - __main__ -   Step: 980, LR: 1.0500645161290324e-05, Loss: 0.5092465877532959
[2023-09-01 05:40:39,634] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 981/1998 [3:46:21<3:54:36, 13.84s/it]09/01/2023 05:40:47 - INFO - __main__ -   Step: 981, LR: 1.0490322580645163e-05, Loss: 0.47929060459136963
[2023-09-01 05:40:54,058] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 982/1998 [3:46:36<3:57:43, 14.04s/it]09/01/2023 05:41:01 - INFO - __main__ -   Step: 982, LR: 1.0480000000000001e-05, Loss: 0.46145594120025635
[2023-09-01 05:41:07,914] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 983/1998 [3:46:50<3:57:49, 14.06s/it]09/01/2023 05:41:15 - INFO - __main__ -   Step: 983, LR: 1.046967741935484e-05, Loss: 0.4830368161201477
[2023-09-01 05:41:21,451] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 984/1998 [3:47:03<3:54:35, 13.88s/it]09/01/2023 05:41:29 - INFO - __main__ -   Step: 984, LR: 1.0459354838709679e-05, Loss: 0.4873310923576355
[2023-09-01 05:41:35,269] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 985/1998 [3:47:17<3:53:50, 13.85s/it]09/01/2023 05:41:42 - INFO - __main__ -   Step: 985, LR: 1.0449032258064517e-05, Loss: 0.5012155175209045
[2023-09-01 05:41:49,343] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 986/1998 [3:47:31<3:55:03, 13.94s/it]09/01/2023 05:41:57 - INFO - __main__ -   Step: 986, LR: 1.0438709677419357e-05, Loss: 0.5308476686477661
[2023-09-01 05:42:03,865] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 987/1998 [3:47:45<3:56:47, 14.05s/it]09/01/2023 05:42:11 - INFO - __main__ -   Step: 987, LR: 1.0428387096774195e-05, Loss: 0.473871648311615
[2023-09-01 05:42:17,293] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 988/1998 [3:47:59<3:53:23, 13.86s/it]09/01/2023 05:42:24 - INFO - __main__ -   Step: 988, LR: 1.0418064516129034e-05, Loss: 0.5206009149551392
[2023-09-01 05:42:30,370] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 49%|████▉     | 989/1998 [3:48:13<3:53:15, 13.87s/it]09/01/2023 05:42:38 - INFO - __main__ -   Step: 989, LR: 1.0407741935483872e-05, Loss: 0.5117334127426147
[2023-09-01 05:42:45,004] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|████▉     | 990/1998 [3:48:27<3:53:07, 13.88s/it]09/01/2023 05:42:52 - INFO - __main__ -   Step: 990, LR: 1.0397419354838712e-05, Loss: 0.40335243940353394
[2023-09-01 05:42:59,199] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|████▉     | 991/1998 [3:48:41<3:54:49, 13.99s/it]09/01/2023 05:43:06 - INFO - __main__ -   Step: 991, LR: 1.038709677419355e-05, Loss: 0.4951651096343994
[2023-09-01 05:43:13,111] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|████▉     | 992/1998 [3:48:55<3:53:55, 13.95s/it]09/01/2023 05:43:20 - INFO - __main__ -   Step: 992, LR: 1.037677419354839e-05, Loss: 0.4313496947288513
[2023-09-01 05:43:26,849] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|████▉     | 993/1998 [3:49:08<3:48:16, 13.63s/it]09/01/2023 05:43:33 - INFO - __main__ -   Step: 993, LR: 1.0366451612903226e-05, Loss: 0.5369234085083008
[2023-09-01 05:43:39,593] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|████▉     | 994/1998 [3:49:21<3:46:53, 13.56s/it]09/01/2023 05:43:47 - INFO - __main__ -   Step: 994, LR: 1.0356129032258064e-05, Loss: 0.4898795485496521
[2023-09-01 05:43:52,695] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|████▉     | 995/1998 [3:49:33<3:40:30, 13.19s/it]09/01/2023 05:43:59 - INFO - __main__ -   Step: 995, LR: 1.0345806451612904e-05, Loss: 0.5116839408874512
[2023-09-01 05:44:04,841] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|████▉     | 996/1998 [3:49:47<3:40:45, 13.22s/it]09/01/2023 05:44:12 - INFO - __main__ -   Step: 996, LR: 1.0335483870967742e-05, Loss: 0.4739587903022766
[2023-09-01 05:44:18,974] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|████▉     | 997/1998 [3:50:00<3:43:33, 13.40s/it]09/01/2023 05:44:26 - INFO - __main__ -   Step: 997, LR: 1.0325161290322581e-05, Loss: 0.4536576271057129
[2023-09-01 05:44:32,782] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|████▉     | 998/1998 [3:50:15<3:49:22, 13.76s/it]09/01/2023 05:44:41 - INFO - __main__ -   Step: 998, LR: 1.031483870967742e-05, Loss: 0.5213799476623535
[2023-09-01 05:44:47,252] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 999/1998 [3:50:29<3:50:22, 13.84s/it]09/01/2023 05:44:55 - INFO - __main__ -   Step: 999, LR: 1.0304516129032259e-05, Loss: 0.5396820902824402
[2023-09-01 05:45:01,604] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 1000/1998 [3:50:43<3:50:04, 13.83s/it]09/01/2023 05:45:08 - INFO - __main__ -   Step: 1000, LR: 1.0294193548387097e-05, Loss: 0.46945446729660034
09/01/2023 05:45:08 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000
09/01/2023 05:45:08 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 05:45:08,894] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 05:45:08,900] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 05:45:08,900] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 05:45:08,900] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 05:45:08,900] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 05:45:08,902] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 05:45:08,902] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 05:45:08,915] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 05:45:08,915] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 05:45:08,915] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 05:45:08,916] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 05:45:08,917] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 05:45:08,917] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 05:45:08,917] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 05:45:08,917] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 05:46:09,470] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 05:46:09,470] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 05:46:10,396] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 05:46:10,396] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 05:46:12,392] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 05:46:12,393] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 05:46:12,472] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 05:46:12,472] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 05:46:12,476] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 05:46:12,476] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 05:46:12,476] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 05:46:12,476] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 05:46:12 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/pytorch_model
09/01/2023 05:46:12 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/scheduler.bin
09/01/2023 05:46:12 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1000/random_states_0.pkl
09/01/2023 05:46:12 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.94it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.93it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.96it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.68it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.76it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.48it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.46it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.65it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:57,  3.80it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.89it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.01it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.09it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.16it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.19it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:50,  4.22it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.25it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.21it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.01it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.91it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.00it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.08it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.14it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.19it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.01it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.62it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.82it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.64it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.85it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.97it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.84it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:49,  3.96it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:50,  3.86it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.67it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.78it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.92it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  3.99it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:50,  3.75it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.88it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  3.98it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.06it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.06it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.80it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.51it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.71it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.57it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.45it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.47it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:52,  3.42it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.55it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.45it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.41it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.45it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.40it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.59it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.76it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.57it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.76it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.83it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:43,  3.88it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.98it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:41,  4.01it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.08it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.11it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.16it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.16it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.17it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.13it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.17it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.98it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.84it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.79it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.05it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:37,  4.11it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.81it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:38,  3.94it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.60it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.71it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.85it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:37,  3.91it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.05it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.92it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.96it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.99it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.07it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.13it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.10it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.13it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.16it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.00it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.07it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.82it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.87it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.96it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.98it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.07it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.09it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.13it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.17it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:28,  4.22it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.20it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.81it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.93it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.01it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.13it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.76it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:28,  3.94it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.04it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.89it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.02it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:26,  4.08it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.11it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.18it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.19it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.24it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.26it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.25it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.28it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.25it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.29it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.86it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.57it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:26,  3.75it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:25,  3.88it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.92it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.06it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.90it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.03it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.92it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.06it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.13it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.21it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.25it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.29it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:19,  4.30it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.29it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.31it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.33it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.33it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.35it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.37it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.35it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.35it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.37it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.35it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.33it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.31it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.24it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.79it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:18,  3.93it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.04it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.11it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.20it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.25it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.30it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:41<00:15,  4.31it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.33it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.36it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.35it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.37it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.38it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.39it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:14,  4.13it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.21it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.24it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.29it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.27it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.08it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.81it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.94it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.04it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.15it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.98it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.11it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.21it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.25it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:46<00:10,  4.29it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:09,  4.32it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.36it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.13it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:47<00:09,  4.11it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.21it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.26it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.30it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.10it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.16it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.25it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.17it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.24it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.30it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.32it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.33it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.33it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.95it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.04it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:06,  4.15it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.22it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:51<00:05,  4.28it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.33it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.36it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.35it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.35it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.36it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.38it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.35it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.13it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.15it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.20it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.20it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.25it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:54<00:02,  4.32it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.33it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.25it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.31it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.33it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.32it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.34it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.36it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.38it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:56<00:00,  4.38it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.40it/s][A09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 05:47:09 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 05:47:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 05:47:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 05:47:10 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.96it/s]
09/01/2023 05:47:10 - INFO - __main__ -   Step: 1000, Validation Metrics: {'accuracy': 0.7978890843440423, 'f1_micro': 0.7978890843440423, 'f1_macro': 0.4285524687161126, 'f1_weighted': 0.756477307350648, 'f1_1': 0.883778677462888, 'f1_-1': 0.34190871369294606, 'f1_0': 0.05997001499250375, 'precision_micro': 0.7978890843440423, 'precision_macro': 0.6756303312535022, 'precision_weighted': 0.7691766866638687, 'precision_1': 0.8244536207070199, 'precision_-1': 0.4881516587677725, 'precision_0': 0.7142857142857143, 'recall_micro': 0.7978890843440423, 'recall_macro': 0.4155643261169752, 'recall_weighted': 0.7978890843440423, 'recall_1': 0.9523033969288041, 'recall_-1': 0.26309067688378035, 'recall_0': 0.03129890453834116}
[2023-09-01 05:47:17,250] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 1001/1998 [3:52:59<14:00:02, 50.55s/it]09/01/2023 05:47:25 - INFO - __main__ -   Step: 1001, LR: 1.0283870967741935e-05, Loss: 0.45657825469970703
[2023-09-01 05:47:32,440] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 1002/1998 [3:53:15<11:05:13, 40.07s/it]09/01/2023 05:47:40 - INFO - __main__ -   Step: 1002, LR: 1.0273548387096775e-05, Loss: 0.5734441876411438
[2023-09-01 05:47:47,679] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 1003/1998 [3:53:30<8:59:52, 32.56s/it] 09/01/2023 05:47:55 - INFO - __main__ -   Step: 1003, LR: 1.0263225806451613e-05, Loss: 0.5248748064041138
[2023-09-01 05:48:01,570] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 1004/1998 [3:53:43<7:22:54, 26.73s/it]09/01/2023 05:48:08 - INFO - __main__ -   Step: 1004, LR: 1.0252903225806452e-05, Loss: 0.5374326705932617
[2023-09-01 05:48:15,523] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 1005/1998 [3:53:57<6:18:40, 22.88s/it]09/01/2023 05:48:22 - INFO - __main__ -   Step: 1005, LR: 1.024258064516129e-05, Loss: 0.47641244530677795
[2023-09-01 05:48:30,053] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 1006/1998 [3:54:12<5:40:12, 20.58s/it]09/01/2023 05:48:38 - INFO - __main__ -   Step: 1006, LR: 1.023225806451613e-05, Loss: 0.5031864047050476
[2023-09-01 05:48:44,301] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 1007/1998 [3:54:25<5:04:39, 18.45s/it]09/01/2023 05:48:51 - INFO - __main__ -   Step: 1007, LR: 1.0221935483870968e-05, Loss: 0.4105725586414337
[2023-09-01 05:48:57,493] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 50%|█████     | 1008/1998 [3:54:39<4:40:47, 17.02s/it]09/01/2023 05:49:05 - INFO - __main__ -   Step: 1008, LR: 1.0211612903225808e-05, Loss: 0.4380907416343689
[2023-09-01 05:49:11,029] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1009/1998 [3:54:53<4:24:14, 16.03s/it]09/01/2023 05:49:18 - INFO - __main__ -   Step: 1009, LR: 1.0201290322580646e-05, Loss: 0.46803146600723267
[2023-09-01 05:49:24,621] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1010/1998 [3:55:06<4:10:37, 15.22s/it]09/01/2023 05:49:32 - INFO - __main__ -   Step: 1010, LR: 1.0190967741935485e-05, Loss: 0.46253037452697754
[2023-09-01 05:49:38,174] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1011/1998 [3:55:20<4:05:49, 14.94s/it]09/01/2023 05:49:46 - INFO - __main__ -   Step: 1011, LR: 1.0180645161290323e-05, Loss: 0.4296166002750397
[2023-09-01 05:49:52,650] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1012/1998 [3:55:34<3:56:13, 14.38s/it]09/01/2023 05:49:59 - INFO - __main__ -   Step: 1012, LR: 1.0170322580645163e-05, Loss: 0.5043405294418335
[2023-09-01 05:50:05,336] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1013/1998 [3:55:47<3:51:59, 14.13s/it]09/01/2023 05:50:13 - INFO - __main__ -   Step: 1013, LR: 1.0160000000000001e-05, Loss: 0.407103031873703
[2023-09-01 05:50:19,218] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1014/1998 [3:56:01<3:50:34, 14.06s/it]09/01/2023 05:50:27 - INFO - __main__ -   Step: 1014, LR: 1.0149677419354839e-05, Loss: 0.4768851399421692
[2023-09-01 05:50:34,232] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1015/1998 [3:56:16<3:55:20, 14.37s/it]09/01/2023 05:50:42 - INFO - __main__ -   Step: 1015, LR: 1.0139354838709679e-05, Loss: 0.45142635703086853
[2023-09-01 05:50:49,252] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1016/1998 [3:56:30<3:54:26, 14.32s/it]09/01/2023 05:50:56 - INFO - __main__ -   Step: 1016, LR: 1.0129032258064517e-05, Loss: 0.5700547099113464
[2023-09-01 05:51:02,051] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1017/1998 [3:56:44<3:49:02, 14.01s/it]09/01/2023 05:51:09 - INFO - __main__ -   Step: 1017, LR: 1.0118709677419356e-05, Loss: 0.4259749948978424
[2023-09-01 05:51:15,938] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1018/1998 [3:56:57<3:48:20, 13.98s/it]09/01/2023 05:51:23 - INFO - __main__ -   Step: 1018, LR: 1.0108387096774194e-05, Loss: 0.512350857257843
[2023-09-01 05:51:30,011] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1019/1998 [3:57:11<3:47:06, 13.92s/it]09/01/2023 05:51:37 - INFO - __main__ -   Step: 1019, LR: 1.0098064516129034e-05, Loss: 0.48989659547805786
[2023-09-01 05:51:44,210] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1020/1998 [3:57:26<3:51:02, 14.17s/it]09/01/2023 05:51:52 - INFO - __main__ -   Step: 1020, LR: 1.0087741935483872e-05, Loss: 0.44571468234062195
[2023-09-01 05:51:57,911] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1021/1998 [3:57:40<3:49:37, 14.10s/it]09/01/2023 05:52:05 - INFO - __main__ -   Step: 1021, LR: 1.0077419354838712e-05, Loss: 0.5075187683105469
[2023-09-01 05:52:12,242] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1022/1998 [3:57:54<3:49:18, 14.10s/it]09/01/2023 05:52:20 - INFO - __main__ -   Step: 1022, LR: 1.006709677419355e-05, Loss: 0.4460429847240448
[2023-09-01 05:52:26,955] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████     | 1023/1998 [3:58:08<3:48:43, 14.08s/it]09/01/2023 05:52:34 - INFO - __main__ -   Step: 1023, LR: 1.005677419354839e-05, Loss: 0.5047956109046936
[2023-09-01 05:52:40,573] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████▏    | 1024/1998 [3:58:22<3:49:36, 14.14s/it]09/01/2023 05:52:48 - INFO - __main__ -   Step: 1024, LR: 1.0046451612903227e-05, Loss: 0.43868350982666016
[2023-09-01 05:52:54,585] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████▏    | 1025/1998 [3:58:37<3:49:37, 14.16s/it]09/01/2023 05:53:02 - INFO - __main__ -   Step: 1025, LR: 1.0036129032258067e-05, Loss: 0.4855533838272095
[2023-09-01 05:53:09,278] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████▏    | 1026/1998 [3:58:51<3:49:48, 14.19s/it]09/01/2023 05:53:16 - INFO - __main__ -   Step: 1026, LR: 1.0025806451612905e-05, Loss: 0.506847620010376
[2023-09-01 05:53:23,861] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████▏    | 1027/1998 [3:59:05<3:51:31, 14.31s/it]09/01/2023 05:53:31 - INFO - __main__ -   Step: 1027, LR: 1.0015483870967743e-05, Loss: 0.535134494304657
[2023-09-01 05:53:38,331] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 51%|█████▏    | 1028/1998 [3:59:20<3:50:57, 14.29s/it]09/01/2023 05:53:45 - INFO - __main__ -   Step: 1028, LR: 1.0005161290322583e-05, Loss: 0.3954681158065796
[2023-09-01 05:53:52,333] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1029/1998 [3:59:34<3:51:35, 14.34s/it]09/01/2023 05:54:00 - INFO - __main__ -   Step: 1029, LR: 9.99483870967742e-06, Loss: 0.498793363571167
[2023-09-01 05:54:07,279] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1030/1998 [3:59:48<3:51:36, 14.36s/it]09/01/2023 05:54:14 - INFO - __main__ -   Step: 1030, LR: 9.984516129032259e-06, Loss: 0.5143116116523743
[2023-09-01 05:54:21,611] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1031/1998 [4:00:05<4:00:54, 14.95s/it]09/01/2023 05:54:30 - INFO - __main__ -   Step: 1031, LR: 9.974193548387098e-06, Loss: 0.43050891160964966
[2023-09-01 05:54:37,025] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1032/1998 [4:00:18<3:54:03, 14.54s/it]09/01/2023 05:54:44 - INFO - __main__ -   Step: 1032, LR: 9.963870967741936e-06, Loss: 0.42587846517562866
[2023-09-01 05:54:50,348] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1033/1998 [4:00:31<3:46:09, 14.06s/it]09/01/2023 05:54:57 - INFO - __main__ -   Step: 1033, LR: 9.953548387096776e-06, Loss: 0.4128495156764984
[2023-09-01 05:55:03,237] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1034/1998 [4:00:45<3:41:35, 13.79s/it]09/01/2023 05:55:10 - INFO - __main__ -   Step: 1034, LR: 9.943225806451614e-06, Loss: 0.4803382456302643
[2023-09-01 05:55:16,016] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1035/1998 [4:00:58<3:37:57, 13.58s/it]09/01/2023 05:55:23 - INFO - __main__ -   Step: 1035, LR: 9.932903225806454e-06, Loss: 0.4823525547981262
[2023-09-01 05:55:29,839] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1036/1998 [4:01:11<3:37:49, 13.59s/it]09/01/2023 05:55:37 - INFO - __main__ -   Step: 1036, LR: 9.922580645161292e-06, Loss: 0.545616626739502
[2023-09-01 05:55:44,042] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1037/1998 [4:01:26<3:41:18, 13.82s/it]09/01/2023 05:55:51 - INFO - __main__ -   Step: 1037, LR: 9.91225806451613e-06, Loss: 0.43494975566864014
[2023-09-01 05:55:57,298] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1038/1998 [4:01:39<3:39:37, 13.73s/it]09/01/2023 05:56:05 - INFO - __main__ -   Step: 1038, LR: 9.901935483870968e-06, Loss: 0.456958144903183
[2023-09-01 05:56:11,218] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1039/1998 [4:01:53<3:38:25, 13.67s/it]09/01/2023 05:56:18 - INFO - __main__ -   Step: 1039, LR: 9.891612903225807e-06, Loss: 0.4824942648410797
[2023-09-01 05:56:25,304] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1040/1998 [4:02:07<3:43:12, 13.98s/it]09/01/2023 05:56:33 - INFO - __main__ -   Step: 1040, LR: 9.881290322580645e-06, Loss: 0.4481193423271179
[2023-09-01 05:56:39,858] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1041/1998 [4:02:21<3:42:15, 13.93s/it]09/01/2023 05:56:47 - INFO - __main__ -   Step: 1041, LR: 9.870967741935485e-06, Loss: 0.47923508286476135
[2023-09-01 05:56:54,277] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1042/1998 [4:02:36<3:47:22, 14.27s/it]09/01/2023 05:57:02 - INFO - __main__ -   Step: 1042, LR: 9.860645161290323e-06, Loss: 0.4750796854496002
[2023-09-01 05:57:08,773] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1043/1998 [4:02:50<3:46:21, 14.22s/it]09/01/2023 05:57:16 - INFO - __main__ -   Step: 1043, LR: 9.850322580645163e-06, Loss: 0.5443951487541199
[2023-09-01 05:57:22,395] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1044/1998 [4:03:03<3:41:13, 13.91s/it]09/01/2023 05:57:29 - INFO - __main__ -   Step: 1044, LR: 9.84e-06, Loss: 0.44588732719421387
[2023-09-01 05:57:36,024] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1045/1998 [4:03:17<3:40:27, 13.88s/it]09/01/2023 05:57:43 - INFO - __main__ -   Step: 1045, LR: 9.829677419354839e-06, Loss: 0.42555469274520874
[2023-09-01 05:57:49,826] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1046/1998 [4:03:31<3:39:43, 13.85s/it]09/01/2023 05:57:57 - INFO - __main__ -   Step: 1046, LR: 9.819354838709678e-06, Loss: 0.45085063576698303
[2023-09-01 05:58:03,705] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1047/1998 [4:03:45<3:38:14, 13.77s/it]09/01/2023 05:58:10 - INFO - __main__ -   Step: 1047, LR: 9.809032258064516e-06, Loss: 0.4707973003387451
[2023-09-01 05:58:17,037] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 52%|█████▏    | 1048/1998 [4:03:58<3:35:52, 13.63s/it]09/01/2023 05:58:24 - INFO - __main__ -   Step: 1048, LR: 9.798709677419356e-06, Loss: 0.5023822784423828
[2023-09-01 05:58:30,675] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1049/1998 [4:04:12<3:39:48, 13.90s/it]09/01/2023 05:58:38 - INFO - __main__ -   Step: 1049, LR: 9.788387096774194e-06, Loss: 0.4762326180934906
[2023-09-01 05:58:44,771] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1050/1998 [4:04:26<3:38:17, 13.82s/it]09/01/2023 05:58:52 - INFO - __main__ -   Step: 1050, LR: 9.778064516129034e-06, Loss: 0.518105685710907
[2023-09-01 05:58:58,465] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1051/1998 [4:04:40<3:38:00, 13.81s/it]09/01/2023 05:59:05 - INFO - __main__ -   Step: 1051, LR: 9.767741935483872e-06, Loss: 0.4582691192626953
[2023-09-01 05:59:12,995] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1052/1998 [4:04:54<3:39:43, 13.94s/it]09/01/2023 05:59:20 - INFO - __main__ -   Step: 1052, LR: 9.757419354838711e-06, Loss: 0.47289949655532837
[2023-09-01 05:59:26,814] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1053/1998 [4:05:09<3:45:15, 14.30s/it]09/01/2023 05:59:35 - INFO - __main__ -   Step: 1053, LR: 9.74709677419355e-06, Loss: 0.49834364652633667
[2023-09-01 05:59:42,019] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1054/1998 [4:05:24<3:46:17, 14.38s/it]09/01/2023 05:59:49 - INFO - __main__ -   Step: 1054, LR: 9.736774193548389e-06, Loss: 0.5282186269760132
[2023-09-01 05:59:56,748] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1055/1998 [4:05:39<3:47:14, 14.46s/it]09/01/2023 06:00:04 - INFO - __main__ -   Step: 1055, LR: 9.726451612903227e-06, Loss: 0.48850908875465393
[2023-09-01 06:00:10,257] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1056/1998 [4:05:52<3:40:23, 14.04s/it]09/01/2023 06:00:17 - INFO - __main__ -   Step: 1056, LR: 9.716129032258065e-06, Loss: 0.4791797995567322
[2023-09-01 06:00:23,349] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1057/1998 [4:06:05<3:39:08, 13.97s/it]09/01/2023 06:00:31 - INFO - __main__ -   Step: 1057, LR: 9.705806451612903e-06, Loss: 0.47136375308036804
[2023-09-01 06:00:38,206] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1058/1998 [4:06:20<3:39:42, 14.02s/it]09/01/2023 06:00:45 - INFO - __main__ -   Step: 1058, LR: 9.695483870967743e-06, Loss: 0.4197688698768616
[2023-09-01 06:00:52,470] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1059/1998 [4:06:34<3:43:14, 14.26s/it]09/01/2023 06:01:00 - INFO - __main__ -   Step: 1059, LR: 9.68516129032258e-06, Loss: 0.4316263198852539
[2023-09-01 06:01:06,256] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1060/1998 [4:06:47<3:36:29, 13.85s/it]09/01/2023 06:01:13 - INFO - __main__ -   Step: 1060, LR: 9.67483870967742e-06, Loss: 0.515069842338562
[2023-09-01 06:01:19,315] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1061/1998 [4:07:01<3:36:54, 13.89s/it]09/01/2023 06:01:27 - INFO - __main__ -   Step: 1061, LR: 9.664516129032258e-06, Loss: 0.5479190945625305
[2023-09-01 06:01:34,456] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1062/1998 [4:07:16<3:42:49, 14.28s/it]09/01/2023 06:01:42 - INFO - __main__ -   Step: 1062, LR: 9.654193548387098e-06, Loss: 0.44740885496139526
[2023-09-01 06:01:49,959] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1063/1998 [4:07:31<3:45:27, 14.47s/it]09/01/2023 06:01:57 - INFO - __main__ -   Step: 1063, LR: 9.643870967741936e-06, Loss: 0.47665655612945557
[2023-09-01 06:02:03,482] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1064/1998 [4:07:45<3:42:07, 14.27s/it]09/01/2023 06:02:11 - INFO - __main__ -   Step: 1064, LR: 9.633548387096776e-06, Loss: 0.48279881477355957
[2023-09-01 06:02:17,699] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1065/1998 [4:07:59<3:41:55, 14.27s/it]09/01/2023 06:02:25 - INFO - __main__ -   Step: 1065, LR: 9.623225806451614e-06, Loss: 0.5023066997528076
[2023-09-01 06:02:31,564] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1066/1998 [4:08:13<3:39:39, 14.14s/it]09/01/2023 06:02:39 - INFO - __main__ -   Step: 1066, LR: 9.612903225806453e-06, Loss: 0.46065348386764526
[2023-09-01 06:02:46,317] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1067/1998 [4:08:28<3:43:40, 14.42s/it]09/01/2023 06:02:54 - INFO - __main__ -   Step: 1067, LR: 9.602580645161291e-06, Loss: 0.4452587962150574
[2023-09-01 06:03:00,291] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 53%|█████▎    | 1068/1998 [4:08:42<3:38:46, 14.11s/it]09/01/2023 06:03:07 - INFO - __main__ -   Step: 1068, LR: 9.59225806451613e-06, Loss: 0.47280189394950867
[2023-09-01 06:03:14,401] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▎    | 1069/1998 [4:08:56<3:37:23, 14.04s/it]09/01/2023 06:03:21 - INFO - __main__ -   Step: 1069, LR: 9.581935483870969e-06, Loss: 0.40567171573638916
[2023-09-01 06:03:28,074] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▎    | 1070/1998 [4:09:10<3:37:40, 14.07s/it]09/01/2023 06:03:35 - INFO - __main__ -   Step: 1070, LR: 9.571612903225807e-06, Loss: 0.45861613750457764
[2023-09-01 06:03:42,242] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▎    | 1071/1998 [4:09:24<3:38:14, 14.13s/it]09/01/2023 06:03:50 - INFO - __main__ -   Step: 1071, LR: 9.561290322580647e-06, Loss: 0.42436620593070984
[2023-09-01 06:03:55,913] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▎    | 1072/1998 [4:09:37<3:34:58, 13.93s/it]09/01/2023 06:04:03 - INFO - __main__ -   Step: 1072, LR: 9.550967741935485e-06, Loss: 0.4573479890823364
[2023-09-01 06:04:10,284] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▎    | 1073/1998 [4:09:52<3:36:48, 14.06s/it]09/01/2023 06:04:17 - INFO - __main__ -   Step: 1073, LR: 9.540645161290323e-06, Loss: 0.4979301691055298
[2023-09-01 06:04:24,453] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1074/1998 [4:10:05<3:34:34, 13.93s/it]09/01/2023 06:04:31 - INFO - __main__ -   Step: 1074, LR: 9.530322580645162e-06, Loss: 0.44846031069755554
[2023-09-01 06:04:38,647] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1075/1998 [4:10:20<3:35:44, 14.02s/it]09/01/2023 06:04:45 - INFO - __main__ -   Step: 1075, LR: 9.52e-06, Loss: 0.4897424578666687
[2023-09-01 06:04:53,050] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1076/1998 [4:10:34<3:37:07, 14.13s/it]09/01/2023 06:05:00 - INFO - __main__ -   Step: 1076, LR: 9.509677419354838e-06, Loss: 0.5787240266799927
[2023-09-01 06:05:07,216] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1077/1998 [4:10:49<3:39:12, 14.28s/it]09/01/2023 06:05:14 - INFO - __main__ -   Step: 1077, LR: 9.499354838709678e-06, Loss: 0.45623600482940674
[2023-09-01 06:05:21,276] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1078/1998 [4:11:02<3:35:51, 14.08s/it]09/01/2023 06:05:28 - INFO - __main__ -   Step: 1078, LR: 9.489032258064516e-06, Loss: 0.448689728975296
[2023-09-01 06:05:33,904] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1079/1998 [4:11:16<3:32:28, 13.87s/it]09/01/2023 06:05:41 - INFO - __main__ -   Step: 1079, LR: 9.478709677419356e-06, Loss: 0.5377371311187744
[2023-09-01 06:05:48,133] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1080/1998 [4:11:30<3:34:06, 13.99s/it]09/01/2023 06:05:55 - INFO - __main__ -   Step: 1080, LR: 9.468387096774194e-06, Loss: 0.48679542541503906
[2023-09-01 06:06:02,110] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1081/1998 [4:11:44<3:33:55, 14.00s/it]09/01/2023 06:06:10 - INFO - __main__ -   Step: 1081, LR: 9.458064516129033e-06, Loss: 0.4563835859298706
[2023-09-01 06:06:16,067] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1082/1998 [4:11:58<3:32:02, 13.89s/it]09/01/2023 06:06:23 - INFO - __main__ -   Step: 1082, LR: 9.447741935483871e-06, Loss: 0.552483081817627
[2023-09-01 06:06:30,120] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1083/1998 [4:12:11<3:31:34, 13.87s/it]09/01/2023 06:06:37 - INFO - __main__ -   Step: 1083, LR: 9.437419354838711e-06, Loss: 0.5560643672943115
[2023-09-01 06:06:44,151] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1084/1998 [4:12:26<3:33:18, 14.00s/it]09/01/2023 06:06:51 - INFO - __main__ -   Step: 1084, LR: 9.427096774193549e-06, Loss: 0.47443532943725586
[2023-09-01 06:06:58,024] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1085/1998 [4:12:40<3:35:09, 14.14s/it]09/01/2023 06:07:06 - INFO - __main__ -   Step: 1085, LR: 9.416774193548389e-06, Loss: 0.4862971305847168
[2023-09-01 06:07:12,378] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1086/1998 [4:12:53<3:29:40, 13.79s/it]09/01/2023 06:07:19 - INFO - __main__ -   Step: 1086, LR: 9.406451612903227e-06, Loss: 0.5117526054382324
[2023-09-01 06:07:25,768] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1087/1998 [4:13:08<3:34:30, 14.13s/it]09/01/2023 06:07:34 - INFO - __main__ -   Step: 1087, LR: 9.396129032258066e-06, Loss: 0.5177381038665771
[2023-09-01 06:07:40,195] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 54%|█████▍    | 1088/1998 [4:13:22<3:32:44, 14.03s/it]09/01/2023 06:07:47 - INFO - __main__ -   Step: 1088, LR: 9.385806451612904e-06, Loss: 0.44761204719543457
[2023-09-01 06:07:54,752] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1089/1998 [4:13:36<3:31:52, 13.99s/it]09/01/2023 06:08:01 - INFO - __main__ -   Step: 1089, LR: 9.375483870967742e-06, Loss: 0.5003690719604492
[2023-09-01 06:08:08,198] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1090/1998 [4:13:50<3:33:34, 14.11s/it]09/01/2023 06:08:16 - INFO - __main__ -   Step: 1090, LR: 9.365161290322582e-06, Loss: 0.4543542265892029
[2023-09-01 06:08:22,719] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1091/1998 [4:14:05<3:35:29, 14.26s/it]09/01/2023 06:08:30 - INFO - __main__ -   Step: 1091, LR: 9.35483870967742e-06, Loss: 0.45310550928115845
[2023-09-01 06:08:37,100] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1092/1998 [4:14:18<3:31:52, 14.03s/it]09/01/2023 06:08:44 - INFO - __main__ -   Step: 1092, LR: 9.344516129032258e-06, Loss: 0.4193323850631714
[2023-09-01 06:08:51,023] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1093/1998 [4:14:33<3:34:39, 14.23s/it]09/01/2023 06:08:59 - INFO - __main__ -   Step: 1093, LR: 9.334193548387098e-06, Loss: 0.4542301893234253
[2023-09-01 06:09:05,635] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1094/1998 [4:14:47<3:31:43, 14.05s/it]09/01/2023 06:09:12 - INFO - __main__ -   Step: 1094, LR: 9.323870967741936e-06, Loss: 0.46652859449386597
[2023-09-01 06:09:19,660] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1095/1998 [4:15:01<3:34:57, 14.28s/it]09/01/2023 06:09:27 - INFO - __main__ -   Step: 1095, LR: 9.313548387096775e-06, Loss: 0.5634851455688477
[2023-09-01 06:09:34,640] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1096/1998 [4:15:17<3:38:35, 14.54s/it]09/01/2023 06:09:42 - INFO - __main__ -   Step: 1096, LR: 9.303225806451613e-06, Loss: 0.45976555347442627
[2023-09-01 06:09:48,725] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1097/1998 [4:15:30<3:34:48, 14.30s/it]09/01/2023 06:09:56 - INFO - __main__ -   Step: 1097, LR: 9.292903225806453e-06, Loss: 0.4188578724861145
[2023-09-01 06:10:03,107] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▍    | 1098/1998 [4:15:45<3:35:53, 14.39s/it]09/01/2023 06:10:10 - INFO - __main__ -   Step: 1098, LR: 9.282580645161291e-06, Loss: 0.42185333371162415
[2023-09-01 06:10:17,835] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1099/1998 [4:15:59<3:34:39, 14.33s/it]09/01/2023 06:10:25 - INFO - __main__ -   Step: 1099, LR: 9.272258064516129e-06, Loss: 0.5756028294563293
[2023-09-01 06:10:31,982] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1100/1998 [4:16:13<3:34:01, 14.30s/it]09/01/2023 06:10:39 - INFO - __main__ -   Step: 1100, LR: 9.261935483870969e-06, Loss: 0.46306112408638
09/01/2023 06:10:39 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100
09/01/2023 06:10:39 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 06:10:39,391] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 06:10:39,397] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 06:10:39,398] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 06:10:39,397] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 06:10:39,398] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 06:10:39,399] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 06:10:39,399] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 06:10:39,412] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 06:10:39,412] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 06:10:39,413] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 06:10:39,413] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 06:10:39,414] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 06:10:39,414] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 06:10:39,414] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 06:10:39,414] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 06:11:38,204] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 06:11:38,204] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 06:11:38,220] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 06:11:38,220] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 06:11:42,375] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 06:11:42,375] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 06:11:42,989] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 06:11:42,990] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 06:11:42,994] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 06:11:42,994] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 06:11:42,994] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 06:11:42,994] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 06:11:42 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/pytorch_model
09/01/2023 06:11:42 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/scheduler.bin
09/01/2023 06:11:42 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1100/random_states_0.pkl
09/01/2023 06:11:42 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.94it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.91it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.96it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.67it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.75it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.48it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.47it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.67it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.82it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.91it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.02it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.09it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.16it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.24it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.26it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.28it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.24it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:55,  3.77it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:55,  3.71it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:53,  3.83it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:51,  3.97it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:50,  4.06it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:49,  4.12it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.96it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.60it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.79it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.63it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.84it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.95it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.82it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:49,  3.97it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:50,  3.87it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:09<00:52,  3.68it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.79it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.94it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.04it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:10<00:50,  3.78it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.91it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.02it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.11it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.09it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.82it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:51,  3.52it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:48,  3.72it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.58it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.45it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.48it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:51,  3.43it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.57it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.48it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.41it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.44it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:51,  3.39it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:48,  3.58it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.76it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.60it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.79it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.85it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:16<00:42,  3.90it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.00it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.03it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.08it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.13it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.16it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.17it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.20it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.15it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.19it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.99it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.86it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.80it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.04it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:37,  4.09it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.82it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:38,  3.95it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.60it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.71it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.80it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.87it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.93it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.06it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.93it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.07it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.13it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.08it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.13it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.19it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.02it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.12it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.85it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.88it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.96it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.98it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  3.99it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.08it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.09it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.13it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.17it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:28,  4.21it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.18it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.79it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.92it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.00it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:29,  4.03it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.10it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.74it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.92it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.04it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.88it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:30<00:27,  4.00it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.07it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.07it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:26,  4.15it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.18it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.23it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.24it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.25it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.28it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.26it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.32it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.88it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.58it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.79it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.92it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.94it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.08it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.90it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.05it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.94it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.09it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.14it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.22it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.25it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.31it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:19,  4.31it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.30it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.32it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.35it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.35it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.38it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.41it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.37it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.37it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.40it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.36it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.38it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.33it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.27it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.81it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.95it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.08it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.18it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.25it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.26it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.31it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:15,  4.32it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.35it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.39it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.41it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.42it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.45it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.45it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.17it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.24it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.25it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.31it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.30it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.11it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.96it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.07it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.16it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.99it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.13it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.22it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.26it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.29it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:09,  4.32it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.35it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.13it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.12it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.22it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.26it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.31it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.11it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.17it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:07,  4.26it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.18it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.25it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.31it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.34it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.36it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.36it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.97it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.10it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.20it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.27it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.33it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.37it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.40it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.39it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.38it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.39it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.40it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.40it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.16it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.20it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.23it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.26it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.29it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.34it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.36it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.27it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.33it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.36it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.35it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.38it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.39it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.41it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.44it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.43it/s][A09/01/2023 06:12:39 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 06:12:40 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.97it/s]
09/01/2023 06:12:40 - INFO - __main__ -   Step: 1100, Validation Metrics: {'accuracy': 0.7993704286640126, 'f1_micro': 0.7993704286640126, 'f1_macro': 0.44127898998216003, 'f1_weighted': 0.7604253127637529, 'f1_1': 0.8848484848484848, 'f1_-1': 0.35240839851790856, 'f1_0': 0.08658008658008658, 'precision_micro': 0.7993704286640126, 'precision_macro': 0.6262318010157256, 'precision_weighted': 0.7630979665909838, 'precision_1': 0.8271954674220963, 'precision_-1': 0.4959443800695249, 'precision_0': 0.5555555555555556, 'recall_micro': 0.7993704286640126, 'recall_macro': 0.42379873750108715, 'recall_weighted': 0.7993704286640126, 'recall_1': 0.9511400651465798, 'recall_-1': 0.27330779054916987, 'recall_0': 0.046948356807511735}
[2023-09-01 06:12:47,268] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1101/1998 [4:18:28<12:35:26, 50.53s/it]09/01/2023 06:12:54 - INFO - __main__ -   Step: 1101, LR: 9.251612903225807e-06, Loss: 0.48845231533050537
[2023-09-01 06:12:59,694] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1102/1998 [4:18:41<9:44:02, 39.11s/it] 09/01/2023 06:13:06 - INFO - __main__ -   Step: 1102, LR: 9.241290322580646e-06, Loss: 0.5291063189506531
[2023-09-01 06:13:13,230] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1103/1998 [4:18:55<7:52:32, 31.68s/it]09/01/2023 06:13:21 - INFO - __main__ -   Step: 1103, LR: 9.230967741935484e-06, Loss: 0.4606438875198364
[2023-09-01 06:13:28,088] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1104/1998 [4:19:10<6:35:35, 26.55s/it]09/01/2023 06:13:35 - INFO - __main__ -   Step: 1104, LR: 9.220645161290324e-06, Loss: 0.5027433633804321
[2023-09-01 06:13:42,545] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1105/1998 [4:19:24<5:39:08, 22.79s/it]09/01/2023 06:13:49 - INFO - __main__ -   Step: 1105, LR: 9.210322580645162e-06, Loss: 0.46404653787612915
[2023-09-01 06:13:55,805] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1106/1998 [4:19:37<4:56:44, 19.96s/it]09/01/2023 06:14:03 - INFO - __main__ -   Step: 1106, LR: 9.200000000000002e-06, Loss: 0.48554742336273193
[2023-09-01 06:14:09,477] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1107/1998 [4:19:51<4:31:11, 18.26s/it]09/01/2023 06:14:17 - INFO - __main__ -   Step: 1107, LR: 9.18967741935484e-06, Loss: 0.47134822607040405
[2023-09-01 06:14:23,698] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 55%|█████▌    | 1108/1998 [4:20:05<4:11:00, 16.92s/it]09/01/2023 06:14:31 - INFO - __main__ -   Step: 1108, LR: 9.17935483870968e-06, Loss: 0.4290076196193695
[2023-09-01 06:14:37,365] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1109/1998 [4:20:18<3:53:33, 15.76s/it]09/01/2023 06:14:44 - INFO - __main__ -   Step: 1109, LR: 9.169032258064516e-06, Loss: 0.47870221734046936
[2023-09-01 06:14:50,801] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1110/1998 [4:20:32<3:45:16, 15.22s/it]09/01/2023 06:14:58 - INFO - __main__ -   Step: 1110, LR: 9.158709677419355e-06, Loss: 0.4519045650959015
[2023-09-01 06:15:04,952] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1111/1998 [4:20:47<3:41:38, 14.99s/it]09/01/2023 06:15:12 - INFO - __main__ -   Step: 1111, LR: 9.148387096774193e-06, Loss: 0.4389731287956238
[2023-09-01 06:15:19,309] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1112/1998 [4:21:01<3:38:25, 14.79s/it]09/01/2023 06:15:27 - INFO - __main__ -   Step: 1112, LR: 9.138064516129033e-06, Loss: 0.49034419655799866
[2023-09-01 06:15:33,799] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1113/1998 [4:21:15<3:35:59, 14.64s/it]09/01/2023 06:15:41 - INFO - __main__ -   Step: 1113, LR: 9.127741935483871e-06, Loss: 0.4584678113460541
[2023-09-01 06:15:47,774] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1114/1998 [4:21:30<3:34:27, 14.56s/it]09/01/2023 06:15:55 - INFO - __main__ -   Step: 1114, LR: 9.11741935483871e-06, Loss: 0.4564018249511719
[2023-09-01 06:16:02,613] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1115/1998 [4:21:46<3:39:53, 14.94s/it]09/01/2023 06:16:11 - INFO - __main__ -   Step: 1115, LR: 9.107096774193549e-06, Loss: 0.5038579702377319
[2023-09-01 06:16:19,132] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1116/1998 [4:22:01<3:40:27, 15.00s/it]09/01/2023 06:16:26 - INFO - __main__ -   Step: 1116, LR: 9.096774193548388e-06, Loss: 0.5273637771606445
[2023-09-01 06:16:33,895] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1117/1998 [4:22:16<3:41:13, 15.07s/it]09/01/2023 06:16:41 - INFO - __main__ -   Step: 1117, LR: 9.086451612903226e-06, Loss: 0.4886484742164612
[2023-09-01 06:16:48,452] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1118/1998 [4:22:30<3:35:27, 14.69s/it]09/01/2023 06:16:55 - INFO - __main__ -   Step: 1118, LR: 9.076129032258066e-06, Loss: 0.42494648694992065
[2023-09-01 06:17:02,231] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1119/1998 [4:22:44<3:33:58, 14.61s/it]09/01/2023 06:17:10 - INFO - __main__ -   Step: 1119, LR: 9.065806451612904e-06, Loss: 0.5334147214889526
[2023-09-01 06:17:17,151] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1120/1998 [4:22:59<3:35:07, 14.70s/it]09/01/2023 06:17:25 - INFO - __main__ -   Step: 1120, LR: 9.055483870967742e-06, Loss: 0.39793720841407776
[2023-09-01 06:17:31,559] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1121/1998 [4:23:13<3:32:53, 14.57s/it]09/01/2023 06:17:39 - INFO - __main__ -   Step: 1121, LR: 9.045161290322582e-06, Loss: 0.46128782629966736
[2023-09-01 06:17:45,213] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1122/1998 [4:23:27<3:28:47, 14.30s/it]09/01/2023 06:17:53 - INFO - __main__ -   Step: 1122, LR: 9.03483870967742e-06, Loss: 0.510657787322998
[2023-09-01 06:18:00,448] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▌    | 1123/1998 [4:23:42<3:31:17, 14.49s/it]09/01/2023 06:18:07 - INFO - __main__ -   Step: 1123, LR: 9.02451612903226e-06, Loss: 0.4532463848590851
[2023-09-01 06:18:14,344] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▋    | 1124/1998 [4:23:56<3:28:20, 14.30s/it]09/01/2023 06:18:21 - INFO - __main__ -   Step: 1124, LR: 9.014193548387097e-06, Loss: 0.40557485818862915
[2023-09-01 06:18:28,113] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▋    | 1125/1998 [4:24:10<3:28:01, 14.30s/it]09/01/2023 06:18:36 - INFO - __main__ -   Step: 1125, LR: 9.003870967741937e-06, Loss: 0.5572589635848999
[2023-09-01 06:18:42,938] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▋    | 1126/1998 [4:24:24<3:27:59, 14.31s/it]09/01/2023 06:18:50 - INFO - __main__ -   Step: 1126, LR: 8.993548387096775e-06, Loss: 0.49653396010398865
[2023-09-01 06:18:57,007] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▋    | 1127/1998 [4:24:38<3:25:07, 14.13s/it]09/01/2023 06:19:04 - INFO - __main__ -   Step: 1127, LR: 8.983225806451613e-06, Loss: 0.4599815309047699
[2023-09-01 06:19:09,847] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 56%|█████▋    | 1128/1998 [4:24:51<3:18:27, 13.69s/it]09/01/2023 06:19:16 - INFO - __main__ -   Step: 1128, LR: 8.972903225806453e-06, Loss: 0.5454148054122925
[2023-09-01 06:19:22,381] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1129/1998 [4:25:04<3:18:16, 13.69s/it]09/01/2023 06:19:30 - INFO - __main__ -   Step: 1129, LR: 8.96258064516129e-06, Loss: 0.4447610378265381
[2023-09-01 06:19:36,842] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1130/1998 [4:25:19<3:22:28, 14.00s/it]09/01/2023 06:19:45 - INFO - __main__ -   Step: 1130, LR: 8.952258064516129e-06, Loss: 0.4220244288444519
[2023-09-01 06:19:51,338] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1131/1998 [4:25:33<3:21:01, 13.91s/it]09/01/2023 06:19:58 - INFO - __main__ -   Step: 1131, LR: 8.941935483870968e-06, Loss: 0.45771753787994385
[2023-09-01 06:20:05,141] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1132/1998 [4:25:47<3:21:18, 13.95s/it]09/01/2023 06:20:12 - INFO - __main__ -   Step: 1132, LR: 8.931612903225806e-06, Loss: 0.4627652168273926
[2023-09-01 06:20:19,379] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1133/1998 [4:26:02<3:24:31, 14.19s/it]09/01/2023 06:20:27 - INFO - __main__ -   Step: 1133, LR: 8.921290322580646e-06, Loss: 0.5706970691680908
[2023-09-01 06:20:34,781] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1134/1998 [4:26:17<3:29:13, 14.53s/it]09/01/2023 06:20:43 - INFO - __main__ -   Step: 1134, LR: 8.910967741935484e-06, Loss: 0.48297375440597534
[2023-09-01 06:20:49,993] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1135/1998 [4:26:32<3:31:51, 14.73s/it]09/01/2023 06:20:58 - INFO - __main__ -   Step: 1135, LR: 8.900645161290324e-06, Loss: 0.4618759751319885
[2023-09-01 06:21:04,889] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1136/1998 [4:26:47<3:30:38, 14.66s/it]09/01/2023 06:21:12 - INFO - __main__ -   Step: 1136, LR: 8.890322580645162e-06, Loss: 0.5174798369407654
[2023-09-01 06:21:18,915] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1137/1998 [4:27:01<3:28:33, 14.53s/it]09/01/2023 06:21:26 - INFO - __main__ -   Step: 1137, LR: 8.880000000000001e-06, Loss: 0.49123215675354004
[2023-09-01 06:21:33,998] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1138/1998 [4:27:15<3:25:56, 14.37s/it]09/01/2023 06:21:40 - INFO - __main__ -   Step: 1138, LR: 8.86967741935484e-06, Loss: 0.48607802391052246
[2023-09-01 06:21:47,677] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1139/1998 [4:27:29<3:26:08, 14.40s/it]09/01/2023 06:21:55 - INFO - __main__ -   Step: 1139, LR: 8.859354838709679e-06, Loss: 0.4677310585975647
[2023-09-01 06:22:01,574] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1140/1998 [4:27:43<3:22:32, 14.16s/it]09/01/2023 06:22:09 - INFO - __main__ -   Step: 1140, LR: 8.849032258064517e-06, Loss: 0.4735797345638275
[2023-09-01 06:22:14,975] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1141/1998 [4:27:56<3:15:41, 13.70s/it]09/01/2023 06:22:21 - INFO - __main__ -   Step: 1141, LR: 8.838709677419357e-06, Loss: 0.443972647190094
[2023-09-01 06:22:28,394] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1142/1998 [4:28:11<3:22:22, 14.19s/it]09/01/2023 06:22:36 - INFO - __main__ -   Step: 1142, LR: 8.828387096774195e-06, Loss: 0.5473357439041138
[2023-09-01 06:22:43,601] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1143/1998 [4:28:25<3:23:25, 14.28s/it]09/01/2023 06:22:51 - INFO - __main__ -   Step: 1143, LR: 8.818064516129033e-06, Loss: 0.4797555208206177
[2023-09-01 06:22:57,166] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1144/1998 [4:28:39<3:20:13, 14.07s/it]09/01/2023 06:23:05 - INFO - __main__ -   Step: 1144, LR: 8.807741935483872e-06, Loss: 0.5710623860359192
[2023-09-01 06:23:12,061] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1145/1998 [4:28:53<3:21:24, 14.17s/it]09/01/2023 06:23:19 - INFO - __main__ -   Step: 1145, LR: 8.79741935483871e-06, Loss: 0.4643894135951996
[2023-09-01 06:23:25,944] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1146/1998 [4:29:07<3:20:11, 14.10s/it]09/01/2023 06:23:33 - INFO - __main__ -   Step: 1146, LR: 8.787096774193548e-06, Loss: 0.4420720934867859
[2023-09-01 06:23:40,378] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1147/1998 [4:29:22<3:22:55, 14.31s/it]09/01/2023 06:23:48 - INFO - __main__ -   Step: 1147, LR: 8.776774193548388e-06, Loss: 0.4152037799358368
[2023-09-01 06:23:54,675] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 57%|█████▋    | 1148/1998 [4:29:36<3:20:25, 14.15s/it]09/01/2023 06:24:01 - INFO - __main__ -   Step: 1148, LR: 8.766451612903226e-06, Loss: 0.4971643090248108
[2023-09-01 06:24:08,585] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1149/1998 [4:29:50<3:17:58, 13.99s/it]09/01/2023 06:24:15 - INFO - __main__ -   Step: 1149, LR: 8.756129032258066e-06, Loss: 0.46425458788871765
[2023-09-01 06:24:21,764] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1150/1998 [4:30:04<3:20:32, 14.19s/it]09/01/2023 06:24:30 - INFO - __main__ -   Step: 1150, LR: 8.745806451612904e-06, Loss: 0.504298210144043
[2023-09-01 06:24:36,883] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1151/1998 [4:30:19<3:24:50, 14.51s/it]09/01/2023 06:24:45 - INFO - __main__ -   Step: 1151, LR: 8.735483870967742e-06, Loss: 0.43172013759613037
[2023-09-01 06:24:51,900] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1152/1998 [4:30:34<3:23:22, 14.42s/it]09/01/2023 06:24:59 - INFO - __main__ -   Step: 1152, LR: 8.725161290322581e-06, Loss: 0.5225006341934204
[2023-09-01 06:25:05,621] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1153/1998 [4:30:47<3:17:02, 13.99s/it]09/01/2023 06:25:12 - INFO - __main__ -   Step: 1153, LR: 8.71483870967742e-06, Loss: 0.5152183771133423
[2023-09-01 06:25:18,894] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1154/1998 [4:31:01<3:16:28, 13.97s/it]09/01/2023 06:25:26 - INFO - __main__ -   Step: 1154, LR: 8.704516129032259e-06, Loss: 0.5501721501350403
[2023-09-01 06:25:32,640] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1155/1998 [4:31:14<3:14:38, 13.85s/it]09/01/2023 06:25:40 - INFO - __main__ -   Step: 1155, LR: 8.694193548387097e-06, Loss: 0.5262736082077026
[2023-09-01 06:25:46,013] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1156/1998 [4:31:27<3:11:10, 13.62s/it]09/01/2023 06:25:53 - INFO - __main__ -   Step: 1156, LR: 8.683870967741937e-06, Loss: 0.5703157186508179
[2023-09-01 06:25:59,658] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1157/1998 [4:31:42<3:14:32, 13.88s/it]09/01/2023 06:26:07 - INFO - __main__ -   Step: 1157, LR: 8.673548387096775e-06, Loss: 0.48191484808921814
[2023-09-01 06:26:13,774] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1158/1998 [4:31:55<3:11:25, 13.67s/it]09/01/2023 06:26:20 - INFO - __main__ -   Step: 1158, LR: 8.663225806451614e-06, Loss: 0.5171459913253784
[2023-09-01 06:26:27,818] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1159/1998 [4:32:09<3:12:37, 13.77s/it]09/01/2023 06:26:34 - INFO - __main__ -   Step: 1159, LR: 8.652903225806452e-06, Loss: 0.4934545159339905
[2023-09-01 06:26:42,066] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1160/1998 [4:32:25<3:22:29, 14.50s/it]09/01/2023 06:26:51 - INFO - __main__ -   Step: 1160, LR: 8.642580645161292e-06, Loss: 0.4850250482559204
[2023-09-01 06:26:58,310] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1161/1998 [4:32:39<3:21:46, 14.46s/it]09/01/2023 06:27:05 - INFO - __main__ -   Step: 1161, LR: 8.63225806451613e-06, Loss: 0.4623218774795532
[2023-09-01 06:27:13,262] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1162/1998 [4:32:54<3:23:35, 14.61s/it]09/01/2023 06:27:20 - INFO - __main__ -   Step: 1162, LR: 8.621935483870968e-06, Loss: 0.46175047755241394
[2023-09-01 06:27:26,365] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1163/1998 [4:33:07<3:16:18, 14.11s/it]09/01/2023 06:27:33 - INFO - __main__ -   Step: 1163, LR: 8.611612903225806e-06, Loss: 0.444405198097229
[2023-09-01 06:27:39,543] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1164/1998 [4:33:21<3:15:41, 14.08s/it]09/01/2023 06:27:47 - INFO - __main__ -   Step: 1164, LR: 8.601290322580646e-06, Loss: 0.5130598545074463
[2023-09-01 06:27:53,683] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1165/1998 [4:33:35<3:14:52, 14.04s/it]09/01/2023 06:28:01 - INFO - __main__ -   Step: 1165, LR: 8.590967741935484e-06, Loss: 0.4970991313457489
[2023-09-01 06:28:07,938] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1166/1998 [4:33:49<3:14:10, 14.00s/it]09/01/2023 06:28:15 - INFO - __main__ -   Step: 1166, LR: 8.580645161290323e-06, Loss: 0.4851972162723541
[2023-09-01 06:28:22,016] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1167/1998 [4:34:05<3:19:40, 14.42s/it]09/01/2023 06:28:30 - INFO - __main__ -   Step: 1167, LR: 8.570322580645161e-06, Loss: 0.49401023983955383
[2023-09-01 06:28:37,555] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 58%|█████▊    | 1168/1998 [4:34:20<3:23:13, 14.69s/it]09/01/2023 06:28:46 - INFO - __main__ -   Step: 1168, LR: 8.560000000000001e-06, Loss: 0.5775554180145264
[2023-09-01 06:28:52,707] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▊    | 1169/1998 [4:34:34<3:20:49, 14.54s/it]09/01/2023 06:29:00 - INFO - __main__ -   Step: 1169, LR: 8.549677419354839e-06, Loss: 0.5148335099220276
[2023-09-01 06:29:06,395] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▊    | 1170/1998 [4:34:48<3:19:07, 14.43s/it]09/01/2023 06:29:14 - INFO - __main__ -   Step: 1170, LR: 8.539354838709679e-06, Loss: 0.4526975154876709
[2023-09-01 06:29:20,912] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▊    | 1171/1998 [4:35:02<3:16:15, 14.24s/it]09/01/2023 06:29:28 - INFO - __main__ -   Step: 1171, LR: 8.529032258064517e-06, Loss: 0.4427693784236908
[2023-09-01 06:29:34,695] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▊    | 1172/1998 [4:35:16<3:15:24, 14.19s/it]09/01/2023 06:29:42 - INFO - __main__ -   Step: 1172, LR: 8.518709677419356e-06, Loss: 0.499148428440094
[2023-09-01 06:29:49,088] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▊    | 1173/1998 [4:35:31<3:15:43, 14.24s/it]09/01/2023 06:29:56 - INFO - __main__ -   Step: 1173, LR: 8.508387096774194e-06, Loss: 0.48586881160736084
[2023-09-01 06:30:02,918] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1174/1998 [4:35:44<3:13:53, 14.12s/it]09/01/2023 06:30:10 - INFO - __main__ -   Step: 1174, LR: 8.498064516129032e-06, Loss: 0.413705438375473
[2023-09-01 06:30:17,341] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1175/1998 [4:36:00<3:19:21, 14.53s/it]09/01/2023 06:30:25 - INFO - __main__ -   Step: 1175, LR: 8.487741935483872e-06, Loss: 0.4656906723976135
[2023-09-01 06:30:32,007] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1176/1998 [4:36:13<3:14:01, 14.16s/it]09/01/2023 06:30:39 - INFO - __main__ -   Step: 1176, LR: 8.47741935483871e-06, Loss: 0.446366548538208
[2023-09-01 06:30:45,901] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1177/1998 [4:36:27<3:13:30, 14.14s/it]09/01/2023 06:30:53 - INFO - __main__ -   Step: 1177, LR: 8.46709677419355e-06, Loss: 0.44506126642227173
[2023-09-01 06:31:00,694] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1178/1998 [4:36:43<3:18:57, 14.56s/it]09/01/2023 06:31:08 - INFO - __main__ -   Step: 1178, LR: 8.456774193548388e-06, Loss: 0.5285040140151978
[2023-09-01 06:31:16,061] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1179/1998 [4:36:57<3:18:10, 14.52s/it]09/01/2023 06:31:23 - INFO - __main__ -   Step: 1179, LR: 8.446451612903227e-06, Loss: 0.4625256657600403
[2023-09-01 06:31:29,977] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1180/1998 [4:37:12<3:18:01, 14.53s/it]09/01/2023 06:31:37 - INFO - __main__ -   Step: 1180, LR: 8.436129032258065e-06, Loss: 0.44819140434265137
[2023-09-01 06:31:44,628] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1181/1998 [4:37:28<3:23:24, 14.94s/it]09/01/2023 06:31:53 - INFO - __main__ -   Step: 1181, LR: 8.425806451612903e-06, Loss: 0.46883460879325867
[2023-09-01 06:32:00,388] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1182/1998 [4:37:42<3:21:05, 14.79s/it]09/01/2023 06:32:08 - INFO - __main__ -   Step: 1182, LR: 8.415483870967743e-06, Loss: 0.442952036857605
[2023-09-01 06:32:15,244] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1183/1998 [4:37:57<3:19:17, 14.67s/it]09/01/2023 06:32:22 - INFO - __main__ -   Step: 1183, LR: 8.405161290322581e-06, Loss: 0.4084025025367737
[2023-09-01 06:32:28,789] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1184/1998 [4:38:10<3:15:05, 14.38s/it]09/01/2023 06:32:36 - INFO - __main__ -   Step: 1184, LR: 8.394838709677419e-06, Loss: 0.5260108709335327
[2023-09-01 06:32:42,523] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1185/1998 [4:38:24<3:14:07, 14.33s/it]09/01/2023 06:32:50 - INFO - __main__ -   Step: 1185, LR: 8.384516129032259e-06, Loss: 0.5033024549484253
[2023-09-01 06:32:56,397] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1186/1998 [4:38:38<3:10:02, 14.04s/it]09/01/2023 06:33:03 - INFO - __main__ -   Step: 1186, LR: 8.374193548387097e-06, Loss: 0.4553404748439789
[2023-09-01 06:33:10,158] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1187/1998 [4:38:51<3:08:12, 13.92s/it]09/01/2023 06:33:17 - INFO - __main__ -   Step: 1187, LR: 8.363870967741936e-06, Loss: 0.4447925090789795
[2023-09-01 06:33:23,605] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 59%|█████▉    | 1188/1998 [4:39:05<3:07:34, 13.89s/it]09/01/2023 06:33:31 - INFO - __main__ -   Step: 1188, LR: 8.353548387096774e-06, Loss: 0.48814064264297485
[2023-09-01 06:33:37,516] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1189/1998 [4:39:20<3:09:14, 14.04s/it]09/01/2023 06:33:45 - INFO - __main__ -   Step: 1189, LR: 8.343225806451614e-06, Loss: 0.4425292909145355
[2023-09-01 06:33:52,300] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1190/1998 [4:39:33<3:08:11, 13.97s/it]09/01/2023 06:33:59 - INFO - __main__ -   Step: 1190, LR: 8.332903225806452e-06, Loss: 0.4782198369503021
[2023-09-01 06:34:06,207] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1191/1998 [4:39:48<3:09:31, 14.09s/it]09/01/2023 06:34:13 - INFO - __main__ -   Step: 1191, LR: 8.322580645161292e-06, Loss: 0.5181082487106323
[2023-09-01 06:34:20,984] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1192/1998 [4:40:02<3:10:21, 14.17s/it]09/01/2023 06:34:28 - INFO - __main__ -   Step: 1192, LR: 8.31225806451613e-06, Loss: 0.4952225089073181
[2023-09-01 06:34:35,159] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1193/1998 [4:40:17<3:11:06, 14.24s/it]09/01/2023 06:34:42 - INFO - __main__ -   Step: 1193, LR: 8.30193548387097e-06, Loss: 0.3978497385978699
[2023-09-01 06:34:48,237] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1194/1998 [4:40:29<3:03:34, 13.70s/it]09/01/2023 06:34:55 - INFO - __main__ -   Step: 1194, LR: 8.291612903225807e-06, Loss: 0.45751625299453735
[2023-09-01 06:35:01,639] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1195/1998 [4:40:43<3:05:18, 13.85s/it]09/01/2023 06:35:09 - INFO - __main__ -   Step: 1195, LR: 8.281290322580647e-06, Loss: 0.4912351369857788
[2023-09-01 06:35:15,693] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1196/1998 [4:40:59<3:14:43, 14.57s/it]09/01/2023 06:35:25 - INFO - __main__ -   Step: 1196, LR: 8.270967741935485e-06, Loss: 0.5056255459785461
[2023-09-01 06:35:32,095] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1197/1998 [4:41:14<3:14:14, 14.55s/it]09/01/2023 06:35:40 - INFO - __main__ -   Step: 1197, LR: 8.260645161290323e-06, Loss: 0.39840197563171387
[2023-09-01 06:35:47,123] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|█████▉    | 1198/1998 [4:41:29<3:15:37, 14.67s/it]09/01/2023 06:35:54 - INFO - __main__ -   Step: 1198, LR: 8.250322580645161e-06, Loss: 0.5851571559906006
[2023-09-01 06:36:01,275] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1199/1998 [4:41:43<3:11:39, 14.39s/it]09/01/2023 06:36:08 - INFO - __main__ -   Step: 1199, LR: 8.24e-06, Loss: 0.5407122373580933
[2023-09-01 06:36:15,205] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1200/1998 [4:41:57<3:10:55, 14.36s/it]09/01/2023 06:36:22 - INFO - __main__ -   Step: 1200, LR: 8.229677419354839e-06, Loss: 0.4577001929283142
09/01/2023 06:36:22 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200
09/01/2023 06:36:22 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 06:36:22,983] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 06:36:22,989] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 06:36:22,989] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 06:36:22,989] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 06:36:22,989] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 06:36:22,990] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 06:36:22,991] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 06:36:23,003] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 06:36:23,003] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 06:36:23,004] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 06:36:23,005] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 06:36:23,006] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 06:36:23,006] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 06:36:23,006] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 06:36:23,006] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 06:37:24,051] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 06:37:24,051] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 06:37:24,079] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 06:37:24,080] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 06:37:24,823] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 06:37:24,823] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 06:37:24,830] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 06:37:24,831] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 06:37:24,835] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 06:37:24,835] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 06:37:24,835] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 06:37:24,836] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 06:37:24 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/pytorch_model
09/01/2023 06:37:24 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/scheduler.bin
09/01/2023 06:37:24 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1200/random_states_0.pkl
09/01/2023 06:37:24 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.90it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.91it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.96it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.67it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.75it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.48it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.46it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.67it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.83it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.91it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.02it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.09it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.16it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.22it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.22it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.25it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.20it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.00it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:53,  3.89it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.00it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.09it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.14it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.16it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.98it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.62it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.81it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.65it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.84it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.99it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.85it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  3.98it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.88it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.69it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.79it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.94it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.04it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:49,  3.78it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:47,  3.93it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.03it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.10it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.09it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.81it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:51,  3.52it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.71it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.58it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.44it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.48it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:51,  3.42it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.56it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.48it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.47it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.41it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.61it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.77it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.61it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.78it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.84it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.89it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.99it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:41,  4.02it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.08it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.11it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.14it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.14it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.19it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.13it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.20it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.99it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.86it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.80it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.92it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.04it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.12it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.83it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.96it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.61it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.71it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.85it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:37,  3.91it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.98it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:35,  4.06it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.93it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.08it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.14it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.09it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.15it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.19it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.01it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.11it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:34,  3.85it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.89it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.99it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:31,  4.01it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:31,  4.06it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.06it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.12it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.15it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.19it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.18it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.91it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.01it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:29,  4.03it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.11it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.75it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.93it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:28,  4.03it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.89it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.00it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.07it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.07it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.16it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.19it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.22it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.25it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.29it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.30it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.29it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.33it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.88it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.59it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.79it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.92it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.95it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.08it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.92it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.03it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.94it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.07it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.12it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.21it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.23it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.29it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:20,  4.29it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.30it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.31it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.35it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.34it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.37it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.39it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.40it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.38it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.40it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.35it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.37it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.37it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.29it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.97it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.08it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.17it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.25it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.27it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.32it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:15,  4.32it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.35it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.36it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.38it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.40it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.42it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.42it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.17it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.25it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.25it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.32it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.31it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.11it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.84it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.96it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.06it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.16it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.98it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.11it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.20it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.26it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.27it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.30it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.33it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.12it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.11it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.21it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.24it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.28it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.09it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.18it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:07,  4.25it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.16it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.23it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.29it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.33it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.34it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.38it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.98it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.10it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:06,  4.16it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.26it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.33it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.38it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.41it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.40it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.41it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.38it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.39it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.38it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.16it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.21it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.26it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.27it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.29it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.32it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.35it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.27it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.30it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.34it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.35it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.38it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.38it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.40it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.42it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.43it/s][A09/01/2023 06:38:21 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 06:38:21 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 06:38:21 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 06:38:21 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 06:38:21 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 06:38:22 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 06:38:22 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 06:38:22 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 06:38:22 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 06:38:22 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 06:38:22 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 06:38:22 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 06:38:22 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.97it/s]
09/01/2023 06:38:22 - INFO - __main__ -   Step: 1200, Validation Metrics: {'accuracy': 0.8012221090639755, 'f1_micro': 0.8012221090639755, 'f1_macro': 0.447830903596728, 'f1_weighted': 0.7612462199063665, 'f1_1': 0.8861087144089732, 'f1_-1': 0.3376068376068376, 'f1_0': 0.11977715877437327, 'precision_micro': 0.8012221090639755, 'precision_macro': 0.6268447889908038, 'precision_weighted': 0.7634836221952727, 'precision_1': 0.8258946521913952, 'precision_-1': 0.5103359173126615, 'precision_0': 0.5443037974683544, 'recall_micro': 0.8012221090639755, 'recall_macro': 0.42510701021573816, 'recall_weighted': 0.8012221090639755, 'recall_1': 0.955793392275477, 'recall_-1': 0.25223499361430396, 'recall_0': 0.06729264475743349}
[2023-09-01 06:38:28,402] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1201/1998 [4:44:10<11:04:54, 50.06s/it]09/01/2023 06:38:36 - INFO - __main__ -   Step: 1201, LR: 8.219354838709678e-06, Loss: 0.5524468421936035
[2023-09-01 06:38:43,843] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1202/1998 [4:44:25<8:41:39, 39.32s/it] 09/01/2023 06:38:50 - INFO - __main__ -   Step: 1202, LR: 8.209032258064516e-06, Loss: 0.48825502395629883
[2023-09-01 06:38:56,939] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1203/1998 [4:44:38<6:57:39, 31.52s/it]09/01/2023 06:39:03 - INFO - __main__ -   Step: 1203, LR: 8.198709677419356e-06, Loss: 0.4783223271369934
[2023-09-01 06:39:10,378] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1204/1998 [4:44:52<5:47:31, 26.26s/it]09/01/2023 06:39:17 - INFO - __main__ -   Step: 1204, LR: 8.188387096774194e-06, Loss: 0.49509137868881226
[2023-09-01 06:39:23,504] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1205/1998 [4:45:05<4:54:46, 22.30s/it]09/01/2023 06:39:30 - INFO - __main__ -   Step: 1205, LR: 8.178064516129032e-06, Loss: 0.4950280785560608
[2023-09-01 06:39:37,231] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1206/1998 [4:45:19<4:23:29, 19.96s/it]09/01/2023 06:39:45 - INFO - __main__ -   Step: 1206, LR: 8.167741935483872e-06, Loss: 0.48676079511642456
[2023-09-01 06:39:53,156] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1207/1998 [4:45:35<4:07:09, 18.75s/it]09/01/2023 06:40:01 - INFO - __main__ -   Step: 1207, LR: 8.15741935483871e-06, Loss: 0.4457160234451294
[2023-09-01 06:40:07,985] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 60%|██████    | 1208/1998 [4:45:50<3:50:34, 17.51s/it]09/01/2023 06:40:16 - INFO - __main__ -   Step: 1208, LR: 8.14709677419355e-06, Loss: 0.5271751880645752
[2023-09-01 06:40:21,892] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1209/1998 [4:46:04<3:35:03, 16.35s/it]09/01/2023 06:40:29 - INFO - __main__ -   Step: 1209, LR: 8.136774193548387e-06, Loss: 0.46497204899787903
[2023-09-01 06:40:35,270] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1210/1998 [4:46:18<3:25:02, 15.61s/it]09/01/2023 06:40:43 - INFO - __main__ -   Step: 1210, LR: 8.126451612903227e-06, Loss: 0.4568990468978882
[2023-09-01 06:40:49,759] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1211/1998 [4:46:32<3:19:37, 15.22s/it]09/01/2023 06:40:57 - INFO - __main__ -   Step: 1211, LR: 8.116129032258065e-06, Loss: 0.5038526058197021
[2023-09-01 06:41:05,189] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1212/1998 [4:46:47<3:18:46, 15.17s/it]09/01/2023 06:41:12 - INFO - __main__ -   Step: 1212, LR: 8.105806451612905e-06, Loss: 0.5212641954421997
[2023-09-01 06:41:18,769] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1213/1998 [4:47:00<3:11:38, 14.65s/it]09/01/2023 06:41:26 - INFO - __main__ -   Step: 1213, LR: 8.095483870967743e-06, Loss: 0.4882194697856903
[2023-09-01 06:41:33,198] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1214/1998 [4:47:14<3:09:15, 14.48s/it]09/01/2023 06:41:40 - INFO - __main__ -   Step: 1214, LR: 8.085161290322582e-06, Loss: 0.38173383474349976
[2023-09-01 06:41:46,315] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1215/1998 [4:47:28<3:07:07, 14.34s/it]09/01/2023 06:41:54 - INFO - __main__ -   Step: 1215, LR: 8.07483870967742e-06, Loss: 0.4700479209423065
[2023-09-01 06:42:01,221] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1216/1998 [4:47:42<3:05:14, 14.21s/it]09/01/2023 06:42:08 - INFO - __main__ -   Step: 1216, LR: 8.064516129032258e-06, Loss: 0.4395596981048584
[2023-09-01 06:42:15,149] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1217/1998 [4:47:56<3:04:01, 14.14s/it]09/01/2023 06:42:22 - INFO - __main__ -   Step: 1217, LR: 8.054193548387096e-06, Loss: 0.47725874185562134
[2023-09-01 06:42:28,980] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1218/1998 [4:48:10<3:03:46, 14.14s/it]09/01/2023 06:42:36 - INFO - __main__ -   Step: 1218, LR: 8.043870967741936e-06, Loss: 0.4292650818824768
[2023-09-01 06:42:42,275] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1219/1998 [4:48:24<3:01:30, 13.98s/it]09/01/2023 06:42:50 - INFO - __main__ -   Step: 1219, LR: 8.033548387096774e-06, Loss: 0.4892003536224365
[2023-09-01 06:42:56,446] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1220/1998 [4:48:38<3:02:00, 14.04s/it]09/01/2023 06:43:04 - INFO - __main__ -   Step: 1220, LR: 8.023225806451614e-06, Loss: 0.49390238523483276
[2023-09-01 06:43:10,599] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1221/1998 [4:48:52<3:00:34, 13.94s/it]09/01/2023 06:43:17 - INFO - __main__ -   Step: 1221, LR: 8.012903225806452e-06, Loss: 0.4842376410961151
[2023-09-01 06:43:24,225] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1222/1998 [4:49:06<3:00:41, 13.97s/it]09/01/2023 06:43:32 - INFO - __main__ -   Step: 1222, LR: 8.002580645161291e-06, Loss: 0.38957679271698
[2023-09-01 06:43:38,105] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████    | 1223/1998 [4:49:20<3:00:59, 14.01s/it]09/01/2023 06:43:46 - INFO - __main__ -   Step: 1223, LR: 7.99225806451613e-06, Loss: 0.4710012674331665
[2023-09-01 06:43:51,980] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████▏   | 1224/1998 [4:49:33<2:57:31, 13.76s/it]09/01/2023 06:43:59 - INFO - __main__ -   Step: 1224, LR: 7.981935483870969e-06, Loss: 0.4705880880355835
[2023-09-01 06:44:05,698] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████▏   | 1225/1998 [4:49:47<2:57:59, 13.82s/it]09/01/2023 06:44:13 - INFO - __main__ -   Step: 1225, LR: 7.971612903225807e-06, Loss: 0.4963800609111786
[2023-09-01 06:44:19,646] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████▏   | 1226/1998 [4:50:02<3:01:46, 14.13s/it]09/01/2023 06:44:28 - INFO - __main__ -   Step: 1226, LR: 7.961290322580647e-06, Loss: 0.5449423789978027
[2023-09-01 06:44:34,809] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████▏   | 1227/1998 [4:50:16<3:02:03, 14.17s/it]09/01/2023 06:44:42 - INFO - __main__ -   Step: 1227, LR: 7.950967741935485e-06, Loss: 0.4281596541404724
[2023-09-01 06:44:48,749] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 61%|██████▏   | 1228/1998 [4:50:30<2:59:14, 13.97s/it]09/01/2023 06:44:55 - INFO - __main__ -   Step: 1228, LR: 7.940645161290323e-06, Loss: 0.4684475064277649
[2023-09-01 06:45:01,948] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1229/1998 [4:50:43<2:56:42, 13.79s/it]09/01/2023 06:45:09 - INFO - __main__ -   Step: 1229, LR: 7.930322580645162e-06, Loss: 0.4826548993587494
[2023-09-01 06:45:16,780] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1230/1998 [4:50:59<3:03:43, 14.35s/it]09/01/2023 06:45:24 - INFO - __main__ -   Step: 1230, LR: 7.92e-06, Loss: 0.45791059732437134
[2023-09-01 06:45:30,952] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1231/1998 [4:51:13<3:01:58, 14.24s/it]09/01/2023 06:45:38 - INFO - __main__ -   Step: 1231, LR: 7.90967741935484e-06, Loss: 0.5051828622817993
[2023-09-01 06:45:45,689] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1232/1998 [4:51:28<3:03:39, 14.39s/it]09/01/2023 06:45:53 - INFO - __main__ -   Step: 1232, LR: 7.899354838709678e-06, Loss: 0.45372557640075684
[2023-09-01 06:46:00,529] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1233/1998 [4:51:42<3:04:54, 14.50s/it]09/01/2023 06:46:08 - INFO - __main__ -   Step: 1233, LR: 7.889032258064516e-06, Loss: 0.4474712610244751
[2023-09-01 06:46:14,090] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1234/1998 [4:51:56<3:01:06, 14.22s/it]09/01/2023 06:46:21 - INFO - __main__ -   Step: 1234, LR: 7.878709677419356e-06, Loss: 0.4235392212867737
[2023-09-01 06:46:28,301] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1235/1998 [4:52:11<3:03:39, 14.44s/it]09/01/2023 06:46:36 - INFO - __main__ -   Step: 1235, LR: 7.868387096774194e-06, Loss: 0.509568452835083
[2023-09-01 06:46:43,284] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1236/1998 [4:52:25<3:01:33, 14.30s/it]09/01/2023 06:46:50 - INFO - __main__ -   Step: 1236, LR: 7.858064516129032e-06, Loss: 0.46156245470046997
[2023-09-01 06:46:58,750] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1237/1998 [4:52:41<3:07:20, 14.77s/it]09/01/2023 06:47:06 - INFO - __main__ -   Step: 1237, LR: 7.847741935483871e-06, Loss: 0.49060994386672974
[2023-09-01 06:47:13,166] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1238/1998 [4:52:56<3:07:49, 14.83s/it]09/01/2023 06:47:21 - INFO - __main__ -   Step: 1238, LR: 7.83741935483871e-06, Loss: 0.40898436307907104
[2023-09-01 06:47:28,371] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1239/1998 [4:53:10<3:06:17, 14.73s/it]09/01/2023 06:47:36 - INFO - __main__ -   Step: 1239, LR: 7.827096774193549e-06, Loss: 0.4647546410560608
[2023-09-01 06:47:43,039] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1240/1998 [4:53:24<3:04:10, 14.58s/it]09/01/2023 06:47:50 - INFO - __main__ -   Step: 1240, LR: 7.816774193548387e-06, Loss: 0.49155598878860474
[2023-09-01 06:47:57,157] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1241/1998 [4:53:39<3:04:44, 14.64s/it]09/01/2023 06:48:05 - INFO - __main__ -   Step: 1241, LR: 7.806451612903227e-06, Loss: 0.5848427414894104
[2023-09-01 06:48:11,845] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1242/1998 [4:53:53<3:01:25, 14.40s/it]09/01/2023 06:48:19 - INFO - __main__ -   Step: 1242, LR: 7.796129032258065e-06, Loss: 0.4406694769859314
[2023-09-01 06:48:25,485] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1243/1998 [4:54:07<2:59:14, 14.24s/it]09/01/2023 06:48:32 - INFO - __main__ -   Step: 1243, LR: 7.785806451612904e-06, Loss: 0.4416910409927368
[2023-09-01 06:48:38,709] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1244/1998 [4:54:20<2:54:23, 13.88s/it]09/01/2023 06:48:45 - INFO - __main__ -   Step: 1244, LR: 7.775483870967742e-06, Loss: 0.5296148061752319
[2023-09-01 06:48:52,392] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1245/1998 [4:54:34<2:54:58, 13.94s/it]09/01/2023 06:49:00 - INFO - __main__ -   Step: 1245, LR: 7.765161290322582e-06, Loss: 0.48381662368774414
[2023-09-01 06:49:06,777] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1246/1998 [4:54:48<2:55:58, 14.04s/it]09/01/2023 06:49:14 - INFO - __main__ -   Step: 1246, LR: 7.75483870967742e-06, Loss: 0.44300422072410583
[2023-09-01 06:49:20,460] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1247/1998 [4:55:02<2:53:24, 13.85s/it]09/01/2023 06:49:27 - INFO - __main__ -   Step: 1247, LR: 7.74451612903226e-06, Loss: 0.41957855224609375
[2023-09-01 06:49:33,354] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 62%|██████▏   | 1248/1998 [4:55:14<2:48:53, 13.51s/it]09/01/2023 06:49:40 - INFO - __main__ -   Step: 1248, LR: 7.734193548387098e-06, Loss: 0.529175877571106
[2023-09-01 06:49:46,616] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1249/1998 [4:55:28<2:49:53, 13.61s/it]09/01/2023 06:49:54 - INFO - __main__ -   Step: 1249, LR: 7.723870967741936e-06, Loss: 0.46857836842536926
[2023-09-01 06:50:00,353] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1250/1998 [4:55:42<2:50:52, 13.71s/it]09/01/2023 06:50:08 - INFO - __main__ -   Step: 1250, LR: 7.713548387096775e-06, Loss: 0.4879641830921173
[2023-09-01 06:50:14,855] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1251/1998 [4:55:57<2:53:33, 13.94s/it]09/01/2023 06:50:22 - INFO - __main__ -   Step: 1251, LR: 7.703225806451613e-06, Loss: 0.47794991731643677
[2023-09-01 06:50:28,713] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1252/1998 [4:56:10<2:50:14, 13.69s/it]09/01/2023 06:50:35 - INFO - __main__ -   Step: 1252, LR: 7.692903225806451e-06, Loss: 0.4882301986217499
[2023-09-01 06:50:42,076] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1253/1998 [4:56:24<2:52:06, 13.86s/it]09/01/2023 06:50:50 - INFO - __main__ -   Step: 1253, LR: 7.682580645161291e-06, Loss: 0.5223237872123718
[2023-09-01 06:50:56,132] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1254/1998 [4:56:37<2:49:22, 13.66s/it]09/01/2023 06:51:03 - INFO - __main__ -   Step: 1254, LR: 7.672258064516129e-06, Loss: 0.4189961850643158
[2023-09-01 06:51:09,643] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1255/1998 [4:56:52<2:51:48, 13.87s/it]09/01/2023 06:51:17 - INFO - __main__ -   Step: 1255, LR: 7.661935483870969e-06, Loss: 0.5145208239555359
[2023-09-01 06:51:24,149] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1256/1998 [4:57:07<2:55:43, 14.21s/it]09/01/2023 06:51:32 - INFO - __main__ -   Step: 1256, LR: 7.651612903225807e-06, Loss: 0.4660302400588989
[2023-09-01 06:51:38,976] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1257/1998 [4:57:21<2:55:31, 14.21s/it]09/01/2023 06:51:46 - INFO - __main__ -   Step: 1257, LR: 7.641290322580646e-06, Loss: 0.4558908939361572
[2023-09-01 06:51:53,248] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1258/1998 [4:57:35<2:53:29, 14.07s/it]09/01/2023 06:52:00 - INFO - __main__ -   Step: 1258, LR: 7.630967741935484e-06, Loss: 0.5388213396072388
[2023-09-01 06:52:06,297] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1259/1998 [4:57:48<2:50:25, 13.84s/it]09/01/2023 06:52:13 - INFO - __main__ -   Step: 1259, LR: 7.620645161290323e-06, Loss: 0.44529783725738525
[2023-09-01 06:52:20,152] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1260/1998 [4:58:02<2:51:55, 13.98s/it]09/01/2023 06:52:28 - INFO - __main__ -   Step: 1260, LR: 7.610322580645162e-06, Loss: 0.4323166012763977
[2023-09-01 06:52:35,007] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1261/1998 [4:58:17<2:53:49, 14.15s/it]09/01/2023 06:52:42 - INFO - __main__ -   Step: 1261, LR: 7.600000000000001e-06, Loss: 0.4251030683517456
[2023-09-01 06:52:48,536] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1262/1998 [4:58:30<2:50:29, 13.90s/it]09/01/2023 06:52:56 - INFO - __main__ -   Step: 1262, LR: 7.58967741935484e-06, Loss: 0.526081919670105
[2023-09-01 06:53:03,200] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1263/1998 [4:58:45<2:53:04, 14.13s/it]09/01/2023 06:53:10 - INFO - __main__ -   Step: 1263, LR: 7.579354838709679e-06, Loss: 0.4540485739707947
[2023-09-01 06:53:18,296] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1264/1998 [4:59:00<2:55:33, 14.35s/it]09/01/2023 06:53:25 - INFO - __main__ -   Step: 1264, LR: 7.5690322580645174e-06, Loss: 0.40590208768844604
[2023-09-01 06:53:32,525] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1265/1998 [4:59:14<2:55:54, 14.40s/it]09/01/2023 06:53:40 - INFO - __main__ -   Step: 1265, LR: 7.558709677419355e-06, Loss: 0.3870249390602112
[2023-09-01 06:53:45,821] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1266/1998 [4:59:27<2:49:29, 13.89s/it]09/01/2023 06:53:52 - INFO - __main__ -   Step: 1266, LR: 7.548387096774194e-06, Loss: 0.5467199683189392
[2023-09-01 06:53:59,498] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1267/1998 [4:59:41<2:51:30, 14.08s/it]09/01/2023 06:54:07 - INFO - __main__ -   Step: 1267, LR: 7.538064516129033e-06, Loss: 0.5052525997161865
[2023-09-01 06:54:14,722] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 63%|██████▎   | 1268/1998 [4:59:57<2:56:21, 14.50s/it]09/01/2023 06:54:22 - INFO - __main__ -   Step: 1268, LR: 7.527741935483872e-06, Loss: 0.5003066062927246
[2023-09-01 06:54:28,937] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▎   | 1269/1998 [5:00:11<2:54:50, 14.39s/it]09/01/2023 06:54:36 - INFO - __main__ -   Step: 1269, LR: 7.51741935483871e-06, Loss: 0.45469632744789124
[2023-09-01 06:54:43,317] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▎   | 1270/1998 [5:00:25<2:54:50, 14.41s/it]09/01/2023 06:54:51 - INFO - __main__ -   Step: 1270, LR: 7.507096774193549e-06, Loss: 0.47260427474975586
[2023-09-01 06:54:58,205] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▎   | 1271/1998 [5:00:39<2:53:14, 14.30s/it]09/01/2023 06:55:05 - INFO - __main__ -   Step: 1271, LR: 7.496774193548388e-06, Loss: 0.48204705119132996
[2023-09-01 06:55:11,483] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▎   | 1272/1998 [5:00:53<2:49:54, 14.04s/it]09/01/2023 06:55:18 - INFO - __main__ -   Step: 1272, LR: 7.4864516129032264e-06, Loss: 0.44938361644744873
[2023-09-01 06:55:24,933] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▎   | 1273/1998 [5:01:06<2:47:43, 13.88s/it]09/01/2023 06:55:32 - INFO - __main__ -   Step: 1273, LR: 7.476129032258065e-06, Loss: 0.5470142960548401
[2023-09-01 06:55:39,228] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1274/1998 [5:01:20<2:48:05, 13.93s/it]09/01/2023 06:55:46 - INFO - __main__ -   Step: 1274, LR: 7.465806451612903e-06, Loss: 0.4258837103843689
[2023-09-01 06:55:52,625] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1275/1998 [5:01:34<2:48:02, 13.95s/it]09/01/2023 06:56:00 - INFO - __main__ -   Step: 1275, LR: 7.455483870967742e-06, Loss: 0.47016221284866333
[2023-09-01 06:56:06,690] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1276/1998 [5:01:48<2:46:47, 13.86s/it]09/01/2023 06:56:14 - INFO - __main__ -   Step: 1276, LR: 7.445161290322581e-06, Loss: 0.5199878215789795
[2023-09-01 06:56:21,044] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1277/1998 [5:02:02<2:47:36, 13.95s/it]09/01/2023 06:56:28 - INFO - __main__ -   Step: 1277, LR: 7.43483870967742e-06, Loss: 0.5108118057250977
[2023-09-01 06:56:34,690] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1278/1998 [5:02:16<2:46:39, 13.89s/it]09/01/2023 06:56:41 - INFO - __main__ -   Step: 1278, LR: 7.424516129032259e-06, Loss: 0.49115419387817383
[2023-09-01 06:56:47,756] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1279/1998 [5:02:30<2:48:16, 14.04s/it]09/01/2023 06:56:56 - INFO - __main__ -   Step: 1279, LR: 7.4141935483870974e-06, Loss: 0.4827859103679657
[2023-09-01 06:57:02,325] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1280/1998 [5:02:43<2:44:41, 13.76s/it]09/01/2023 06:57:09 - INFO - __main__ -   Step: 1280, LR: 7.403870967741936e-06, Loss: 0.4685933291912079
[2023-09-01 06:57:15,437] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1281/1998 [5:02:57<2:43:20, 13.67s/it]09/01/2023 06:57:22 - INFO - __main__ -   Step: 1281, LR: 7.393548387096775e-06, Loss: 0.4508224129676819
[2023-09-01 06:57:28,880] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1282/1998 [5:03:11<2:45:01, 13.83s/it]09/01/2023 06:57:37 - INFO - __main__ -   Step: 1282, LR: 7.383225806451614e-06, Loss: 0.46729931235313416
[2023-09-01 06:57:44,671] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1283/1998 [5:03:27<2:50:41, 14.32s/it]09/01/2023 06:57:52 - INFO - __main__ -   Step: 1283, LR: 7.372903225806453e-06, Loss: 0.4342087507247925
[2023-09-01 06:57:58,920] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1284/1998 [5:03:40<2:48:49, 14.19s/it]09/01/2023 06:58:06 - INFO - __main__ -   Step: 1284, LR: 7.362580645161292e-06, Loss: 0.5175955891609192
[2023-09-01 06:58:12,554] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1285/1998 [5:03:54<2:46:49, 14.04s/it]09/01/2023 06:58:20 - INFO - __main__ -   Step: 1285, LR: 7.3522580645161304e-06, Loss: 0.45767518877983093
[2023-09-01 06:58:27,086] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1286/1998 [5:04:08<2:47:21, 14.10s/it]09/01/2023 06:58:34 - INFO - __main__ -   Step: 1286, LR: 7.341935483870969e-06, Loss: 0.4324929118156433
[2023-09-01 06:58:40,550] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1287/1998 [5:04:22<2:46:20, 14.04s/it]09/01/2023 06:58:48 - INFO - __main__ -   Step: 1287, LR: 7.331612903225806e-06, Loss: 0.48231327533721924
[2023-09-01 06:58:54,791] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 64%|██████▍   | 1288/1998 [5:04:36<2:45:30, 13.99s/it]09/01/2023 06:59:02 - INFO - __main__ -   Step: 1288, LR: 7.321290322580645e-06, Loss: 0.5214245915412903
[2023-09-01 06:59:08,976] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1289/1998 [5:04:51<2:46:57, 14.13s/it]09/01/2023 06:59:16 - INFO - __main__ -   Step: 1289, LR: 7.310967741935484e-06, Loss: 0.5173083543777466
[2023-09-01 06:59:22,434] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1290/1998 [5:05:04<2:42:41, 13.79s/it]09/01/2023 06:59:29 - INFO - __main__ -   Step: 1290, LR: 7.300645161290323e-06, Loss: 0.46201589703559875
[2023-09-01 06:59:36,247] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1291/1998 [5:05:18<2:45:17, 14.03s/it]09/01/2023 06:59:44 - INFO - __main__ -   Step: 1291, LR: 7.290322580645162e-06, Loss: 0.4888763427734375
[2023-09-01 06:59:50,261] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1292/1998 [5:05:31<2:42:11, 13.78s/it]09/01/2023 06:59:57 - INFO - __main__ -   Step: 1292, LR: 7.280000000000001e-06, Loss: 0.45522791147232056
[2023-09-01 07:00:03,023] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1293/1998 [5:05:44<2:39:10, 13.55s/it]09/01/2023 07:00:10 - INFO - __main__ -   Step: 1293, LR: 7.2696774193548394e-06, Loss: 0.4407612383365631
[2023-09-01 07:00:16,958] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1294/1998 [5:05:59<2:43:24, 13.93s/it]09/01/2023 07:00:25 - INFO - __main__ -   Step: 1294, LR: 7.259354838709678e-06, Loss: 0.5083313584327698
[2023-09-01 07:00:32,051] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1295/1998 [5:06:14<2:45:39, 14.14s/it]09/01/2023 07:00:39 - INFO - __main__ -   Step: 1295, LR: 7.249032258064517e-06, Loss: 0.42944324016571045
[2023-09-01 07:00:46,503] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1296/1998 [5:06:28<2:45:38, 14.16s/it]09/01/2023 07:00:54 - INFO - __main__ -   Step: 1296, LR: 7.238709677419355e-06, Loss: 0.46499770879745483
[2023-09-01 07:00:59,945] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1297/1998 [5:06:41<2:43:00, 13.95s/it]09/01/2023 07:01:07 - INFO - __main__ -   Step: 1297, LR: 7.228387096774194e-06, Loss: 0.49030011892318726
[2023-09-01 07:01:13,385] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▍   | 1298/1998 [5:06:55<2:40:45, 13.78s/it]09/01/2023 07:01:20 - INFO - __main__ -   Step: 1298, LR: 7.218064516129033e-06, Loss: 0.49674999713897705
[2023-09-01 07:01:26,894] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1299/1998 [5:07:08<2:39:40, 13.71s/it]09/01/2023 07:01:34 - INFO - __main__ -   Step: 1299, LR: 7.207741935483872e-06, Loss: 0.39435482025146484
[2023-09-01 07:01:40,750] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1300/1998 [5:07:23<2:43:01, 14.01s/it]09/01/2023 07:01:49 - INFO - __main__ -   Step: 1300, LR: 7.1974193548387104e-06, Loss: 0.4712418019771576
09/01/2023 07:01:49 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300
09/01/2023 07:01:49 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 07:01:49,180] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 07:01:49,186] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 07:01:49,186] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 07:01:49,186] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 07:01:49,186] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 07:01:49,187] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 07:01:49,187] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 07:01:49,200] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 07:01:49,201] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 07:01:49,201] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 07:01:49,201] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 07:01:49,202] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 07:01:49,202] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 07:01:49,202] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 07:01:49,202] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 07:02:46,670] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 07:02:46,671] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 07:02:49,955] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 07:02:49,955] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 07:02:52,087] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 07:02:52,088] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 07:02:52,666] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 07:02:52,666] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 07:02:52,670] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:02:52,670] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:02:52,671] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:02:52,671] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 07:02:52 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/pytorch_model
09/01/2023 07:02:52 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/scheduler.bin
09/01/2023 07:02:52 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1300/random_states_0.pkl
09/01/2023 07:02:52 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.93it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.91it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.96it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.67it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.75it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.48it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.46it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.66it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.82it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.91it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.04it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.11it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:50,  4.19it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:49,  4.24it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.27it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.28it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.24it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.02it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.92it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.00it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.10it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.16it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.19it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.00it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.63it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.82it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.65it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.85it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.99it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.84it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  3.99it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:50,  3.88it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.69it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.80it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.94it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.03it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:50,  3.78it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:47,  3.92it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.03it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.10it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.10it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.83it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:51,  3.53it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:48,  3.72it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.58it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.44it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.47it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:52,  3.42it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.54it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.47it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.41it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.77it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.60it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.79it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.83it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.89it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.00it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.04it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.09it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.12it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.16it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.18it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:37,  4.21it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.16it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.21it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  4.00it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.86it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.81it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.07it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.14it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.84it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.97it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.62it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.72it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:37,  3.92it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:35,  4.06it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.93it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.96it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.08it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:32,  4.15it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.10it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.15it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.18it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.02it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.09it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:34,  3.83it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.87it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.97it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.99it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.08it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.09it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.13it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.17it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:28,  4.21it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.19it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.82it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.94it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.03it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.06it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:27,  4.15it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.77it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:28,  3.95it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.06it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.90it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.03it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:26,  4.09it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.10it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.20it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.21it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:24,  4.25it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.29it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.31it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.32it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:31<00:23,  4.30it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.34it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.89it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.63it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.81it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.94it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.96it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.11it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:23,  3.93it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.07it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.96it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.09it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.15it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:20,  4.24it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.28it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.32it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:35<00:19,  4.33it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.33it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.37it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:18,  4.38it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.37it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.41it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:17,  4.45it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.43it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.40it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:37<00:17,  4.42it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.39it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.39it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.36it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:17,  4.28it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.98it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.10it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:39<00:16,  4.18it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.26it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.30it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.34it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:14,  4.34it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.37it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.40it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.41it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.41it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:41<00:13,  4.45it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.46it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.18it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.26it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:42<00:13,  4.27it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.33it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.33it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.11it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:43<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.97it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.09it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.18it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:44<00:11,  4.01it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.13it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.23it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.30it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.29it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:09,  4.31it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.36it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.14it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.11it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:46<00:09,  4.21it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.25it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.31it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.10it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:47<00:08,  4.19it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:07,  4.27it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.19it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.27it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.32it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.36it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.39it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.41it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.98it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.08it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.17it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.27it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.32it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:50<00:05,  4.37it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.41it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.43it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.43it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:51<00:04,  4.39it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.41it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.40it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.17it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.19it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.25it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.26it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.31it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.33it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:53<00:02,  4.37it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.29it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.33it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.35it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:54<00:01,  4.35it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.38it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.41it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.44it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.43it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:55<00:00,  4.46it/s][A09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:03:49 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.99it/s]
09/01/2023 07:03:49 - INFO - __main__ -   Step: 1300, Validation Metrics: {'accuracy': 0.7986297565040275, 'f1_micro': 0.7986297565040275, 'f1_macro': 0.42901177155977166, 'f1_weighted': 0.7567860252334645, 'f1_1': 0.884646497330529, 'f1_-1': 0.3371069182389937, 'f1_0': 0.06528189910979228, 'precision_micro': 0.7986297565040275, 'precision_macro': 0.6479947138638201, 'precision_weighted': 0.764588659693975, 'precision_1': 0.824570222177541, 'precision_-1': 0.4908424908424908, 'precision_0': 0.6285714285714286, 'recall_micro': 0.7986297565040275, 'recall_macro': 0.4150995012051501, 'recall_weighted': 0.7986297565040275, 'recall_1': 0.954164727780363, 'recall_-1': 0.2567049808429119, 'recall_0': 0.03442879499217527}
[2023-09-01 07:03:56,421] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1301/1998 [5:09:38<9:45:12, 50.38s/it]09/01/2023 07:04:04 - INFO - __main__ -   Step: 1301, LR: 7.187096774193549e-06, Loss: 0.4965702295303345
[2023-09-01 07:04:11,457] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1302/1998 [5:09:53<7:39:43, 39.63s/it]09/01/2023 07:04:18 - INFO - __main__ -   Step: 1302, LR: 7.176774193548388e-06, Loss: 0.5585082769393921
[2023-09-01 07:04:25,358] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1303/1998 [5:10:08<6:13:06, 32.21s/it]09/01/2023 07:04:33 - INFO - __main__ -   Step: 1303, LR: 7.166451612903227e-06, Loss: 0.4053955078125
[2023-09-01 07:04:40,706] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1304/1998 [5:10:22<5:08:45, 26.69s/it]09/01/2023 07:04:47 - INFO - __main__ -   Step: 1304, LR: 7.156129032258066e-06, Loss: 0.5143086910247803
[2023-09-01 07:04:53,880] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1305/1998 [5:10:35<4:22:40, 22.74s/it]09/01/2023 07:05:01 - INFO - __main__ -   Step: 1305, LR: 7.145806451612903e-06, Loss: 0.4629417061805725
[2023-09-01 07:05:08,189] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1306/1998 [5:10:50<3:54:18, 20.32s/it]09/01/2023 07:05:15 - INFO - __main__ -   Step: 1306, LR: 7.135483870967742e-06, Loss: 0.4418884515762329
[2023-09-01 07:05:22,984] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1307/1998 [5:11:05<3:35:01, 18.67s/it]09/01/2023 07:05:30 - INFO - __main__ -   Step: 1307, LR: 7.125161290322581e-06, Loss: 0.5028519034385681
[2023-09-01 07:05:36,482] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 65%|██████▌   | 1308/1998 [5:11:18<3:16:53, 17.12s/it]09/01/2023 07:05:44 - INFO - __main__ -   Step: 1308, LR: 7.1148387096774194e-06, Loss: 0.524474024772644
[2023-09-01 07:05:50,082] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1309/1998 [5:11:31<3:03:38, 15.99s/it]09/01/2023 07:05:57 - INFO - __main__ -   Step: 1309, LR: 7.104516129032258e-06, Loss: 0.42825642228126526
[2023-09-01 07:06:03,316] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1310/1998 [5:11:45<2:54:59, 15.26s/it]09/01/2023 07:06:11 - INFO - __main__ -   Step: 1310, LR: 7.094193548387097e-06, Loss: 0.4293053150177002
[2023-09-01 07:06:17,335] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1311/1998 [5:11:59<2:49:50, 14.83s/it]09/01/2023 07:06:24 - INFO - __main__ -   Step: 1311, LR: 7.083870967741936e-06, Loss: 0.46619945764541626
[2023-09-01 07:06:30,750] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1312/1998 [5:12:12<2:45:12, 14.45s/it]09/01/2023 07:06:38 - INFO - __main__ -   Step: 1312, LR: 7.073548387096775e-06, Loss: 0.445896178483963
[2023-09-01 07:06:45,379] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1313/1998 [5:12:27<2:44:32, 14.41s/it]09/01/2023 07:06:52 - INFO - __main__ -   Step: 1313, LR: 7.063225806451614e-06, Loss: 0.4326145648956299
[2023-09-01 07:06:59,569] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1314/1998 [5:12:41<2:43:17, 14.32s/it]09/01/2023 07:07:06 - INFO - __main__ -   Step: 1314, LR: 7.0529032258064524e-06, Loss: 0.4381335973739624
[2023-09-01 07:07:13,383] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1315/1998 [5:12:55<2:41:08, 14.16s/it]09/01/2023 07:07:20 - INFO - __main__ -   Step: 1315, LR: 7.042580645161291e-06, Loss: 0.49675244092941284
[2023-09-01 07:07:27,678] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1316/1998 [5:13:09<2:41:40, 14.22s/it]09/01/2023 07:07:35 - INFO - __main__ -   Step: 1316, LR: 7.03225806451613e-06, Loss: 0.5449758768081665
[2023-09-01 07:07:41,459] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1317/1998 [5:13:23<2:40:47, 14.17s/it]09/01/2023 07:07:49 - INFO - __main__ -   Step: 1317, LR: 7.021935483870969e-06, Loss: 0.47917383909225464
[2023-09-01 07:07:55,204] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1318/1998 [5:13:38<2:42:38, 14.35s/it]09/01/2023 07:08:03 - INFO - __main__ -   Step: 1318, LR: 7.011612903225807e-06, Loss: 0.4361533522605896
[2023-09-01 07:08:11,068] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1319/1998 [5:13:53<2:45:34, 14.63s/it]09/01/2023 07:08:19 - INFO - __main__ -   Step: 1319, LR: 7.001290322580646e-06, Loss: 0.4268556833267212
[2023-09-01 07:08:26,790] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1320/1998 [5:14:08<2:47:47, 14.85s/it]09/01/2023 07:08:34 - INFO - __main__ -   Step: 1320, LR: 6.990967741935485e-06, Loss: 0.5082215070724487
[2023-09-01 07:08:40,904] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1321/1998 [5:14:23<2:46:51, 14.79s/it]09/01/2023 07:08:49 - INFO - __main__ -   Step: 1321, LR: 6.9806451612903235e-06, Loss: 0.43873247504234314
[2023-09-01 07:08:56,144] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1322/1998 [5:14:38<2:46:14, 14.76s/it]09/01/2023 07:09:03 - INFO - __main__ -   Step: 1322, LR: 6.9703225806451614e-06, Loss: 0.5255271792411804
[2023-09-01 07:09:09,784] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▌   | 1323/1998 [5:14:51<2:42:05, 14.41s/it]09/01/2023 07:09:17 - INFO - __main__ -   Step: 1323, LR: 6.96e-06, Loss: 0.4623536765575409
[2023-09-01 07:09:24,057] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▋   | 1324/1998 [5:15:05<2:40:22, 14.28s/it]09/01/2023 07:09:31 - INFO - __main__ -   Step: 1324, LR: 6.949677419354839e-06, Loss: 0.5152592658996582
[2023-09-01 07:09:37,939] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▋   | 1325/1998 [5:15:19<2:37:40, 14.06s/it]09/01/2023 07:09:44 - INFO - __main__ -   Step: 1325, LR: 6.939354838709678e-06, Loss: 0.4179403781890869
[2023-09-01 07:09:51,669] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▋   | 1326/1998 [5:15:33<2:38:10, 14.12s/it]09/01/2023 07:09:59 - INFO - __main__ -   Step: 1326, LR: 6.929032258064517e-06, Loss: 0.4712900221347809
[2023-09-01 07:10:06,045] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▋   | 1327/1998 [5:15:48<2:40:38, 14.36s/it]09/01/2023 07:10:14 - INFO - __main__ -   Step: 1327, LR: 6.918709677419355e-06, Loss: 0.5022464990615845
[2023-09-01 07:10:20,957] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 66%|██████▋   | 1328/1998 [5:16:03<2:41:15, 14.44s/it]09/01/2023 07:10:28 - INFO - __main__ -   Step: 1328, LR: 6.908387096774194e-06, Loss: 0.4405895173549652
[2023-09-01 07:10:35,049] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1329/1998 [5:16:17<2:39:44, 14.33s/it]09/01/2023 07:10:42 - INFO - __main__ -   Step: 1329, LR: 6.8980645161290324e-06, Loss: 0.4569564461708069
[2023-09-01 07:10:49,252] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1330/1998 [5:16:31<2:38:54, 14.27s/it]09/01/2023 07:10:57 - INFO - __main__ -   Step: 1330, LR: 6.887741935483871e-06, Loss: 0.5419449806213379
[2023-09-01 07:11:03,361] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1331/1998 [5:16:45<2:38:10, 14.23s/it]09/01/2023 07:11:11 - INFO - __main__ -   Step: 1331, LR: 6.87741935483871e-06, Loss: 0.44664159417152405
[2023-09-01 07:11:16,582] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1332/1998 [5:16:54<2:19:55, 12.61s/it]09/01/2023 07:11:19 - INFO - __main__ -   Step: 1332, LR: 6.867096774193549e-06, Loss: 0.3019615113735199
09/01/2023 07:11:19 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1
09/01/2023 07:11:19 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 07:11:19,955] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 07:11:19,961] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 07:11:19,961] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 07:11:19,961] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 07:11:19,961] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 07:11:19,963] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 07:11:19,963] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 07:11:19,975] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 07:11:19,976] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 07:11:19,976] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 07:11:19,979] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 07:11:19,979] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 07:11:19,979] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 07:11:19,979] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 07:11:19,980] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
 67%|██████▋   | 1332/1998 [5:17:15<2:19:55, 12.61s/it][2023-09-01 07:12:17,494] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 07:12:17,494] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 07:12:21,445] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 07:12:21,446] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 07:12:23,777] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 07:12:23,777] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 07:12:23,855] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 07:12:23,855] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 07:12:23,858] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:12:23,859] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:12:23,859] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:12:23,860] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 07:12:23 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/pytorch_model
09/01/2023 07:12:23 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/scheduler.bin
09/01/2023 07:12:23 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_1/random_states_0.pkl
09/01/2023 07:12:23 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.89it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.90it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.96it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.66it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.75it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.48it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.46it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.67it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.84it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.91it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.04it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.11it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:50,  4.19it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:49,  4.24it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.26it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.28it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.24it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.03it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.92it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.04it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.13it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:05<00:48,  4.18it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.21it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.02it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.64it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.84it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.67it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.88it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:48,  4.02it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.88it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  4.02it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.91it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:51,  3.71it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.82it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.96it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:46,  4.07it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:49,  3.80it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:47,  3.95it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.04it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.12it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.09it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.81it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:51,  3.52it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:48,  3.72it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.58it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.46it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.50it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:51,  3.44it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.57it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.49it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:50,  3.43it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:49,  3.48it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.42it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.62it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.78it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:46,  3.62it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.80it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.86it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.89it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.01it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.04it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:39,  4.11it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.15it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.19it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.19it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:37,  4.23it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.17it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:17<00:37,  4.23it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  4.01it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.87it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.81it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.06it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.15it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.85it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.98it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.62it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.72it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.80it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.92it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.99it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:35,  4.08it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:35,  3.95it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.94it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.09it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:32,  4.16it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.11it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.18it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.22it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:32,  4.03it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:31,  4.13it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:33,  3.87it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.90it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  4.00it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:31,  4.01it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  4.01it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.09it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.09it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.14it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.16it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.19it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.18it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.93it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.04it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.06it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:27,  4.15it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.78it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:28,  3.95it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.06it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.91it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.04it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:26,  4.11it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.10it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.20it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.22it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:30<00:25,  4.24it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.25it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.31it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.32it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:31<00:23,  4.30it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.35it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.89it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.59it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:32<00:25,  3.79it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.94it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.95it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.09it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:33<00:23,  3.93it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.07it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.96it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.10it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:34<00:21,  4.16it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:20,  4.24it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.26it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.33it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:35<00:19,  4.34it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.33it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.36it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:18,  4.39it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.38it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:36<00:18,  4.42it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.44it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.43it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.40it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:37<00:17,  4.43it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.39it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.40it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.40it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:16,  4.31it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.84it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.99it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.11it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:39<00:16,  4.20it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.28it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.32it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.37it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:14,  4.35it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:40<00:14,  4.37it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.39it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.40it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.41it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:41<00:13,  4.43it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.45it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.17it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.26it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:42<00:13,  4.25it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.31it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.33it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.11it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:43<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.97it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.07it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.16it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:44<00:12,  3.99it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.12it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.21it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.29it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.30it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:45<00:09,  4.32it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.36it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.14it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.13it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:46<00:09,  4.21it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.24it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.29it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.09it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:47<00:08,  4.21it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:07,  4.27it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.19it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.27it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.33it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:48<00:06,  4.36it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.38it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.39it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.98it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:49<00:06,  4.09it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.18it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.26it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.32it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:50<00:05,  4.36it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.39it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.40it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.41it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:51<00:04,  4.39it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.40it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.40it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.16it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.21it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:52<00:03,  4.27it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.29it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.32it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.35it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:53<00:02,  4.40it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.31it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.33it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.38it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:54<00:01,  4.39it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.40it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.41it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.41it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.43it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:55<00:00,  4.44it/s][A09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:13:20 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  4.00it/s]
09/01/2023 07:13:20 - INFO - __main__ -   Step: 1332, Validation Metrics: {'accuracy': 0.8043699657439126, 'f1_micro': 0.8043699657439125, 'f1_macro': 0.416982493434437, 'f1_weighted': 0.7552600552432056, 'f1_1': 0.8888177891537353, 'f1_-1': 0.30839834786599357, 'f1_0': 0.05373134328358209, 'precision_micro': 0.8043699657439126, 'precision_macro': 0.6497623370547022, 'precision_weighted': 0.7668332577722281, 'precision_1': 0.8205178694496407, 'precision_-1': 0.5481239804241436, 'precision_0': 0.5806451612903226, 'recall_micro': 0.8043699657439126, 'recall_macro': 0.4040830361211369, 'recall_weighted': 0.8043699657439126, 'recall_1': 0.9695207073057236, 'recall_-1': 0.21455938697318008, 'recall_0': 0.028169014084507043}
[2023-09-01 07:13:31,222] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1333/1998 [5:19:08<9:03:54, 49.07s/it]09/01/2023 07:13:34 - INFO - __main__ -   Step: 1333, LR: 6.856774193548388e-06, Loss: 0.4015677571296692
[2023-09-01 07:13:44,927] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1334/1998 [5:19:22<7:06:27, 38.54s/it]09/01/2023 07:13:48 - INFO - __main__ -   Step: 1334, LR: 6.846451612903227e-06, Loss: 0.3927077054977417
[2023-09-01 07:13:58,732] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1335/1998 [5:19:35<5:41:43, 30.93s/it]09/01/2023 07:14:01 - INFO - __main__ -   Step: 1335, LR: 6.8361290322580655e-06, Loss: 0.37107664346694946
[2023-09-01 07:14:11,407] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1336/1998 [5:19:49<4:42:54, 25.64s/it]09/01/2023 07:14:14 - INFO - __main__ -   Step: 1336, LR: 6.825806451612904e-06, Loss: 0.3973970115184784
[2023-09-01 07:14:24,818] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1337/1998 [5:20:02<4:02:40, 22.03s/it]09/01/2023 07:14:28 - INFO - __main__ -   Step: 1337, LR: 6.815483870967743e-06, Loss: 0.3413406312465668
[2023-09-01 07:14:38,618] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1338/1998 [5:20:16<3:34:52, 19.53s/it]09/01/2023 07:14:41 - INFO - __main__ -   Step: 1338, LR: 6.805161290322582e-06, Loss: 0.3645096719264984
[2023-09-01 07:14:53,749] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1339/1998 [5:20:31<3:20:45, 18.28s/it]09/01/2023 07:14:57 - INFO - __main__ -   Step: 1339, LR: 6.794838709677421e-06, Loss: 0.3613872528076172
[2023-09-01 07:15:09,020] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1340/1998 [5:20:46<3:08:59, 17.23s/it]09/01/2023 07:15:11 - INFO - __main__ -   Step: 1340, LR: 6.784516129032258e-06, Loss: 0.3236522078514099
[2023-09-01 07:15:23,325] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1341/1998 [5:21:01<2:59:57, 16.43s/it]09/01/2023 07:15:26 - INFO - __main__ -   Step: 1341, LR: 6.774193548387097e-06, Loss: 0.3139973282814026
[2023-09-01 07:15:37,395] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1342/1998 [5:21:14<2:51:25, 15.68s/it]09/01/2023 07:15:40 - INFO - __main__ -   Step: 1342, LR: 6.763870967741936e-06, Loss: 0.3753441572189331
[2023-09-01 07:15:51,707] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1343/1998 [5:21:29<2:46:37, 15.26s/it]09/01/2023 07:15:54 - INFO - __main__ -   Step: 1343, LR: 6.7535483870967745e-06, Loss: 0.24872566759586334
[2023-09-01 07:16:06,474] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1344/1998 [5:21:43<2:44:18, 15.07s/it]09/01/2023 07:16:09 - INFO - __main__ -   Step: 1344, LR: 6.743225806451613e-06, Loss: 0.30635496973991394
[2023-09-01 07:16:19,627] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1345/1998 [5:21:57<2:38:26, 14.56s/it]09/01/2023 07:16:22 - INFO - __main__ -   Step: 1345, LR: 6.732903225806452e-06, Loss: 0.351462721824646
[2023-09-01 07:16:34,025] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1346/1998 [5:22:11<2:37:00, 14.45s/it]09/01/2023 07:16:36 - INFO - __main__ -   Step: 1346, LR: 6.722580645161291e-06, Loss: 0.3429384231567383
[2023-09-01 07:16:48,424] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1347/1998 [5:22:25<2:36:56, 14.46s/it]09/01/2023 07:16:51 - INFO - __main__ -   Step: 1347, LR: 6.71225806451613e-06, Loss: 0.2865297198295593
[2023-09-01 07:17:03,149] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 67%|██████▋   | 1348/1998 [5:22:40<2:36:41, 14.46s/it]09/01/2023 07:17:05 - INFO - __main__ -   Step: 1348, LR: 6.701935483870969e-06, Loss: 0.29698652029037476
[2023-09-01 07:17:16,732] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1349/1998 [5:22:54<2:34:24, 14.27s/it]09/01/2023 07:17:19 - INFO - __main__ -   Step: 1349, LR: 6.691612903225807e-06, Loss: 0.2352072298526764
[2023-09-01 07:17:30,977] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1350/1998 [5:23:08<2:33:48, 14.24s/it]09/01/2023 07:17:33 - INFO - __main__ -   Step: 1350, LR: 6.6812903225806455e-06, Loss: 0.297578364610672
[2023-09-01 07:17:46,584] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1351/1998 [5:23:23<2:38:01, 14.65s/it]09/01/2023 07:17:49 - INFO - __main__ -   Step: 1351, LR: 6.670967741935484e-06, Loss: 0.3283432722091675
[2023-09-01 07:18:00,181] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1352/1998 [5:23:37<2:34:14, 14.33s/it]09/01/2023 07:18:03 - INFO - __main__ -   Step: 1352, LR: 6.660645161290323e-06, Loss: 0.31933215260505676
[2023-09-01 07:18:13,867] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1353/1998 [5:23:51<2:33:04, 14.24s/it]09/01/2023 07:18:17 - INFO - __main__ -   Step: 1353, LR: 6.650322580645162e-06, Loss: 0.3333328664302826
[2023-09-01 07:18:28,741] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1354/1998 [5:24:06<2:35:41, 14.50s/it]09/01/2023 07:18:32 - INFO - __main__ -   Step: 1354, LR: 6.640000000000001e-06, Loss: 0.31833958625793457
[2023-09-01 07:18:43,595] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1355/1998 [5:24:21<2:36:00, 14.56s/it]09/01/2023 07:18:46 - INFO - __main__ -   Step: 1355, LR: 6.62967741935484e-06, Loss: 0.29051047563552856
[2023-09-01 07:18:58,151] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1356/1998 [5:24:36<2:35:59, 14.58s/it]09/01/2023 07:19:01 - INFO - __main__ -   Step: 1356, LR: 6.6193548387096785e-06, Loss: 0.39860373735427856
[2023-09-01 07:19:12,282] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1357/1998 [5:24:49<2:32:35, 14.28s/it]09/01/2023 07:19:15 - INFO - __main__ -   Step: 1357, LR: 6.609032258064517e-06, Loss: 0.35570523142814636
[2023-09-01 07:19:25,534] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1358/1998 [5:25:02<2:28:53, 13.96s/it]09/01/2023 07:19:28 - INFO - __main__ -   Step: 1358, LR: 6.5987096774193544e-06, Loss: 0.3049287796020508
[2023-09-01 07:19:39,681] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1359/1998 [5:25:17<2:29:53, 14.08s/it]09/01/2023 07:19:42 - INFO - __main__ -   Step: 1359, LR: 6.588387096774193e-06, Loss: 0.3140000104904175
[2023-09-01 07:19:52,979] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1360/1998 [5:25:30<2:28:14, 13.94s/it]09/01/2023 07:19:56 - INFO - __main__ -   Step: 1360, LR: 6.578064516129032e-06, Loss: 0.3040194511413574
[2023-09-01 07:20:07,733] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1361/1998 [5:25:45<2:29:48, 14.11s/it]09/01/2023 07:20:10 - INFO - __main__ -   Step: 1361, LR: 6.567741935483871e-06, Loss: 0.3373311758041382
[2023-09-01 07:20:21,797] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1362/1998 [5:25:59<2:28:55, 14.05s/it]09/01/2023 07:20:24 - INFO - __main__ -   Step: 1362, LR: 6.55741935483871e-06, Loss: 0.3809067904949188
[2023-09-01 07:20:35,394] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1363/1998 [5:26:12<2:27:08, 13.90s/it]09/01/2023 07:20:38 - INFO - __main__ -   Step: 1363, LR: 6.547096774193549e-06, Loss: 0.36585575342178345
[2023-09-01 07:20:50,258] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1364/1998 [5:26:28<2:31:31, 14.34s/it]09/01/2023 07:20:53 - INFO - __main__ -   Step: 1364, LR: 6.5367741935483875e-06, Loss: 0.2635062336921692
[2023-09-01 07:21:04,531] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1365/1998 [5:26:41<2:29:22, 14.16s/it]09/01/2023 07:21:07 - INFO - __main__ -   Step: 1365, LR: 6.526451612903226e-06, Loss: 0.23745976388454437
[2023-09-01 07:21:19,321] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1366/1998 [5:26:56<2:31:53, 14.42s/it]09/01/2023 07:21:22 - INFO - __main__ -   Step: 1366, LR: 6.516129032258065e-06, Loss: 0.2678661346435547
[2023-09-01 07:21:34,132] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1367/1998 [5:27:12<2:34:52, 14.73s/it]09/01/2023 07:21:37 - INFO - __main__ -   Step: 1367, LR: 6.505806451612904e-06, Loss: 0.4034610092639923
[2023-09-01 07:21:50,204] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 68%|██████▊   | 1368/1998 [5:27:28<2:37:41, 15.02s/it]09/01/2023 07:21:53 - INFO - __main__ -   Step: 1368, LR: 6.495483870967743e-06, Loss: 0.30174797773361206
[2023-09-01 07:22:04,920] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▊   | 1369/1998 [5:27:42<2:36:23, 14.92s/it]09/01/2023 07:22:08 - INFO - __main__ -   Step: 1369, LR: 6.485161290322582e-06, Loss: 0.34994378685951233
[2023-09-01 07:22:19,086] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▊   | 1370/1998 [5:27:56<2:32:29, 14.57s/it]09/01/2023 07:22:22 - INFO - __main__ -   Step: 1370, LR: 6.4748387096774205e-06, Loss: 0.30346569418907166
[2023-09-01 07:22:33,377] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▊   | 1371/1998 [5:28:11<2:32:29, 14.59s/it]09/01/2023 07:22:36 - INFO - __main__ -   Step: 1371, LR: 6.4645161290322585e-06, Loss: 0.2705022990703583
[2023-09-01 07:22:47,961] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▊   | 1372/1998 [5:28:26<2:35:11, 14.87s/it]09/01/2023 07:22:52 - INFO - __main__ -   Step: 1372, LR: 6.454193548387097e-06, Loss: 0.3086368441581726
[2023-09-01 07:23:04,535] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▊   | 1373/1998 [5:28:41<2:35:02, 14.88s/it]09/01/2023 07:23:07 - INFO - __main__ -   Step: 1373, LR: 6.443870967741936e-06, Loss: 0.325558066368103
[2023-09-01 07:23:18,429] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1374/1998 [5:28:55<2:32:47, 14.69s/it]09/01/2023 07:23:21 - INFO - __main__ -   Step: 1374, LR: 6.433548387096775e-06, Loss: 0.3292759656906128
[2023-09-01 07:23:32,697] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1375/1998 [5:29:10<2:34:04, 14.84s/it]09/01/2023 07:23:36 - INFO - __main__ -   Step: 1375, LR: 6.423225806451614e-06, Loss: 0.2960927188396454
[2023-09-01 07:23:47,975] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1376/1998 [5:29:25<2:33:45, 14.83s/it]09/01/2023 07:23:51 - INFO - __main__ -   Step: 1376, LR: 6.412903225806452e-06, Loss: 0.32658910751342773
[2023-09-01 07:24:02,518] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1377/1998 [5:29:40<2:31:53, 14.68s/it]09/01/2023 07:24:05 - INFO - __main__ -   Step: 1377, LR: 6.402580645161291e-06, Loss: 0.3526565134525299
[2023-09-01 07:24:17,094] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1378/1998 [5:29:54<2:31:08, 14.63s/it]09/01/2023 07:24:20 - INFO - __main__ -   Step: 1378, LR: 6.3922580645161295e-06, Loss: 0.3318740427494049
[2023-09-01 07:24:30,325] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1379/1998 [5:30:07<2:25:56, 14.15s/it]09/01/2023 07:24:33 - INFO - __main__ -   Step: 1379, LR: 6.381935483870968e-06, Loss: 0.2905732989311218
[2023-09-01 07:24:43,759] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1380/1998 [5:30:21<2:23:38, 13.95s/it]09/01/2023 07:24:46 - INFO - __main__ -   Step: 1380, LR: 6.371612903225807e-06, Loss: 0.2462250292301178
[2023-09-01 07:24:57,272] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1381/1998 [5:30:34<2:22:39, 13.87s/it]09/01/2023 07:25:00 - INFO - __main__ -   Step: 1381, LR: 6.361290322580645e-06, Loss: 0.25293660163879395
[2023-09-01 07:25:11,078] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1382/1998 [5:30:48<2:22:19, 13.86s/it]09/01/2023 07:25:14 - INFO - __main__ -   Step: 1382, LR: 6.350967741935484e-06, Loss: 0.34130194783210754
[2023-09-01 07:25:26,230] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1383/1998 [5:31:03<2:25:05, 14.15s/it]09/01/2023 07:25:29 - INFO - __main__ -   Step: 1383, LR: 6.340645161290323e-06, Loss: 0.27280789613723755
[2023-09-01 07:25:39,411] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1384/1998 [5:31:16<2:22:25, 13.92s/it]09/01/2023 07:25:42 - INFO - __main__ -   Step: 1384, LR: 6.330322580645162e-06, Loss: 0.31045764684677124
[2023-09-01 07:25:53,396] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1385/1998 [5:31:31<2:22:59, 14.00s/it]09/01/2023 07:25:56 - INFO - __main__ -   Step: 1385, LR: 6.3200000000000005e-06, Loss: 0.26891085505485535
[2023-09-01 07:26:08,413] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1386/1998 [5:31:46<2:26:02, 14.32s/it]09/01/2023 07:26:11 - INFO - __main__ -   Step: 1386, LR: 6.309677419354839e-06, Loss: 0.27988260984420776
[2023-09-01 07:26:22,337] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1387/1998 [5:31:59<2:24:02, 14.15s/it]09/01/2023 07:26:25 - INFO - __main__ -   Step: 1387, LR: 6.299354838709678e-06, Loss: 0.24574221670627594
[2023-09-01 07:26:37,592] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 69%|██████▉   | 1388/1998 [5:32:15<2:28:14, 14.58s/it]09/01/2023 07:26:41 - INFO - __main__ -   Step: 1388, LR: 6.289032258064517e-06, Loss: 0.26844942569732666
[2023-09-01 07:26:52,290] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1389/1998 [5:32:29<2:27:11, 14.50s/it]09/01/2023 07:26:55 - INFO - __main__ -   Step: 1389, LR: 6.278709677419356e-06, Loss: 0.3288801610469818
[2023-09-01 07:27:06,306] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1390/1998 [5:32:43<2:25:34, 14.37s/it]09/01/2023 07:27:09 - INFO - __main__ -   Step: 1390, LR: 6.268387096774195e-06, Loss: 0.30718642473220825
[2023-09-01 07:27:19,908] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1391/1998 [5:32:57<2:22:52, 14.12s/it]09/01/2023 07:27:22 - INFO - __main__ -   Step: 1391, LR: 6.2580645161290335e-06, Loss: 0.2888818383216858
[2023-09-01 07:27:33,820] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1392/1998 [5:33:11<2:21:45, 14.04s/it]09/01/2023 07:27:36 - INFO - __main__ -   Step: 1392, LR: 6.247741935483872e-06, Loss: 0.2763797342777252
[2023-09-01 07:27:47,378] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1393/1998 [5:33:24<2:19:37, 13.85s/it]09/01/2023 07:27:50 - INFO - __main__ -   Step: 1393, LR: 6.2374193548387095e-06, Loss: 0.28302162885665894
[2023-09-01 07:28:01,857] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1394/1998 [5:33:39<2:22:38, 14.17s/it]09/01/2023 07:28:05 - INFO - __main__ -   Step: 1394, LR: 6.227096774193548e-06, Loss: 0.34141290187835693
[2023-09-01 07:28:16,443] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1395/1998 [5:33:54<2:23:21, 14.26s/it]09/01/2023 07:28:19 - INFO - __main__ -   Step: 1395, LR: 6.216774193548387e-06, Loss: 0.2782198190689087
[2023-09-01 07:28:30,400] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1396/1998 [5:34:07<2:21:33, 14.11s/it]09/01/2023 07:28:33 - INFO - __main__ -   Step: 1396, LR: 6.206451612903226e-06, Loss: 0.2864019274711609
[2023-09-01 07:28:43,711] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1397/1998 [5:34:21<2:18:51, 13.86s/it]09/01/2023 07:28:46 - INFO - __main__ -   Step: 1397, LR: 6.196129032258065e-06, Loss: 0.31234079599380493
[2023-09-01 07:28:56,614] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|██████▉   | 1398/1998 [5:34:33<2:15:16, 13.53s/it]09/01/2023 07:28:59 - INFO - __main__ -   Step: 1398, LR: 6.185806451612904e-06, Loss: 0.29241472482681274
[2023-09-01 07:29:10,316] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1399/1998 [5:34:47<2:16:30, 13.67s/it]09/01/2023 07:29:13 - INFO - __main__ -   Step: 1399, LR: 6.1754838709677425e-06, Loss: 0.37420910596847534
[2023-09-01 07:29:24,492] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1400/1998 [5:35:01<2:17:20, 13.78s/it]09/01/2023 07:29:27 - INFO - __main__ -   Step: 1400, LR: 6.165161290322581e-06, Loss: 0.30807211995124817
09/01/2023 07:29:27 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400
09/01/2023 07:29:27 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 07:29:27,399] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 07:29:27,404] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 07:29:27,405] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 07:29:27,405] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 07:29:27,405] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 07:29:27,406] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 07:29:27,406] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 07:29:27,419] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 07:29:27,420] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 07:29:27,420] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 07:29:27,420] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 07:29:27,421] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 07:29:27,421] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 07:29:27,421] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 07:29:27,421] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 07:30:28,511] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 07:30:28,511] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 07:30:30,337] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 07:30:30,338] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 07:30:30,470] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 07:30:30,470] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 07:30:31,164] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 07:30:31,164] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 07:30:31,168] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:30:31,168] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:30:31,169] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:30:31,169] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 07:30:31 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/pytorch_model
09/01/2023 07:30:31 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/scheduler.bin
09/01/2023 07:30:31 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1400/random_states_0.pkl
09/01/2023 07:30:31 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:44,  5.07it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:49,  4.54it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:59,  3.78it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:02,  3.57it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<01:00,  3.69it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:04,  3.45it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:07,  3.28it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.46it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.67it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.83it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.90it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.03it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:51,  4.12it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:50,  4.18it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.23it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.25it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.25it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.23it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.03it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.93it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:50,  4.05it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.13it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:48,  4.19it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.21it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.01it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.63it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.82it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.66it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.88it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:48,  4.03it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.88it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  4.02it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.91it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:51,  3.71it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.81it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.96it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:46,  4.06it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:49,  3.80it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:47,  3.94it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.05it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:44,  4.14it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:44,  4.11it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:47,  3.83it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:51,  3.54it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:48,  3.74it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.59it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:51,  3.49it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:50,  3.52it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:51,  3.45it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.58it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.49it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:50,  3.43it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.48it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.42it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.62it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.79it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:46,  3.64it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.82it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.87it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.91it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.03it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.06it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:39,  4.13it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.17it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.20it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.20it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:37,  4.24it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.17it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.25it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:38,  4.03it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.89it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.83it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:38,  3.96it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.08it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.16it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.86it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  4.00it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:40,  3.64it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.75it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.81it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.88it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.94it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.99it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:34,  4.09it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:35,  3.96it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.96it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.99it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  4.00it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.11it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:32,  4.18it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:32,  4.13it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.19it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.24it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:32,  4.05it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:31,  4.16it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:33,  3.88it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.91it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  4.02it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:31,  4.03it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  4.03it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.12it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.11it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.18it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.22it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:26<00:28,  4.26it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.23it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.83it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.95it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.04it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.07it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:27,  4.17it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.79it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:28,  3.98it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.09it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.93it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.06it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:26,  4.12it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.11it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.21it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.24it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:30<00:24,  4.28it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.31it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.32it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.34it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:31<00:23,  4.33it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.38it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.91it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.60it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:32<00:25,  3.82it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.96it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.98it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.12it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:33<00:23,  3.95it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.10it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.98it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.13it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:34<00:21,  4.18it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:20,  4.28it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.30it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.35it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:35<00:19,  4.35it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:35<00:19,  4.36it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.40it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:18,  4.42it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.40it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:36<00:18,  4.46it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:17,  4.48it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.47it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.44it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:37<00:17,  4.48it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.43it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:16,  4.44it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.41it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:16,  4.32it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.84it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.97it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.09it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:39<00:16,  4.20it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:39<00:15,  4.27it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.28it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.33it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:14,  4.34it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:40<00:14,  4.38it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.41it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.42it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.44it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:41<00:13,  4.43it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:41<00:13,  4.43it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.18it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.26it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:42<00:13,  4.27it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:42<00:12,  4.33it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.34it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.13it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:43<00:13,  3.85it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:43<00:12,  3.98it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.11it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.20it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:44<00:11,  4.01it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:44<00:11,  4.14it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.24it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.30it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.31it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:45<00:09,  4.33it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.35it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.15it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.12it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:46<00:09,  4.21it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.26it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.32it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.11it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:47<00:08,  4.18it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:47<00:07,  4.25it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.18it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.24it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.29it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:48<00:06,  4.32it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.37it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.40it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.98it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:49<00:06,  4.11it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.21it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.29it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.35it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:50<00:05,  4.36it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:50<00:04,  4.39it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.41it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.43it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:51<00:04,  4.40it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:51<00:03,  4.39it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.40it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.16it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.20it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:52<00:03,  4.26it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.30it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.31it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.34it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:53<00:02,  4.35it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.25it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.30it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.33it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:54<00:01,  4.34it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:54<00:00,  4.39it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.41it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.41it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.43it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:55<00:00,  4.43it/s][A09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:31:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.01it/s]
09/01/2023 07:31:27 - INFO - __main__ -   Step: 1400, Validation Metrics: {'accuracy': 0.7850199055642996, 'f1_micro': 0.7850199055642996, 'f1_macro': 0.4528400122163652, 'f1_weighted': 0.7555687019851035, 'f1_1': 0.8755902053365543, 'f1_-1': 0.3513829372808726, 'f1_0': 0.1315468940316687, 'precision_micro': 0.7850199055642996, 'precision_macro': 0.5254410800262329, 'precision_weighted': 0.7426945470313604, 'precision_1': 0.8290704928259514, 'precision_-1': 0.45054945054945056, 'precision_0': 0.2967032967032967, 'recall_micro': 0.7850199055642996, 'recall_macro': 0.43338089894744586, 'recall_weighted': 0.7850199055642996, 'recall_1': 0.9276407631456491, 'recall_-1': 0.2879948914431673, 'recall_0': 0.08450704225352113}
[2023-09-01 07:31:39,090] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1401/1998 [5:37:16<8:18:01, 50.05s/it]09/01/2023 07:31:42 - INFO - __main__ -   Step: 1401, LR: 6.15483870967742e-06, Loss: 0.29681286215782166
[2023-09-01 07:31:52,824] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1402/1998 [5:37:30<6:28:49, 39.14s/it]09/01/2023 07:31:55 - INFO - __main__ -   Step: 1402, LR: 6.144516129032259e-06, Loss: 0.3075820803642273
[2023-09-01 07:32:05,547] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1403/1998 [5:37:43<5:10:36, 31.32s/it]09/01/2023 07:32:08 - INFO - __main__ -   Step: 1403, LR: 6.134193548387097e-06, Loss: 0.30053406953811646
[2023-09-01 07:32:19,542] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1404/1998 [5:37:56<4:17:44, 26.03s/it]09/01/2023 07:32:22 - INFO - __main__ -   Step: 1404, LR: 6.123870967741936e-06, Loss: 0.3675515353679657
[2023-09-01 07:32:34,425] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1405/1998 [5:38:11<3:44:16, 22.69s/it]09/01/2023 07:32:37 - INFO - __main__ -   Step: 1405, LR: 6.113548387096775e-06, Loss: 0.2576403319835663
[2023-09-01 07:32:48,966] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1406/1998 [5:38:26<3:20:30, 20.32s/it]09/01/2023 07:32:52 - INFO - __main__ -   Step: 1406, LR: 6.1032258064516135e-06, Loss: 0.2796022593975067
[2023-09-01 07:33:03,277] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1407/1998 [5:38:40<3:01:26, 18.42s/it]09/01/2023 07:33:06 - INFO - __main__ -   Step: 1407, LR: 6.092903225806452e-06, Loss: 0.3340751528739929
[2023-09-01 07:33:17,498] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 70%|███████   | 1408/1998 [5:38:54<2:48:37, 17.15s/it]09/01/2023 07:33:20 - INFO - __main__ -   Step: 1408, LR: 6.082580645161291e-06, Loss: 0.2866855263710022
[2023-09-01 07:33:32,076] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1409/1998 [5:39:09<2:42:09, 16.52s/it]09/01/2023 07:33:35 - INFO - __main__ -   Step: 1409, LR: 6.07225806451613e-06, Loss: 0.26155659556388855
[2023-09-01 07:33:46,555] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1410/1998 [5:39:24<2:35:06, 15.83s/it]09/01/2023 07:33:49 - INFO - __main__ -   Step: 1410, LR: 6.061935483870969e-06, Loss: 0.3014787435531616
[2023-09-01 07:34:01,617] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1411/1998 [5:39:39<2:32:35, 15.60s/it]09/01/2023 07:34:04 - INFO - __main__ -   Step: 1411, LR: 6.051612903225807e-06, Loss: 0.32861125469207764
[2023-09-01 07:34:16,053] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1412/1998 [5:39:54<2:30:49, 15.44s/it]09/01/2023 07:34:19 - INFO - __main__ -   Step: 1412, LR: 6.041290322580645e-06, Loss: 0.2958671450614929
[2023-09-01 07:34:31,619] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1413/1998 [5:40:09<2:29:33, 15.34s/it]09/01/2023 07:34:34 - INFO - __main__ -   Step: 1413, LR: 6.030967741935484e-06, Loss: 0.29616767168045044
[2023-09-01 07:34:45,649] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1414/1998 [5:40:23<2:26:26, 15.05s/it]09/01/2023 07:34:49 - INFO - __main__ -   Step: 1414, LR: 6.0206451612903225e-06, Loss: 0.34503841400146484
[2023-09-01 07:35:00,205] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1415/1998 [5:40:37<2:22:53, 14.71s/it]09/01/2023 07:35:03 - INFO - __main__ -   Step: 1415, LR: 6.010322580645161e-06, Loss: 0.2987383306026459
[2023-09-01 07:35:15,004] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1416/1998 [5:40:52<2:23:02, 14.75s/it]09/01/2023 07:35:18 - INFO - __main__ -   Step: 1416, LR: 6e-06, Loss: 0.2981414198875427
[2023-09-01 07:35:29,372] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1417/1998 [5:41:06<2:21:54, 14.66s/it]09/01/2023 07:35:32 - INFO - __main__ -   Step: 1417, LR: 5.989677419354839e-06, Loss: 0.2896217703819275
[2023-09-01 07:35:43,050] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1418/1998 [5:41:20<2:18:33, 14.33s/it]09/01/2023 07:35:46 - INFO - __main__ -   Step: 1418, LR: 5.979354838709678e-06, Loss: 0.27924367785453796
[2023-09-01 07:35:56,014] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1419/1998 [5:41:33<2:14:10, 13.90s/it]09/01/2023 07:35:58 - INFO - __main__ -   Step: 1419, LR: 5.969032258064517e-06, Loss: 0.25842955708503723
[2023-09-01 07:36:10,225] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1420/1998 [5:41:47<2:14:23, 13.95s/it]09/01/2023 07:36:12 - INFO - __main__ -   Step: 1420, LR: 5.9587096774193555e-06, Loss: 0.33000093698501587
[2023-09-01 07:36:23,941] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1421/1998 [5:42:01<2:13:35, 13.89s/it]09/01/2023 07:36:26 - INFO - __main__ -   Step: 1421, LR: 5.948387096774194e-06, Loss: 0.29291725158691406
[2023-09-01 07:36:38,050] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1422/1998 [5:42:15<2:14:24, 14.00s/it]09/01/2023 07:36:41 - INFO - __main__ -   Step: 1422, LR: 5.938064516129033e-06, Loss: 0.34074872732162476
[2023-09-01 07:36:52,661] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████   | 1423/1998 [5:42:30<2:16:01, 14.19s/it]09/01/2023 07:36:55 - INFO - __main__ -   Step: 1423, LR: 5.927741935483872e-06, Loss: 0.3430445194244385
[2023-09-01 07:37:06,656] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████▏  | 1424/1998 [5:42:44<2:15:21, 14.15s/it]09/01/2023 07:37:09 - INFO - __main__ -   Step: 1424, LR: 5.917419354838711e-06, Loss: 0.3322126567363739
[2023-09-01 07:37:19,844] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████▏  | 1425/1998 [5:42:57<2:12:53, 13.92s/it]09/01/2023 07:37:23 - INFO - __main__ -   Step: 1425, LR: 5.907096774193549e-06, Loss: 0.33345359563827515
[2023-09-01 07:37:33,994] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████▏  | 1426/1998 [5:43:11<2:12:50, 13.93s/it]09/01/2023 07:37:37 - INFO - __main__ -   Step: 1426, LR: 5.896774193548388e-06, Loss: 0.33231616020202637
[2023-09-01 07:37:48,175] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████▏  | 1427/1998 [5:43:25<2:12:18, 13.90s/it]09/01/2023 07:37:50 - INFO - __main__ -   Step: 1427, LR: 5.8864516129032265e-06, Loss: 0.27089065313339233
[2023-09-01 07:38:01,896] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 71%|███████▏  | 1428/1998 [5:43:40<2:14:18, 14.14s/it]09/01/2023 07:38:05 - INFO - __main__ -   Step: 1428, LR: 5.876129032258065e-06, Loss: 0.3147777318954468
[2023-09-01 07:38:16,025] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1429/1998 [5:43:53<2:12:05, 13.93s/it]09/01/2023 07:38:18 - INFO - __main__ -   Step: 1429, LR: 5.865806451612903e-06, Loss: 0.3106565475463867
[2023-09-01 07:38:29,528] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1430/1998 [5:44:06<2:10:41, 13.80s/it]09/01/2023 07:38:32 - INFO - __main__ -   Step: 1430, LR: 5.855483870967742e-06, Loss: 0.3163633942604065
[2023-09-01 07:38:42,611] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1431/1998 [5:44:20<2:09:22, 13.69s/it]09/01/2023 07:38:45 - INFO - __main__ -   Step: 1431, LR: 5.845161290322581e-06, Loss: 0.24740171432495117
[2023-09-01 07:38:57,420] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1432/1998 [5:44:34<2:11:30, 13.94s/it]09/01/2023 07:39:00 - INFO - __main__ -   Step: 1432, LR: 5.83483870967742e-06, Loss: 0.31426480412483215
[2023-09-01 07:39:11,710] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1433/1998 [5:44:49<2:12:16, 14.05s/it]09/01/2023 07:39:14 - INFO - __main__ -   Step: 1433, LR: 5.824516129032259e-06, Loss: 0.3036317825317383
[2023-09-01 07:39:25,328] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1434/1998 [5:45:02<2:10:36, 13.89s/it]09/01/2023 07:39:28 - INFO - __main__ -   Step: 1434, LR: 5.814193548387097e-06, Loss: 0.26852065324783325
[2023-09-01 07:39:38,333] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1435/1998 [5:45:15<2:07:36, 13.60s/it]09/01/2023 07:39:41 - INFO - __main__ -   Step: 1435, LR: 5.8038709677419355e-06, Loss: 0.32380276918411255
[2023-09-01 07:39:51,247] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1436/1998 [5:45:28<2:04:30, 13.29s/it]09/01/2023 07:39:53 - INFO - __main__ -   Step: 1436, LR: 5.793548387096774e-06, Loss: 0.36113977432250977
[2023-09-01 07:40:04,896] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1437/1998 [5:45:42<2:06:41, 13.55s/it]09/01/2023 07:40:07 - INFO - __main__ -   Step: 1437, LR: 5.783225806451613e-06, Loss: 0.27983060479164124
[2023-09-01 07:40:18,818] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1438/1998 [5:45:56<2:07:09, 13.62s/it]09/01/2023 07:40:21 - INFO - __main__ -   Step: 1438, LR: 5.772903225806452e-06, Loss: 0.3183348774909973
[2023-09-01 07:40:32,379] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1439/1998 [5:46:10<2:07:43, 13.71s/it]09/01/2023 07:40:35 - INFO - __main__ -   Step: 1439, LR: 5.762580645161291e-06, Loss: 0.22728309035301208
[2023-09-01 07:40:46,550] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1440/1998 [5:46:24<2:08:16, 13.79s/it]09/01/2023 07:40:49 - INFO - __main__ -   Step: 1440, LR: 5.75225806451613e-06, Loss: 0.2887417674064636
[2023-09-01 07:40:59,638] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1441/1998 [5:46:37<2:05:45, 13.55s/it]09/01/2023 07:41:02 - INFO - __main__ -   Step: 1441, LR: 5.7419354838709685e-06, Loss: 0.32110172510147095
[2023-09-01 07:41:13,685] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1442/1998 [5:46:51<2:07:16, 13.73s/it]09/01/2023 07:41:16 - INFO - __main__ -   Step: 1442, LR: 5.731612903225807e-06, Loss: 0.3214442729949951
[2023-09-01 07:41:30,069] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1443/1998 [5:47:08<2:15:32, 14.65s/it]09/01/2023 07:41:33 - INFO - __main__ -   Step: 1443, LR: 5.721290322580646e-06, Loss: 0.3938836455345154
[2023-09-01 07:41:44,336] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1444/1998 [5:47:21<2:13:17, 14.44s/it]09/01/2023 07:41:47 - INFO - __main__ -   Step: 1444, LR: 5.710967741935485e-06, Loss: 0.35445261001586914
[2023-09-01 07:41:57,607] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1445/1998 [5:47:35<2:10:47, 14.19s/it]09/01/2023 07:42:01 - INFO - __main__ -   Step: 1445, LR: 5.700645161290324e-06, Loss: 0.35244491696357727
[2023-09-01 07:42:11,865] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1446/1998 [5:47:49<2:10:07, 14.14s/it]09/01/2023 07:42:15 - INFO - __main__ -   Step: 1446, LR: 5.690322580645163e-06, Loss: 0.37025654315948486
[2023-09-01 07:42:26,087] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1447/1998 [5:48:03<2:09:28, 14.10s/it]09/01/2023 07:42:29 - INFO - __main__ -   Step: 1447, LR: 5.68e-06, Loss: 0.3187641501426697
[2023-09-01 07:42:39,836] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 72%|███████▏  | 1448/1998 [5:48:16<2:07:15, 13.88s/it]09/01/2023 07:42:42 - INFO - __main__ -   Step: 1448, LR: 5.669677419354839e-06, Loss: 0.2656101584434509
[2023-09-01 07:42:54,028] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1449/1998 [5:48:31<2:08:00, 13.99s/it]09/01/2023 07:42:56 - INFO - __main__ -   Step: 1449, LR: 5.6593548387096775e-06, Loss: 0.33878910541534424
[2023-09-01 07:43:08,034] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1450/1998 [5:48:45<2:08:08, 14.03s/it]09/01/2023 07:43:10 - INFO - __main__ -   Step: 1450, LR: 5.649032258064516e-06, Loss: 0.2999013066291809
[2023-09-01 07:43:21,384] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1451/1998 [5:48:58<2:05:55, 13.81s/it]09/01/2023 07:43:24 - INFO - __main__ -   Step: 1451, LR: 5.638709677419355e-06, Loss: 0.31253522634506226
[2023-09-01 07:43:34,206] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1452/1998 [5:49:11<2:03:56, 13.62s/it]09/01/2023 07:43:37 - INFO - __main__ -   Step: 1452, LR: 5.628387096774194e-06, Loss: 0.30330604314804077
[2023-09-01 07:43:47,722] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1453/1998 [5:49:25<2:03:17, 13.57s/it]09/01/2023 07:43:50 - INFO - __main__ -   Step: 1453, LR: 5.618064516129033e-06, Loss: 0.31138819456100464
[2023-09-01 07:44:00,527] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1454/1998 [5:49:38<2:01:31, 13.40s/it]09/01/2023 07:44:03 - INFO - __main__ -   Step: 1454, LR: 5.607741935483872e-06, Loss: 0.3198354244232178
[2023-09-01 07:44:15,377] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1455/1998 [5:49:53<2:05:10, 13.83s/it]09/01/2023 07:44:18 - INFO - __main__ -   Step: 1455, LR: 5.5974193548387105e-06, Loss: 0.2726709544658661
[2023-09-01 07:44:30,005] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1456/1998 [5:50:07<2:05:36, 13.90s/it]09/01/2023 07:44:32 - INFO - __main__ -   Step: 1456, LR: 5.5870967741935485e-06, Loss: 0.2638292610645294
[2023-09-01 07:44:44,066] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1457/1998 [5:50:21<2:05:58, 13.97s/it]09/01/2023 07:44:46 - INFO - __main__ -   Step: 1457, LR: 5.576774193548387e-06, Loss: 0.33575934171676636
[2023-09-01 07:44:57,343] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1458/1998 [5:50:34<2:03:40, 13.74s/it]09/01/2023 07:45:00 - INFO - __main__ -   Step: 1458, LR: 5.566451612903226e-06, Loss: 0.2913370430469513
[2023-09-01 07:45:11,055] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1459/1998 [5:50:48<2:04:05, 13.81s/it]09/01/2023 07:45:14 - INFO - __main__ -   Step: 1459, LR: 5.556129032258065e-06, Loss: 0.3631787598133087
[2023-09-01 07:45:25,022] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1460/1998 [5:51:03<2:05:56, 14.05s/it]09/01/2023 07:45:28 - INFO - __main__ -   Step: 1460, LR: 5.545806451612904e-06, Loss: 0.3436667323112488
[2023-09-01 07:45:39,199] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1461/1998 [5:51:16<2:04:38, 13.93s/it]09/01/2023 07:45:42 - INFO - __main__ -   Step: 1461, LR: 5.535483870967743e-06, Loss: 0.3764098882675171
[2023-09-01 07:45:54,071] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1462/1998 [5:51:31<2:07:05, 14.23s/it]09/01/2023 07:45:57 - INFO - __main__ -   Step: 1462, LR: 5.5251612903225815e-06, Loss: 0.3746960163116455
[2023-09-01 07:46:08,847] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1463/1998 [5:51:46<2:07:44, 14.33s/it]09/01/2023 07:46:11 - INFO - __main__ -   Step: 1463, LR: 5.51483870967742e-06, Loss: 0.3425820469856262
[2023-09-01 07:46:22,268] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1464/1998 [5:51:59<2:05:13, 14.07s/it]09/01/2023 07:46:25 - INFO - __main__ -   Step: 1464, LR: 5.504516129032258e-06, Loss: 0.3225059509277344
[2023-09-01 07:46:36,322] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1465/1998 [5:52:13<2:04:19, 13.99s/it]09/01/2023 07:46:39 - INFO - __main__ -   Step: 1465, LR: 5.494193548387096e-06, Loss: 0.31691983342170715
[2023-09-01 07:46:50,952] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1466/1998 [5:52:28<2:06:56, 14.32s/it]09/01/2023 07:46:54 - INFO - __main__ -   Step: 1466, LR: 5.483870967741935e-06, Loss: 0.3306407034397125
[2023-09-01 07:47:05,183] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1467/1998 [5:52:42<2:06:47, 14.33s/it]09/01/2023 07:47:08 - INFO - __main__ -   Step: 1467, LR: 5.473548387096774e-06, Loss: 0.31794166564941406
[2023-09-01 07:47:19,173] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 73%|███████▎  | 1468/1998 [5:52:56<2:04:13, 14.06s/it]09/01/2023 07:47:21 - INFO - __main__ -   Step: 1468, LR: 5.463225806451613e-06, Loss: 0.3183027505874634
[2023-09-01 07:47:32,573] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▎  | 1469/1998 [5:53:09<2:01:58, 13.83s/it]09/01/2023 07:47:35 - INFO - __main__ -   Step: 1469, LR: 5.452903225806452e-06, Loss: 0.32511579990386963
[2023-09-01 07:47:45,627] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▎  | 1470/1998 [5:53:23<2:00:31, 13.70s/it]09/01/2023 07:47:48 - INFO - __main__ -   Step: 1470, LR: 5.4425806451612905e-06, Loss: 0.3141028881072998
[2023-09-01 07:47:59,653] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▎  | 1471/1998 [5:53:36<2:00:53, 13.76s/it]09/01/2023 07:48:02 - INFO - __main__ -   Step: 1471, LR: 5.432258064516129e-06, Loss: 0.34189915657043457
[2023-09-01 07:48:13,111] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▎  | 1472/1998 [5:53:50<1:59:48, 13.67s/it]09/01/2023 07:48:15 - INFO - __main__ -   Step: 1472, LR: 5.421935483870968e-06, Loss: 0.24195033311843872
[2023-09-01 07:48:27,395] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▎  | 1473/1998 [5:54:04<2:01:19, 13.87s/it]09/01/2023 07:48:30 - INFO - __main__ -   Step: 1473, LR: 5.411612903225807e-06, Loss: 0.38569504022598267
[2023-09-01 07:48:42,235] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1474/1998 [5:54:21<2:07:19, 14.58s/it]09/01/2023 07:48:46 - INFO - __main__ -   Step: 1474, LR: 5.401290322580646e-06, Loss: 0.33882609009742737
[2023-09-01 07:48:58,625] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1475/1998 [5:54:36<2:08:58, 14.80s/it]09/01/2023 07:49:01 - INFO - __main__ -   Step: 1475, LR: 5.390967741935485e-06, Loss: 0.30736589431762695
[2023-09-01 07:49:12,885] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1476/1998 [5:54:50<2:06:45, 14.57s/it]09/01/2023 07:49:15 - INFO - __main__ -   Step: 1476, LR: 5.3806451612903235e-06, Loss: 0.36494332551956177
[2023-09-01 07:49:26,798] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1477/1998 [5:55:04<2:06:30, 14.57s/it]09/01/2023 07:49:30 - INFO - __main__ -   Step: 1477, LR: 5.370322580645162e-06, Loss: 0.3715817332267761
[2023-09-01 07:49:43,081] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1478/1998 [5:55:20<2:08:32, 14.83s/it]09/01/2023 07:49:45 - INFO - __main__ -   Step: 1478, LR: 5.36e-06, Loss: 0.2627314329147339
[2023-09-01 07:49:57,057] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1479/1998 [5:55:34<2:06:22, 14.61s/it]09/01/2023 07:49:59 - INFO - __main__ -   Step: 1479, LR: 5.349677419354839e-06, Loss: 0.26715198159217834
[2023-09-01 07:50:12,142] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1480/1998 [5:55:50<2:10:46, 15.15s/it]09/01/2023 07:50:16 - INFO - __main__ -   Step: 1480, LR: 5.339354838709678e-06, Loss: 0.33724361658096313
[2023-09-01 07:50:27,505] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1481/1998 [5:56:05<2:07:59, 14.85s/it]09/01/2023 07:50:30 - INFO - __main__ -   Step: 1481, LR: 5.329032258064517e-06, Loss: 0.2509690523147583
[2023-09-01 07:50:41,063] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1482/1998 [5:56:19<2:05:54, 14.64s/it]09/01/2023 07:50:44 - INFO - __main__ -   Step: 1482, LR: 5.318709677419355e-06, Loss: 0.24792002141475677
[2023-09-01 07:50:55,555] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1483/1998 [5:56:33<2:03:47, 14.42s/it]09/01/2023 07:50:58 - INFO - __main__ -   Step: 1483, LR: 5.308387096774194e-06, Loss: 0.22908036410808563
[2023-09-01 07:51:11,005] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1484/1998 [5:56:48<2:05:36, 14.66s/it]09/01/2023 07:51:13 - INFO - __main__ -   Step: 1484, LR: 5.2980645161290325e-06, Loss: 0.29333072900772095
[2023-09-01 07:51:25,434] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1485/1998 [5:57:02<2:05:17, 14.65s/it]09/01/2023 07:51:28 - INFO - __main__ -   Step: 1485, LR: 5.287741935483871e-06, Loss: 0.3316251039505005
[2023-09-01 07:51:40,860] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1486/1998 [5:57:18<2:07:14, 14.91s/it]09/01/2023 07:51:43 - INFO - __main__ -   Step: 1486, LR: 5.27741935483871e-06, Loss: 0.33971044421195984
[2023-09-01 07:51:54,438] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1487/1998 [5:57:31<2:02:52, 14.43s/it]09/01/2023 07:51:57 - INFO - __main__ -   Step: 1487, LR: 5.267096774193548e-06, Loss: 0.3073749542236328
[2023-09-01 07:52:08,131] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 74%|███████▍  | 1488/1998 [5:57:45<2:01:03, 14.24s/it]09/01/2023 07:52:11 - INFO - __main__ -   Step: 1488, LR: 5.256774193548387e-06, Loss: 0.28453439474105835
[2023-09-01 07:52:21,929] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1489/1998 [5:57:59<2:00:16, 14.18s/it]09/01/2023 07:52:25 - INFO - __main__ -   Step: 1489, LR: 5.246451612903226e-06, Loss: 0.29941269755363464
[2023-09-01 07:52:36,590] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1490/1998 [5:58:14<2:03:00, 14.53s/it]09/01/2023 07:52:40 - INFO - __main__ -   Step: 1490, LR: 5.236129032258065e-06, Loss: 0.28706175088882446
[2023-09-01 07:52:52,085] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1491/1998 [5:58:29<2:03:08, 14.57s/it]09/01/2023 07:52:55 - INFO - __main__ -   Step: 1491, LR: 5.2258064516129035e-06, Loss: 0.34037989377975464
[2023-09-01 07:53:06,162] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1492/1998 [5:58:43<2:01:27, 14.40s/it]09/01/2023 07:53:09 - INFO - __main__ -   Step: 1492, LR: 5.215483870967742e-06, Loss: 0.3697795867919922
[2023-09-01 07:53:20,105] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1493/1998 [5:58:57<1:59:42, 14.22s/it]09/01/2023 07:53:22 - INFO - __main__ -   Step: 1493, LR: 5.205161290322581e-06, Loss: 0.3329535722732544
[2023-09-01 07:53:32,920] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1494/1998 [5:59:10<1:57:18, 13.97s/it]09/01/2023 07:53:36 - INFO - __main__ -   Step: 1494, LR: 5.19483870967742e-06, Loss: 0.3578653335571289
[2023-09-01 07:53:46,203] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1495/1998 [5:59:23<1:54:10, 13.62s/it]09/01/2023 07:53:49 - INFO - __main__ -   Step: 1495, LR: 5.184516129032259e-06, Loss: 0.35261183977127075
[2023-09-01 07:53:59,294] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1496/1998 [5:59:36<1:53:05, 13.52s/it]09/01/2023 07:54:02 - INFO - __main__ -   Step: 1496, LR: 5.174193548387098e-06, Loss: 0.3298393189907074
[2023-09-01 07:54:13,277] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1497/1998 [5:59:50<1:52:57, 13.53s/it]09/01/2023 07:54:15 - INFO - __main__ -   Step: 1497, LR: 5.1638709677419365e-06, Loss: 0.3555234968662262
[2023-09-01 07:54:26,333] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▍  | 1498/1998 [6:00:03<1:51:38, 13.40s/it]09/01/2023 07:54:29 - INFO - __main__ -   Step: 1498, LR: 5.153548387096775e-06, Loss: 0.35829639434814453
[2023-09-01 07:54:40,479] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1499/1998 [6:00:17<1:53:40, 13.67s/it]09/01/2023 07:54:43 - INFO - __main__ -   Step: 1499, LR: 5.143225806451614e-06, Loss: 0.34703654050827026
[2023-09-01 07:54:53,965] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1500/1998 [6:00:31<1:52:39, 13.57s/it]09/01/2023 07:54:56 - INFO - __main__ -   Step: 1500, LR: 5.132903225806451e-06, Loss: 0.34738171100616455
09/01/2023 07:54:56 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500
09/01/2023 07:54:56 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 07:54:56,721] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 07:54:56,727] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 07:54:56,727] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 07:54:56,727] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 07:54:56,727] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 07:54:56,729] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 07:54:56,729] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 07:54:56,741] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 07:54:56,742] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 07:54:56,742] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 07:54:56,742] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 07:54:56,743] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 07:54:56,743] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 07:54:56,743] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 07:54:56,743] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 07:55:55,339] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 07:55:55,340] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 07:55:57,094] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 07:55:57,094] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 07:56:00,130] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 07:56:00,131] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 07:56:00,658] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 07:56:00,659] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 07:56:00,663] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:56:00,663] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:56:00,663] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 07:56:00,664] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 07:56:00 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/pytorch_model
09/01/2023 07:56:00 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/scheduler.bin
09/01/2023 07:56:00 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1500/random_states_0.pkl
09/01/2023 07:56:00 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.92it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.90it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.95it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.66it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.76it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.49it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.30it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.47it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.69it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.86it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:54,  3.94it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:52,  4.08it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:51,  4.15it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:50,  4.23it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:49,  4.29it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:48,  4.31it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:48,  4.33it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:48,  4.28it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.06it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.94it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:50,  4.04it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.11it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:05<00:48,  4.17it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.21it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.02it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.64it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.84it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.66it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.88it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:48,  4.02it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.89it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  4.04it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.92it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:51,  3.72it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.81it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.97it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:46,  4.07it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:49,  3.81it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:47,  3.95it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.05it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:44,  4.13it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:44,  4.11it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:47,  3.83it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:51,  3.53it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:48,  3.73it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:11<00:50,  3.59it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:51,  3.47it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.50it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:51,  3.43it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.56it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.48it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.43it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.48it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.42it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.61it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.78it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:46,  3.63it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.83it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.88it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.91it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.04it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.06it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:39,  4.13it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.16it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.20it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.19it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:37,  4.24it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.15it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:17<00:37,  4.22it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  4.01it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.87it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.81it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.94it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.08it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.17it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.87it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  4.01it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:40,  3.64it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.74it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.82it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.89it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.94it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  4.00it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:34,  4.09it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:35,  3.96it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.96it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.98it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  3.99it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.10it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:32,  4.17it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.11it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.18it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:23<00:31,  4.23it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:32,  4.05it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:31,  4.16it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:33,  3.88it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.91it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  4.00it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:31,  4.02it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.09it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.10it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.16it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.20it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:26<00:28,  4.24it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.22it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.84it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.97it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:27<00:29,  4.06it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.07it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:27,  4.15it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.78it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:28<00:28,  3.96it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.07it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.91it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.05it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:29<00:26,  4.11it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.10it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.19it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.23it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:30<00:24,  4.27it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.31it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.33it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.34it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:31<00:23,  4.31it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.38it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.91it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.60it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:32<00:25,  3.81it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.95it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.96it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.09it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:33<00:24,  3.91it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.07it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.95it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.11it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:34<00:21,  4.16it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:20,  4.27it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.30it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:19,  4.37it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:35<00:19,  4.37it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:35<00:19,  4.37it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.41it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:18,  4.44it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.43it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:36<00:18,  4.47it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:17,  4.50it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.47it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.44it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:37<00:17,  4.47it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:37<00:17,  4.42it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:16,  4.43it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.39it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:16,  4.31it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.84it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  4.00it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:16,  4.13it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:39<00:16,  4.23it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:39<00:15,  4.32it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.34it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.39it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:14,  4.38it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:40<00:14,  4.42it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.46it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:13,  4.47it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.49it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:41<00:13,  4.48it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:41<00:13,  4.49it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.20it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.29it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:42<00:13,  4.30it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:42<00:12,  4.38it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.38it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.16it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:43<00:13,  3.87it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:43<00:12,  4.00it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.12it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.21it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:44<00:11,  4.02it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:44<00:11,  4.16it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.27it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.31it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.33it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:45<00:09,  4.35it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:45<00:09,  4.39it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.16it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.13it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:46<00:09,  4.24it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:46<00:08,  4.28it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.36it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.13it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:47<00:08,  4.23it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:47<00:07,  4.31it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.22it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.27it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.34it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:48<00:06,  4.38it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:48<00:06,  4.41it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.42it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  4.01it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:49<00:06,  4.11it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:49<00:05,  4.20it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.30it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.36it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:50<00:04,  4.41it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:50<00:04,  4.45it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.47it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.46it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:51<00:04,  4.44it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:51<00:03,  4.45it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:51<00:03,  4.46it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.19it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.23it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:52<00:03,  4.28it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:52<00:02,  4.30it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.34it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.37it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:53<00:02,  4.40it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:53<00:01,  4.31it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.36it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.40it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:54<00:01,  4.42it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:54<00:00,  4.44it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:54<00:00,  4.46it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.47it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.46it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:55<00:00,  4.47it/s][A09/01/2023 07:56:56 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 07:56:56 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:56:56 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:56:56 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:56:56 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 07:56:57 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:56:57 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:56:57 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:56:57 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 07:56:57 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:56:57 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:56:57 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 07:56:57 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.03it/s]
09/01/2023 07:56:57 - INFO - __main__ -   Step: 1500, Validation Metrics: {'accuracy': 0.7831682251643366, 'f1_micro': 0.7831682251643367, 'f1_macro': 0.4636055988486573, 'f1_weighted': 0.7583551658657148, 'f1_1': 0.8744876481666113, 'f1_-1': 0.3710506980161646, 'f1_0': 0.14527845036319614, 'precision_micro': 0.7831682251643366, 'precision_macro': 0.5307813900310979, 'precision_weighted': 0.7465677570538725, 'precision_1': 0.8346373440473673, 'precision_-1': 0.43685121107266434, 'precision_0': 0.32085561497326204, 'recall_micro': 0.7831682251643366, 'recall_macro': 0.44490282418891175, 'recall_weighted': 0.7831682251643366, 'recall_1': 0.9183341088878548, 'recall_-1': 0.322477650063857, 'recall_0': 0.09389671361502347}
[2023-09-01 07:57:08,289] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1501/1998 [6:02:45<6:52:35, 49.81s/it]09/01/2023 07:57:11 - INFO - __main__ -   Step: 1501, LR: 5.12258064516129e-06, Loss: 0.3020252287387848
[2023-09-01 07:57:22,047] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1502/1998 [6:02:59<5:22:38, 39.03s/it]09/01/2023 07:57:24 - INFO - __main__ -   Step: 1502, LR: 5.112258064516129e-06, Loss: 0.32887154817581177
[2023-09-01 07:57:35,557] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1503/1998 [6:03:13<4:19:42, 31.48s/it]09/01/2023 07:57:38 - INFO - __main__ -   Step: 1503, LR: 5.101935483870968e-06, Loss: 0.3311009109020233
[2023-09-01 07:57:49,309] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1504/1998 [6:03:27<3:35:40, 26.20s/it]09/01/2023 07:57:52 - INFO - __main__ -   Step: 1504, LR: 5.091612903225807e-06, Loss: 0.38416677713394165
[2023-09-01 07:58:03,272] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1505/1998 [6:03:41<3:04:58, 22.51s/it]09/01/2023 07:58:06 - INFO - __main__ -   Step: 1505, LR: 5.0812903225806455e-06, Loss: 0.2440604865550995
[2023-09-01 07:58:17,679] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1506/1998 [6:03:55<2:44:18, 20.04s/it]09/01/2023 07:58:20 - INFO - __main__ -   Step: 1506, LR: 5.070967741935484e-06, Loss: 0.25048497319221497
[2023-09-01 07:58:31,315] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1507/1998 [6:04:08<2:27:30, 18.03s/it]09/01/2023 07:58:34 - INFO - __main__ -   Step: 1507, LR: 5.060645161290323e-06, Loss: 0.30148568749427795
[2023-09-01 07:58:45,661] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 75%|███████▌  | 1508/1998 [6:04:22<2:17:39, 16.86s/it]09/01/2023 07:58:48 - INFO - __main__ -   Step: 1508, LR: 5.050322580645162e-06, Loss: 0.3330230116844177
[2023-09-01 07:58:58,876] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1509/1998 [6:04:36<2:09:40, 15.91s/it]09/01/2023 07:59:02 - INFO - __main__ -   Step: 1509, LR: 5.04e-06, Loss: 0.27105408906936646
[2023-09-01 07:59:13,108] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1510/1998 [6:04:50<2:04:43, 15.34s/it]09/01/2023 07:59:16 - INFO - __main__ -   Step: 1510, LR: 5.029677419354839e-06, Loss: 0.3156299591064453
[2023-09-01 07:59:26,494] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1511/1998 [6:05:03<1:59:58, 14.78s/it]09/01/2023 07:59:29 - INFO - __main__ -   Step: 1511, LR: 5.019354838709678e-06, Loss: 0.3044523596763611
[2023-09-01 07:59:39,726] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1512/1998 [6:05:17<1:56:10, 14.34s/it]09/01/2023 07:59:42 - INFO - __main__ -   Step: 1512, LR: 5.0090322580645165e-06, Loss: 0.26284894347190857
[2023-09-01 07:59:54,207] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1513/1998 [6:05:31<1:55:54, 14.34s/it]09/01/2023 07:59:57 - INFO - __main__ -   Step: 1513, LR: 4.998709677419355e-06, Loss: 0.25263646245002747
[2023-09-01 08:00:08,956] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1514/1998 [6:05:46<1:56:25, 14.43s/it]09/01/2023 08:00:11 - INFO - __main__ -   Step: 1514, LR: 4.988387096774193e-06, Loss: 0.2609005272388458
[2023-09-01 08:00:22,985] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1515/1998 [6:06:00<1:55:47, 14.38s/it]09/01/2023 08:00:26 - INFO - __main__ -   Step: 1515, LR: 4.978064516129032e-06, Loss: 0.31094789505004883
[2023-09-01 08:00:38,160] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1516/1998 [6:06:15<1:57:49, 14.67s/it]09/01/2023 08:00:41 - INFO - __main__ -   Step: 1516, LR: 4.967741935483871e-06, Loss: 0.337702214717865
[2023-09-01 08:00:51,505] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1517/1998 [6:06:28<1:53:16, 14.13s/it]09/01/2023 08:00:54 - INFO - __main__ -   Step: 1517, LR: 4.95741935483871e-06, Loss: 0.3102414608001709
[2023-09-01 08:01:05,857] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1518/1998 [6:06:43<1:54:26, 14.30s/it]09/01/2023 08:01:08 - INFO - __main__ -   Step: 1518, LR: 4.947096774193549e-06, Loss: 0.3266546130180359
[2023-09-01 08:01:19,939] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1519/1998 [6:06:57<1:53:24, 14.21s/it]09/01/2023 08:01:22 - INFO - __main__ -   Step: 1519, LR: 4.9367741935483875e-06, Loss: 0.35410743951797485
[2023-09-01 08:01:33,131] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1520/1998 [6:07:10<1:49:41, 13.77s/it]09/01/2023 08:01:35 - INFO - __main__ -   Step: 1520, LR: 4.926451612903226e-06, Loss: 0.2707623541355133
[2023-09-01 08:01:46,843] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1521/1998 [6:07:24<1:51:00, 13.96s/it]09/01/2023 08:01:50 - INFO - __main__ -   Step: 1521, LR: 4.916129032258065e-06, Loss: 0.3780275881290436
[2023-09-01 08:02:01,254] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1522/1998 [6:07:38<1:50:45, 13.96s/it]09/01/2023 08:02:04 - INFO - __main__ -   Step: 1522, LR: 4.905806451612903e-06, Loss: 0.28771185874938965
[2023-09-01 08:02:14,964] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▌  | 1523/1998 [6:07:52<1:51:24, 14.07s/it]09/01/2023 08:02:18 - INFO - __main__ -   Step: 1523, LR: 4.895483870967742e-06, Loss: 0.28283536434173584
[2023-09-01 08:02:28,672] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▋  | 1524/1998 [6:08:06<1:50:06, 13.94s/it]09/01/2023 08:02:32 - INFO - __main__ -   Step: 1524, LR: 4.885161290322581e-06, Loss: 0.36099350452423096
[2023-09-01 08:02:42,958] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▋  | 1525/1998 [6:08:20<1:50:41, 14.04s/it]09/01/2023 08:02:46 - INFO - __main__ -   Step: 1525, LR: 4.87483870967742e-06, Loss: 0.29001569747924805
[2023-09-01 08:02:57,195] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▋  | 1526/1998 [6:08:34<1:49:34, 13.93s/it]09/01/2023 08:02:59 - INFO - __main__ -   Step: 1526, LR: 4.8645161290322585e-06, Loss: 0.3198089599609375
[2023-09-01 08:03:10,786] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▋  | 1527/1998 [6:08:48<1:49:07, 13.90s/it]09/01/2023 08:03:13 - INFO - __main__ -   Step: 1527, LR: 4.854193548387097e-06, Loss: 0.27825990319252014
[2023-09-01 08:03:24,535] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 76%|███████▋  | 1528/1998 [6:09:02<1:49:14, 13.95s/it]09/01/2023 08:03:27 - INFO - __main__ -   Step: 1528, LR: 4.843870967741936e-06, Loss: 0.2978720963001251
[2023-09-01 08:03:39,631] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1529/1998 [6:09:17<1:51:13, 14.23s/it]09/01/2023 08:03:42 - INFO - __main__ -   Step: 1529, LR: 4.833548387096775e-06, Loss: 0.34590983390808105
[2023-09-01 08:03:53,744] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1530/1998 [6:09:31<1:50:32, 14.17s/it]09/01/2023 08:03:56 - INFO - __main__ -   Step: 1530, LR: 4.823225806451614e-06, Loss: 0.2513231635093689
[2023-09-01 08:04:06,996] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1531/1998 [6:09:45<1:49:20, 14.05s/it]09/01/2023 08:04:10 - INFO - __main__ -   Step: 1531, LR: 4.812903225806452e-06, Loss: 0.2959076166152954
[2023-09-01 08:04:22,140] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1532/1998 [6:09:59<1:50:18, 14.20s/it]09/01/2023 08:04:25 - INFO - __main__ -   Step: 1532, LR: 4.802580645161291e-06, Loss: 0.36143866181373596
[2023-09-01 08:04:35,654] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1533/1998 [6:10:13<1:48:44, 14.03s/it]09/01/2023 08:04:38 - INFO - __main__ -   Step: 1533, LR: 4.7922580645161295e-06, Loss: 0.2918083071708679
[2023-09-01 08:04:49,720] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1534/1998 [6:10:27<1:48:49, 14.07s/it]09/01/2023 08:04:52 - INFO - __main__ -   Step: 1534, LR: 4.781935483870968e-06, Loss: 0.2904324531555176
[2023-09-01 08:05:03,112] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1535/1998 [6:10:40<1:46:10, 13.76s/it]09/01/2023 08:05:05 - INFO - __main__ -   Step: 1535, LR: 4.771612903225807e-06, Loss: 0.32021117210388184
[2023-09-01 08:05:16,351] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1536/1998 [6:10:53<1:44:40, 13.59s/it]09/01/2023 08:05:19 - INFO - __main__ -   Step: 1536, LR: 4.761290322580645e-06, Loss: 0.3152715563774109
[2023-09-01 08:05:29,653] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1537/1998 [6:11:07<1:44:36, 13.62s/it]09/01/2023 08:05:32 - INFO - __main__ -   Step: 1537, LR: 4.750967741935484e-06, Loss: 0.33302465081214905
[2023-09-01 08:05:43,319] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1538/1998 [6:11:21<1:44:47, 13.67s/it]09/01/2023 08:05:46 - INFO - __main__ -   Step: 1538, LR: 4.740645161290323e-06, Loss: 0.3264983892440796
[2023-09-01 08:05:59,473] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1539/1998 [6:11:36<1:49:18, 14.29s/it]09/01/2023 08:06:02 - INFO - __main__ -   Step: 1539, LR: 4.730322580645162e-06, Loss: 0.3373701274394989
[2023-09-01 08:06:14,318] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1540/1998 [6:11:51<1:50:44, 14.51s/it]09/01/2023 08:06:17 - INFO - __main__ -   Step: 1540, LR: 4.7200000000000005e-06, Loss: 0.2200295776128769
[2023-09-01 08:06:28,502] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1541/1998 [6:12:05<1:49:26, 14.37s/it]09/01/2023 08:06:31 - INFO - __main__ -   Step: 1541, LR: 4.7096774193548385e-06, Loss: 0.32848647236824036
[2023-09-01 08:06:43,112] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1542/1998 [6:12:20<1:50:07, 14.49s/it]09/01/2023 08:06:46 - INFO - __main__ -   Step: 1542, LR: 4.699354838709677e-06, Loss: 0.2780359387397766
[2023-09-01 08:06:57,804] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1543/1998 [6:12:35<1:49:58, 14.50s/it]09/01/2023 08:07:00 - INFO - __main__ -   Step: 1543, LR: 4.689032258064516e-06, Loss: 0.3227216899394989
[2023-09-01 08:07:10,834] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1544/1998 [6:12:48<1:47:24, 14.20s/it]09/01/2023 08:07:14 - INFO - __main__ -   Step: 1544, LR: 4.678709677419355e-06, Loss: 0.3576391339302063
[2023-09-01 08:07:25,241] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1545/1998 [6:13:02<1:46:41, 14.13s/it]09/01/2023 08:07:28 - INFO - __main__ -   Step: 1545, LR: 4.668387096774194e-06, Loss: 0.2670503854751587
[2023-09-01 08:07:39,610] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1546/1998 [6:13:17<1:47:25, 14.26s/it]09/01/2023 08:07:42 - INFO - __main__ -   Step: 1546, LR: 4.658064516129033e-06, Loss: 0.32457053661346436
[2023-09-01 08:07:53,270] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1547/1998 [6:13:30<1:45:43, 14.06s/it]09/01/2023 08:07:56 - INFO - __main__ -   Step: 1547, LR: 4.6477419354838716e-06, Loss: 0.2618641257286072
[2023-09-01 08:08:07,190] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 77%|███████▋  | 1548/1998 [6:13:44<1:44:58, 14.00s/it]09/01/2023 08:08:10 - INFO - __main__ -   Step: 1548, LR: 4.63741935483871e-06, Loss: 0.2528708577156067
[2023-09-01 08:08:21,937] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1549/1998 [6:13:59<1:46:13, 14.19s/it]09/01/2023 08:08:24 - INFO - __main__ -   Step: 1549, LR: 4.627096774193548e-06, Loss: 0.3095974922180176
[2023-09-01 08:08:36,330] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1550/1998 [6:14:13<1:46:23, 14.25s/it]09/01/2023 08:08:39 - INFO - __main__ -   Step: 1550, LR: 4.616774193548387e-06, Loss: 0.2527443766593933
[2023-09-01 08:08:52,011] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1551/1998 [6:14:29<1:49:37, 14.71s/it]09/01/2023 08:08:55 - INFO - __main__ -   Step: 1551, LR: 4.606451612903226e-06, Loss: 0.28642624616622925
[2023-09-01 08:09:05,778] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1552/1998 [6:14:43<1:46:55, 14.39s/it]09/01/2023 08:09:08 - INFO - __main__ -   Step: 1552, LR: 4.596129032258065e-06, Loss: 0.2728781998157501
[2023-09-01 08:09:18,509] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1553/1998 [6:14:56<1:43:34, 13.97s/it]09/01/2023 08:09:21 - INFO - __main__ -   Step: 1553, LR: 4.585806451612904e-06, Loss: 0.3126295208930969
[2023-09-01 08:09:32,389] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1554/1998 [6:15:09<1:42:53, 13.90s/it]09/01/2023 08:09:35 - INFO - __main__ -   Step: 1554, LR: 4.5754838709677426e-06, Loss: 0.3455889821052551
[2023-09-01 08:09:47,016] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1555/1998 [6:15:24<1:44:26, 14.15s/it]09/01/2023 08:09:50 - INFO - __main__ -   Step: 1555, LR: 4.565161290322581e-06, Loss: 0.38222140073776245
[2023-09-01 08:10:01,255] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1556/1998 [6:15:38<1:43:55, 14.11s/it]09/01/2023 08:10:04 - INFO - __main__ -   Step: 1556, LR: 4.55483870967742e-06, Loss: 0.38130706548690796
[2023-09-01 08:10:14,522] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1557/1998 [6:15:51<1:41:56, 13.87s/it]09/01/2023 08:10:17 - INFO - __main__ -   Step: 1557, LR: 4.544516129032259e-06, Loss: 0.3007628619670868
[2023-09-01 08:10:29,107] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1558/1998 [6:16:07<1:45:43, 14.42s/it]09/01/2023 08:10:33 - INFO - __main__ -   Step: 1558, LR: 4.534193548387097e-06, Loss: 0.2338429093360901
[2023-09-01 08:10:44,315] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1559/1998 [6:16:22<1:45:33, 14.43s/it]09/01/2023 08:10:47 - INFO - __main__ -   Step: 1559, LR: 4.523870967741936e-06, Loss: 0.28184616565704346
[2023-09-01 08:10:58,372] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1560/1998 [6:16:35<1:44:09, 14.27s/it]09/01/2023 08:11:01 - INFO - __main__ -   Step: 1560, LR: 4.513548387096775e-06, Loss: 0.30409157276153564
[2023-09-01 08:11:12,279] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1561/1998 [6:16:49<1:42:28, 14.07s/it]09/01/2023 08:11:15 - INFO - __main__ -   Step: 1561, LR: 4.5032258064516136e-06, Loss: 0.32328078150749207
[2023-09-01 08:11:25,904] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1562/1998 [6:17:03<1:41:50, 14.02s/it]09/01/2023 08:11:28 - INFO - __main__ -   Step: 1562, LR: 4.492903225806452e-06, Loss: 0.3037945628166199
[2023-09-01 08:11:40,414] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1563/1998 [6:17:18<1:42:49, 14.18s/it]09/01/2023 08:11:43 - INFO - __main__ -   Step: 1563, LR: 4.48258064516129e-06, Loss: 0.3657267689704895
[2023-09-01 08:11:55,392] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1564/1998 [6:17:32<1:44:02, 14.38s/it]09/01/2023 08:11:58 - INFO - __main__ -   Step: 1564, LR: 4.472258064516129e-06, Loss: 0.30035167932510376
[2023-09-01 08:12:09,614] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1565/1998 [6:17:47<1:43:49, 14.39s/it]09/01/2023 08:12:12 - INFO - __main__ -   Step: 1565, LR: 4.461935483870968e-06, Loss: 0.2639060616493225
[2023-09-01 08:12:23,629] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1566/1998 [6:18:01<1:43:01, 14.31s/it]09/01/2023 08:12:26 - INFO - __main__ -   Step: 1566, LR: 4.451612903225807e-06, Loss: 0.2767326831817627
[2023-09-01 08:12:38,868] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1567/1998 [6:18:16<1:44:07, 14.50s/it]09/01/2023 08:12:41 - INFO - __main__ -   Step: 1567, LR: 4.441290322580645e-06, Loss: 0.2487219274044037
[2023-09-01 08:12:52,070] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 78%|███████▊  | 1568/1998 [6:18:30<1:42:38, 14.32s/it]09/01/2023 08:12:55 - INFO - __main__ -   Step: 1568, LR: 4.430967741935484e-06, Loss: 0.28584346175193787
[2023-09-01 08:13:06,658] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▊  | 1569/1998 [6:18:44<1:41:22, 14.18s/it]09/01/2023 08:13:09 - INFO - __main__ -   Step: 1569, LR: 4.4206451612903226e-06, Loss: 0.3454464375972748
[2023-09-01 08:13:21,364] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▊  | 1570/1998 [6:18:58<1:42:00, 14.30s/it]09/01/2023 08:13:24 - INFO - __main__ -   Step: 1570, LR: 4.410322580645161e-06, Loss: 0.30973416566848755
[2023-09-01 08:13:35,411] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▊  | 1571/1998 [6:19:13<1:42:14, 14.37s/it]09/01/2023 08:13:38 - INFO - __main__ -   Step: 1571, LR: 4.4e-06, Loss: 0.37223386764526367
[2023-09-01 08:13:49,743] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▊  | 1572/1998 [6:19:27<1:40:55, 14.21s/it]09/01/2023 08:13:52 - INFO - __main__ -   Step: 1572, LR: 4.389677419354839e-06, Loss: 0.30160456895828247
[2023-09-01 08:14:04,050] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▊  | 1573/1998 [6:19:41<1:41:51, 14.38s/it]09/01/2023 08:14:07 - INFO - __main__ -   Step: 1573, LR: 4.379354838709678e-06, Loss: 0.3590486943721771
[2023-09-01 08:14:17,999] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1574/1998 [6:19:55<1:41:08, 14.31s/it]09/01/2023 08:14:21 - INFO - __main__ -   Step: 1574, LR: 4.369032258064517e-06, Loss: 0.30142372846603394
[2023-09-01 08:14:32,861] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1575/1998 [6:20:10<1:41:16, 14.36s/it]09/01/2023 08:14:35 - INFO - __main__ -   Step: 1575, LR: 4.3587096774193556e-06, Loss: 0.29059940576553345
[2023-09-01 08:14:47,118] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1576/1998 [6:20:24<1:40:40, 14.32s/it]09/01/2023 08:14:50 - INFO - __main__ -   Step: 1576, LR: 4.3483870967741936e-06, Loss: 0.2677363157272339
[2023-09-01 08:15:01,051] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1577/1998 [6:20:38<1:39:30, 14.18s/it]09/01/2023 08:15:04 - INFO - __main__ -   Step: 1577, LR: 4.338064516129032e-06, Loss: 0.3741762042045593
[2023-09-01 08:15:14,877] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1578/1998 [6:20:52<1:37:57, 13.99s/it]09/01/2023 08:15:17 - INFO - __main__ -   Step: 1578, LR: 4.327741935483871e-06, Loss: 0.2564598321914673
[2023-09-01 08:15:28,835] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1579/1998 [6:21:06<1:37:50, 14.01s/it]09/01/2023 08:15:31 - INFO - __main__ -   Step: 1579, LR: 4.31741935483871e-06, Loss: 0.28705355525016785
[2023-09-01 08:15:42,767] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1580/1998 [6:21:20<1:38:11, 14.10s/it]09/01/2023 08:15:45 - INFO - __main__ -   Step: 1580, LR: 4.307096774193549e-06, Loss: 0.27126508951187134
[2023-09-01 08:15:56,298] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1581/1998 [6:21:33<1:36:38, 13.91s/it]09/01/2023 08:15:59 - INFO - __main__ -   Step: 1581, LR: 4.296774193548388e-06, Loss: 0.28667938709259033
[2023-09-01 08:16:09,282] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1582/1998 [6:21:46<1:34:16, 13.60s/it]09/01/2023 08:16:12 - INFO - __main__ -   Step: 1582, LR: 4.2864516129032266e-06, Loss: 0.3251766860485077
[2023-09-01 08:16:22,754] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1583/1998 [6:21:59<1:32:38, 13.39s/it]09/01/2023 08:16:25 - INFO - __main__ -   Step: 1583, LR: 4.276129032258065e-06, Loss: 0.3200060725212097
[2023-09-01 08:16:38,147] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1584/1998 [6:22:15<1:38:19, 14.25s/it]09/01/2023 08:16:41 - INFO - __main__ -   Step: 1584, LR: 4.265806451612903e-06, Loss: 0.3293004631996155
[2023-09-01 08:16:54,542] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1585/1998 [6:22:32<1:42:27, 14.88s/it]09/01/2023 08:16:57 - INFO - __main__ -   Step: 1585, LR: 4.255483870967742e-06, Loss: 0.31302610039711
[2023-09-01 08:17:09,888] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1586/1998 [6:22:47<1:41:54, 14.84s/it]09/01/2023 08:17:12 - INFO - __main__ -   Step: 1586, LR: 4.245161290322581e-06, Loss: 0.3405537009239197
[2023-09-01 08:17:24,120] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1587/1998 [6:23:02<1:42:27, 14.96s/it]09/01/2023 08:17:27 - INFO - __main__ -   Step: 1587, LR: 4.23483870967742e-06, Loss: 0.2677932381629944
[2023-09-01 08:17:38,342] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 79%|███████▉  | 1588/1998 [6:23:15<1:39:22, 14.54s/it]09/01/2023 08:17:41 - INFO - __main__ -   Step: 1588, LR: 4.224516129032259e-06, Loss: 0.3173913359642029
[2023-09-01 08:17:51,430] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1589/1998 [6:23:29<1:36:28, 14.15s/it]09/01/2023 08:17:54 - INFO - __main__ -   Step: 1589, LR: 4.2141935483870976e-06, Loss: 0.29043060541152954
[2023-09-01 08:18:04,815] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1590/1998 [6:23:42<1:34:00, 13.82s/it]09/01/2023 08:18:07 - INFO - __main__ -   Step: 1590, LR: 4.2038709677419356e-06, Loss: 0.3994245231151581
[2023-09-01 08:18:18,179] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1591/1998 [6:23:56<1:34:05, 13.87s/it]09/01/2023 08:18:21 - INFO - __main__ -   Step: 1591, LR: 4.193548387096774e-06, Loss: 0.36844176054000854
[2023-09-01 08:18:33,134] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1592/1998 [6:24:10<1:35:01, 14.04s/it]09/01/2023 08:18:36 - INFO - __main__ -   Step: 1592, LR: 4.183225806451613e-06, Loss: 0.3279532492160797
[2023-09-01 08:18:46,676] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1593/1998 [6:24:24<1:34:48, 14.04s/it]09/01/2023 08:18:50 - INFO - __main__ -   Step: 1593, LR: 4.172903225806452e-06, Loss: 0.3115759491920471
[2023-09-01 08:19:01,471] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1594/1998 [6:24:38<1:35:06, 14.12s/it]09/01/2023 08:19:04 - INFO - __main__ -   Step: 1594, LR: 4.16258064516129e-06, Loss: 0.2741031348705292
[2023-09-01 08:19:14,942] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1595/1998 [6:24:52<1:34:04, 14.01s/it]09/01/2023 08:19:18 - INFO - __main__ -   Step: 1595, LR: 4.152258064516129e-06, Loss: 0.3063341975212097
[2023-09-01 08:19:28,719] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1596/1998 [6:25:06<1:33:00, 13.88s/it]09/01/2023 08:19:31 - INFO - __main__ -   Step: 1596, LR: 4.141935483870968e-06, Loss: 0.2891908288002014
[2023-09-01 08:19:42,453] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1597/1998 [6:25:19<1:31:54, 13.75s/it]09/01/2023 08:19:45 - INFO - __main__ -   Step: 1597, LR: 4.1316129032258066e-06, Loss: 0.29918500781059265
[2023-09-01 08:19:56,211] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|███████▉  | 1598/1998 [6:25:33<1:31:48, 13.77s/it]09/01/2023 08:19:59 - INFO - __main__ -   Step: 1598, LR: 4.121290322580645e-06, Loss: 0.28670763969421387
[2023-09-01 08:20:10,563] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1599/1998 [6:25:48<1:33:20, 14.04s/it]09/01/2023 08:20:13 - INFO - __main__ -   Step: 1599, LR: 4.110967741935484e-06, Loss: 0.246170312166214
[2023-09-01 08:20:24,350] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1600/1998 [6:26:01<1:32:06, 13.89s/it]09/01/2023 08:20:27 - INFO - __main__ -   Step: 1600, LR: 4.100645161290323e-06, Loss: 0.27449193596839905
09/01/2023 08:20:27 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600
09/01/2023 08:20:27 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 08:20:27,248] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 08:20:27,253] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 08:20:27,254] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 08:20:27,254] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 08:20:27,254] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 08:20:27,255] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 08:20:27,255] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 08:20:27,267] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 08:20:27,268] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 08:20:27,268] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 08:20:27,269] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 08:20:27,270] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 08:20:27,270] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 08:20:27,270] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 08:20:27,270] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 08:21:25,487] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 08:21:25,488] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 08:21:26,688] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 08:21:26,688] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 08:21:29,639] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 08:21:29,639] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 08:21:30,897] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 08:21:30,898] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 08:21:30,901] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 08:21:30,901] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 08:21:30,901] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 08:21:30,902] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 08:21:30 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/pytorch_model
09/01/2023 08:21:30 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/scheduler.bin
09/01/2023 08:21:30 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1600/random_states_0.pkl
09/01/2023 08:21:30 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.92it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:46,  4.89it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:57,  3.92it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:01,  3.65it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.73it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.46it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:07,  3.28it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.44it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.64it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:57,  3.80it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.88it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.00it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.06it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.12it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.18it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:50,  4.21it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.22it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.18it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:52,  4.00it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:53,  3.90it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  3.98it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.06it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.11it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:49,  4.14it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.96it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.60it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.78it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.63it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.83it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.98it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.84it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  3.98it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.88it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.69it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.81it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.95it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.02it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:49,  3.78it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.91it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.00it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.08it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.06it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.79it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.51it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.69it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.56it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.45it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.49it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:51,  3.43it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.56it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.48it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.46it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.40it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:48,  3.58it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.73it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.55it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:45,  3.72it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:44,  3.80it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:16<00:43,  3.86it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.95it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:41,  3.99it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.04it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:40,  4.07it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.10it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:39,  4.11it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.14it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.09it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:38,  4.16it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.95it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.84it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:19<00:40,  3.79it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.90it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:38,  4.00it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:37,  4.08it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:20<00:39,  3.81it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:38,  3.93it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.59it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:40,  3.70it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.78it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:38,  3.84it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.92it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.04it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.92it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:36,  3.91it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.96it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:35,  3.97it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:34,  4.05it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.10it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.06it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:24<00:32,  4.12it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.16it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  3.99it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.11it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.84it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.88it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.98it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.99it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  3.99it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.07it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.08it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.13it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:27<00:29,  4.14it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.17it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:29,  4.17it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.79it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:28<00:30,  3.91it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.01it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.10it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.74it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.91it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:28,  3.99it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:29,  3.86it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:30<00:27,  3.97it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.03it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:27,  4.03it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:26,  4.11it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:31<00:25,  4.16it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.18it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.20it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.24it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.25it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.26it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.29it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.85it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:33<00:27,  3.57it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:26,  3.76it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.89it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.92it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:34<00:23,  4.05it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.91it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.04it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.94it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:35<00:22,  4.07it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.10it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.17it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.19it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.24it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:20,  4.24it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.27it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.29it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.32it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:37<00:19,  4.30it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.33it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.34it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.34it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:38<00:18,  4.32it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.35it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.29it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.30it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.30it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.26it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.81it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.95it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:40<00:17,  4.06it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.16it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.22it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.22it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.28it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:41<00:15,  4.27it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.31it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.33it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.36it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:42<00:13,  4.37it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.38it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.37it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:14,  4.14it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:43<00:13,  4.22it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.23it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.27it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.27it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.09it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.94it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.05it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.14it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.97it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.10it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:11,  4.18it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.26it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:46<00:10,  4.27it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.28it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.30it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.10it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:47<00:09,  4.10it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.18it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:09,  4.20it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.26it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:48<00:08,  4.07it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.15it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.21it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.14it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:49<00:07,  4.19it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.26it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:07,  4.26it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.29it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.31it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.95it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.06it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:06,  4.13it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.22it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:51<00:05,  4.28it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.31it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.34it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.37it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:52<00:04,  4.38it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.35it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.33it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.34it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:53<00:03,  4.12it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.17it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.21it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.22it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.25it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:54<00:02,  4.28it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.30it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.23it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.28it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:55<00:01,  4.31it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.32it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.33it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.34it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:56<00:00,  4.35it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:56<00:00,  4.38it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.38it/s][A09/01/2023 08:22:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 08:22:27 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 08:22:28 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.97it/s]
09/01/2023 08:22:28 - INFO - __main__ -   Step: 1600, Validation Metrics: {'accuracy': 0.7932598833441348, 'f1_micro': 0.7932598833441348, 'f1_macro': 0.45115470104890565, 'f1_weighted': 0.7597825247958678, 'f1_1': 0.8806328423349701, 'f1_-1': 0.3606817281014665, 'f1_0': 0.11214953271028039, 'precision_micro': 0.7932598833441348, 'precision_macro': 0.5621392717479665, 'precision_weighted': 0.7514071170529595, 'precision_1': 0.8291555372919663, 'precision_-1': 0.4754440961337513, 'precision_0': 0.38181818181818183, 'recall_micro': 0.7932598833441348, 'recall_macro': 0.4317339836077519, 'recall_weighted': 0.7932598833441348, 'recall_1': 0.9389250814332247, 'recall_-1': 0.2905491698595147, 'recall_0': 0.06572769953051644}
[2023-09-01 08:22:38,826] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1601/1998 [6:28:16<5:31:21, 50.08s/it]09/01/2023 08:22:41 - INFO - __main__ -   Step: 1601, LR: 4.090322580645162e-06, Loss: 0.3122956454753876
[2023-09-01 08:22:51,928] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1602/1998 [6:28:29<4:17:36, 39.03s/it]09/01/2023 08:22:55 - INFO - __main__ -   Step: 1602, LR: 4.08e-06, Loss: 0.3276500105857849
[2023-09-01 08:23:05,410] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1603/1998 [6:28:43<3:27:12, 31.47s/it]09/01/2023 08:23:08 - INFO - __main__ -   Step: 1603, LR: 4.069677419354839e-06, Loss: 0.31877005100250244
[2023-09-01 08:23:20,222] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1604/1998 [6:28:58<2:53:53, 26.48s/it]09/01/2023 08:23:23 - INFO - __main__ -   Step: 1604, LR: 4.0593548387096776e-06, Loss: 0.2908926010131836
[2023-09-01 08:23:35,785] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1605/1998 [6:29:13<2:31:37, 23.15s/it]09/01/2023 08:23:39 - INFO - __main__ -   Step: 1605, LR: 4.049032258064516e-06, Loss: 0.29140961170196533
[2023-09-01 08:23:50,450] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1606/1998 [6:29:27<2:13:28, 20.43s/it]09/01/2023 08:23:53 - INFO - __main__ -   Step: 1606, LR: 4.038709677419355e-06, Loss: 0.2633678913116455
[2023-09-01 08:24:04,774] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1607/1998 [6:29:42<2:01:43, 18.68s/it]09/01/2023 08:24:07 - INFO - __main__ -   Step: 1607, LR: 4.028387096774194e-06, Loss: 0.31296849250793457
[2023-09-01 08:24:20,209] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 1608/1998 [6:29:57<1:54:38, 17.64s/it]09/01/2023 08:24:22 - INFO - __main__ -   Step: 1608, LR: 4.018064516129033e-06, Loss: 0.29093968868255615
[2023-09-01 08:24:34,387] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1609/1998 [6:30:11<1:48:24, 16.72s/it]09/01/2023 08:24:37 - INFO - __main__ -   Step: 1609, LR: 4.007741935483872e-06, Loss: 0.2402721792459488
[2023-09-01 08:24:48,723] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1610/1998 [6:30:26<1:43:01, 15.93s/it]09/01/2023 08:24:51 - INFO - __main__ -   Step: 1610, LR: 3.997419354838711e-06, Loss: 0.3039364814758301
[2023-09-01 08:25:03,225] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1611/1998 [6:30:41<1:40:56, 15.65s/it]09/01/2023 08:25:06 - INFO - __main__ -   Step: 1611, LR: 3.9870967741935486e-06, Loss: 0.3663836717605591
[2023-09-01 08:25:16,845] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1612/1998 [6:30:54<1:36:05, 14.94s/it]09/01/2023 08:25:19 - INFO - __main__ -   Step: 1612, LR: 3.976774193548387e-06, Loss: 0.28158992528915405
[2023-09-01 08:25:31,079] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1613/1998 [6:31:08<1:34:10, 14.68s/it]09/01/2023 08:25:33 - INFO - __main__ -   Step: 1613, LR: 3.966451612903226e-06, Loss: 0.36777541041374207
[2023-09-01 08:25:44,637] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1614/1998 [6:31:22<1:32:03, 14.38s/it]09/01/2023 08:25:47 - INFO - __main__ -   Step: 1614, LR: 3.956129032258065e-06, Loss: 0.2929787039756775
[2023-09-01 08:25:58,004] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1615/1998 [6:31:35<1:30:40, 14.21s/it]09/01/2023 08:26:01 - INFO - __main__ -   Step: 1615, LR: 3.945806451612904e-06, Loss: 0.34119632840156555
[2023-09-01 08:26:12,236] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1616/1998 [6:31:49<1:29:39, 14.08s/it]09/01/2023 08:26:15 - INFO - __main__ -   Step: 1616, LR: 3.935483870967742e-06, Loss: 0.3076159358024597
[2023-09-01 08:26:26,583] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1617/1998 [6:32:03<1:29:14, 14.05s/it]09/01/2023 08:26:29 - INFO - __main__ -   Step: 1617, LR: 3.925161290322581e-06, Loss: 0.2740260362625122
[2023-09-01 08:26:41,267] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1618/1998 [6:32:18<1:30:46, 14.33s/it]09/01/2023 08:26:44 - INFO - __main__ -   Step: 1618, LR: 3.91483870967742e-06, Loss: 0.26156526803970337
[2023-09-01 08:26:54,020] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1619/1998 [6:32:31<1:27:25, 13.84s/it]09/01/2023 08:26:56 - INFO - __main__ -   Step: 1619, LR: 3.904516129032258e-06, Loss: 0.2734038233757019
[2023-09-01 08:27:07,428] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1620/1998 [6:32:45<1:27:03, 13.82s/it]09/01/2023 08:27:10 - INFO - __main__ -   Step: 1620, LR: 3.894193548387097e-06, Loss: 0.2884332537651062
[2023-09-01 08:27:21,544] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1621/1998 [6:32:58<1:26:36, 13.78s/it]09/01/2023 08:27:24 - INFO - __main__ -   Step: 1621, LR: 3.883870967741935e-06, Loss: 0.2794453501701355
[2023-09-01 08:27:34,252] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1622/1998 [6:33:11<1:24:41, 13.51s/it]09/01/2023 08:27:37 - INFO - __main__ -   Step: 1622, LR: 3.873548387096774e-06, Loss: 0.37930768728256226
[2023-09-01 08:27:48,062] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████  | 1623/1998 [6:33:25<1:24:36, 13.54s/it]09/01/2023 08:27:50 - INFO - __main__ -   Step: 1623, LR: 3.863225806451613e-06, Loss: 0.37177470326423645
[2023-09-01 08:28:02,471] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████▏ | 1624/1998 [6:33:39<1:26:19, 13.85s/it]09/01/2023 08:28:05 - INFO - __main__ -   Step: 1624, LR: 3.852903225806452e-06, Loss: 0.3296339213848114
[2023-09-01 08:28:17,017] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████▏ | 1625/1998 [6:33:55<1:28:59, 14.31s/it]09/01/2023 08:28:20 - INFO - __main__ -   Step: 1625, LR: 3.842580645161291e-06, Loss: 0.3013266324996948
[2023-09-01 08:28:31,677] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████▏ | 1626/1998 [6:34:09<1:27:44, 14.15s/it]09/01/2023 08:28:34 - INFO - __main__ -   Step: 1626, LR: 3.832258064516129e-06, Loss: 0.27159908413887024
[2023-09-01 08:28:46,470] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████▏ | 1627/1998 [6:34:23<1:28:46, 14.36s/it]09/01/2023 08:28:49 - INFO - __main__ -   Step: 1627, LR: 3.821935483870968e-06, Loss: 0.29113978147506714
[2023-09-01 08:29:00,310] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 81%|████████▏ | 1628/1998 [6:34:37<1:27:10, 14.14s/it]09/01/2023 08:29:03 - INFO - __main__ -   Step: 1628, LR: 3.811612903225807e-06, Loss: 0.27459973096847534
[2023-09-01 08:29:13,857] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1629/1998 [6:34:52<1:27:34, 14.24s/it]09/01/2023 08:29:17 - INFO - __main__ -   Step: 1629, LR: 3.801290322580645e-06, Loss: 0.28302252292633057
[2023-09-01 08:29:30,660] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1630/1998 [6:35:08<1:31:39, 14.94s/it]09/01/2023 08:29:34 - INFO - __main__ -   Step: 1630, LR: 3.790967741935484e-06, Loss: 0.3301846981048584
[2023-09-01 08:29:45,917] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1631/1998 [6:35:23<1:30:55, 14.87s/it]09/01/2023 08:29:48 - INFO - __main__ -   Step: 1631, LR: 3.7806451612903228e-06, Loss: 0.3114290237426758
[2023-09-01 08:29:59,711] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1632/1998 [6:35:37<1:28:57, 14.58s/it]09/01/2023 08:30:02 - INFO - __main__ -   Step: 1632, LR: 3.7703225806451616e-06, Loss: 0.23896297812461853
[2023-09-01 08:30:15,100] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1633/1998 [6:35:52<1:29:45, 14.75s/it]09/01/2023 08:30:17 - INFO - __main__ -   Step: 1633, LR: 3.7600000000000004e-06, Loss: 0.3239009976387024
[2023-09-01 08:30:28,766] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1634/1998 [6:36:06<1:28:18, 14.56s/it]09/01/2023 08:30:31 - INFO - __main__ -   Step: 1634, LR: 3.7496774193548393e-06, Loss: 0.3000110387802124
[2023-09-01 08:30:42,864] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1635/1998 [6:36:20<1:26:54, 14.36s/it]09/01/2023 08:30:45 - INFO - __main__ -   Step: 1635, LR: 3.7393548387096777e-06, Loss: 0.3035507798194885
[2023-09-01 08:30:56,403] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1636/1998 [6:36:33<1:24:59, 14.09s/it]09/01/2023 08:30:59 - INFO - __main__ -   Step: 1636, LR: 3.7290322580645165e-06, Loss: 0.28444671630859375
[2023-09-01 08:31:09,938] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1637/1998 [6:36:47<1:23:45, 13.92s/it]09/01/2023 08:31:12 - INFO - __main__ -   Step: 1637, LR: 3.7187096774193553e-06, Loss: 0.2780110239982605
[2023-09-01 08:31:25,628] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1638/1998 [6:37:03<1:26:55, 14.49s/it]09/01/2023 08:31:28 - INFO - __main__ -   Step: 1638, LR: 3.7083870967741938e-06, Loss: 0.2675172686576843
[2023-09-01 08:31:41,228] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1639/1998 [6:37:18<1:28:46, 14.84s/it]09/01/2023 08:31:44 - INFO - __main__ -   Step: 1639, LR: 3.6980645161290326e-06, Loss: 0.2757686376571655
[2023-09-01 08:31:55,059] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1640/1998 [6:37:32<1:26:47, 14.55s/it]09/01/2023 08:31:58 - INFO - __main__ -   Step: 1640, LR: 3.687741935483871e-06, Loss: 0.2621288299560547
[2023-09-01 08:32:09,583] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1641/1998 [6:37:46<1:26:04, 14.47s/it]09/01/2023 08:32:12 - INFO - __main__ -   Step: 1641, LR: 3.67741935483871e-06, Loss: 0.3497333526611328
[2023-09-01 08:32:23,552] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1642/1998 [6:38:01<1:25:06, 14.34s/it]09/01/2023 08:32:26 - INFO - __main__ -   Step: 1642, LR: 3.6670967741935487e-06, Loss: 0.3470703959465027
[2023-09-01 08:32:37,063] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1643/1998 [6:38:14<1:23:18, 14.08s/it]09/01/2023 08:32:40 - INFO - __main__ -   Step: 1643, LR: 3.6567741935483875e-06, Loss: 0.3571884334087372
[2023-09-01 08:32:50,544] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1644/1998 [6:38:27<1:21:53, 13.88s/it]09/01/2023 08:32:53 - INFO - __main__ -   Step: 1644, LR: 3.6464516129032263e-06, Loss: 0.28157615661621094
[2023-09-01 08:33:04,255] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1645/1998 [6:38:42<1:22:47, 14.07s/it]09/01/2023 08:33:07 - INFO - __main__ -   Step: 1645, LR: 3.636129032258065e-06, Loss: 0.2738379240036011
[2023-09-01 08:33:20,434] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1646/1998 [6:38:58<1:25:39, 14.60s/it]09/01/2023 08:33:23 - INFO - __main__ -   Step: 1646, LR: 3.6258064516129036e-06, Loss: 0.2957204282283783
[2023-09-01 08:33:33,889] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1647/1998 [6:39:11<1:22:29, 14.10s/it]09/01/2023 08:33:36 - INFO - __main__ -   Step: 1647, LR: 3.615483870967742e-06, Loss: 0.30414676666259766
[2023-09-01 08:33:47,281] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 82%|████████▏ | 1648/1998 [6:39:24<1:21:35, 13.99s/it]09/01/2023 08:33:50 - INFO - __main__ -   Step: 1648, LR: 3.605161290322581e-06, Loss: 0.2795824408531189
[2023-09-01 08:34:00,963] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1649/1998 [6:39:38<1:20:41, 13.87s/it]09/01/2023 08:34:04 - INFO - __main__ -   Step: 1649, LR: 3.5948387096774197e-06, Loss: 0.2884628176689148
[2023-09-01 08:34:14,577] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1650/1998 [6:39:51<1:19:42, 13.74s/it]09/01/2023 08:34:17 - INFO - __main__ -   Step: 1650, LR: 3.5845161290322585e-06, Loss: 0.33133214712142944
[2023-09-01 08:34:27,869] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1651/1998 [6:40:05<1:18:50, 13.63s/it]09/01/2023 08:34:30 - INFO - __main__ -   Step: 1651, LR: 3.574193548387097e-06, Loss: 0.37720105051994324
[2023-09-01 08:34:42,208] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1652/1998 [6:40:19<1:19:56, 13.86s/it]09/01/2023 08:34:45 - INFO - __main__ -   Step: 1652, LR: 3.5638709677419358e-06, Loss: 0.2886585593223572
[2023-09-01 08:34:56,444] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1653/1998 [6:40:34<1:20:40, 14.03s/it]09/01/2023 08:34:59 - INFO - __main__ -   Step: 1653, LR: 3.5535483870967746e-06, Loss: 0.3422435522079468
[2023-09-01 08:35:10,696] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1654/1998 [6:40:48<1:21:10, 14.16s/it]09/01/2023 08:35:14 - INFO - __main__ -   Step: 1654, LR: 3.5432258064516134e-06, Loss: 0.37480825185775757
[2023-09-01 08:35:25,453] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1655/1998 [6:41:02<1:21:07, 14.19s/it]09/01/2023 08:35:28 - INFO - __main__ -   Step: 1655, LR: 3.5329032258064523e-06, Loss: 0.3147524297237396
[2023-09-01 08:35:38,998] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1656/1998 [6:41:16<1:20:08, 14.06s/it]09/01/2023 08:35:42 - INFO - __main__ -   Step: 1656, LR: 3.5225806451612903e-06, Loss: 0.3439183235168457
[2023-09-01 08:35:54,183] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1657/1998 [6:41:31<1:21:45, 14.39s/it]09/01/2023 08:35:57 - INFO - __main__ -   Step: 1657, LR: 3.512258064516129e-06, Loss: 0.28398597240448
[2023-09-01 08:36:08,578] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1658/1998 [6:41:46<1:21:20, 14.35s/it]09/01/2023 08:36:11 - INFO - __main__ -   Step: 1658, LR: 3.501935483870968e-06, Loss: 0.27208563685417175
[2023-09-01 08:36:22,391] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1659/1998 [6:41:59<1:19:58, 14.16s/it]09/01/2023 08:36:25 - INFO - __main__ -   Step: 1659, LR: 3.4916129032258068e-06, Loss: 0.2319151610136032
[2023-09-01 08:36:36,147] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1660/1998 [6:42:14<1:19:56, 14.19s/it]09/01/2023 08:36:39 - INFO - __main__ -   Step: 1660, LR: 3.4812903225806456e-06, Loss: 0.3164886236190796
[2023-09-01 08:36:50,009] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1661/1998 [6:42:27<1:19:04, 14.08s/it]09/01/2023 08:36:53 - INFO - __main__ -   Step: 1661, LR: 3.4709677419354844e-06, Loss: 0.25638607144355774
[2023-09-01 08:37:03,554] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1662/1998 [6:42:40<1:17:15, 13.80s/it]09/01/2023 08:37:06 - INFO - __main__ -   Step: 1662, LR: 3.460645161290323e-06, Loss: 0.2978588342666626
[2023-09-01 08:37:19,066] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1663/1998 [6:42:56<1:20:29, 14.42s/it]09/01/2023 08:37:22 - INFO - __main__ -   Step: 1663, LR: 3.4503225806451617e-06, Loss: 0.2825630009174347
[2023-09-01 08:37:33,897] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1664/1998 [6:43:11<1:20:39, 14.49s/it]09/01/2023 08:37:37 - INFO - __main__ -   Step: 1664, LR: 3.44e-06, Loss: 0.2924352288246155
[2023-09-01 08:37:47,773] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1665/1998 [6:43:25<1:19:18, 14.29s/it]09/01/2023 08:37:50 - INFO - __main__ -   Step: 1665, LR: 3.429677419354839e-06, Loss: 0.31088146567344666
[2023-09-01 08:38:00,849] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1666/1998 [6:43:38<1:16:29, 13.82s/it]09/01/2023 08:38:03 - INFO - __main__ -   Step: 1666, LR: 3.4193548387096773e-06, Loss: 0.3245405852794647
[2023-09-01 08:38:15,261] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1667/1998 [6:43:53<1:18:13, 14.18s/it]09/01/2023 08:38:18 - INFO - __main__ -   Step: 1667, LR: 3.409032258064516e-06, Loss: 0.31423425674438477
[2023-09-01 08:38:29,847] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 83%|████████▎ | 1668/1998 [6:44:07<1:17:53, 14.16s/it]09/01/2023 08:38:32 - INFO - __main__ -   Step: 1668, LR: 3.398709677419355e-06, Loss: 0.29505592584609985
[2023-09-01 08:38:42,976] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▎ | 1669/1998 [6:44:20<1:15:44, 13.81s/it]09/01/2023 08:38:45 - INFO - __main__ -   Step: 1669, LR: 3.388387096774194e-06, Loss: 0.2918381094932556
[2023-09-01 08:38:56,352] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▎ | 1670/1998 [6:44:33<1:15:09, 13.75s/it]09/01/2023 08:38:59 - INFO - __main__ -   Step: 1670, LR: 3.3780645161290327e-06, Loss: 0.3034522235393524
[2023-09-01 08:39:11,112] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▎ | 1671/1998 [6:44:48<1:16:42, 14.07s/it]09/01/2023 08:39:14 - INFO - __main__ -   Step: 1671, LR: 3.3677419354838715e-06, Loss: 0.27997881174087524
[2023-09-01 08:39:25,157] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▎ | 1672/1998 [6:45:02<1:16:35, 14.10s/it]09/01/2023 08:39:28 - INFO - __main__ -   Step: 1672, LR: 3.3574193548387104e-06, Loss: 0.28838464617729187
[2023-09-01 08:39:40,222] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▎ | 1673/1998 [6:45:18<1:18:15, 14.45s/it]09/01/2023 08:39:43 - INFO - __main__ -   Step: 1673, LR: 3.3470967741935484e-06, Loss: 0.2669527530670166
[2023-09-01 08:39:56,462] [WARNING] [stage3.py:1898:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1674/1998 [6:45:33<1:20:28, 14.90s/it]09/01/2023 08:39:59 - INFO - __main__ -   Step: 1674, LR: 3.336774193548387e-06, Loss: 0.2854289412498474
[2023-09-01 08:40:10,348] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1675/1998 [6:45:47<1:18:43, 14.63s/it]09/01/2023 08:40:13 - INFO - __main__ -   Step: 1675, LR: 3.326451612903226e-06, Loss: 0.25050118565559387
[2023-09-01 08:40:23,747] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1676/1998 [6:46:01<1:16:20, 14.23s/it]09/01/2023 08:40:26 - INFO - __main__ -   Step: 1676, LR: 3.316129032258065e-06, Loss: 0.2865069806575775
[2023-09-01 08:40:38,781] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1677/1998 [6:46:16<1:17:08, 14.42s/it]09/01/2023 08:40:41 - INFO - __main__ -   Step: 1677, LR: 3.3058064516129033e-06, Loss: 0.4126467704772949
[2023-09-01 08:40:53,220] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1678/1998 [6:46:30<1:16:44, 14.39s/it]09/01/2023 08:40:55 - INFO - __main__ -   Step: 1678, LR: 3.295483870967742e-06, Loss: 0.3311397433280945
[2023-09-01 08:41:07,372] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1679/1998 [6:46:45<1:17:27, 14.57s/it]09/01/2023 08:41:10 - INFO - __main__ -   Step: 1679, LR: 3.285161290322581e-06, Loss: 0.29398632049560547
[2023-09-01 08:41:22,435] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1680/1998 [6:46:59<1:16:55, 14.51s/it]09/01/2023 08:41:25 - INFO - __main__ -   Step: 1680, LR: 3.2748387096774198e-06, Loss: 0.30406224727630615
[2023-09-01 08:41:35,657] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1681/1998 [6:47:13<1:15:21, 14.26s/it]09/01/2023 08:41:39 - INFO - __main__ -   Step: 1681, LR: 3.2645161290322586e-06, Loss: 0.2820988595485687
[2023-09-01 08:41:50,106] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1682/1998 [6:47:27<1:15:21, 14.31s/it]09/01/2023 08:41:53 - INFO - __main__ -   Step: 1682, LR: 3.2541935483870966e-06, Loss: 0.273017555475235
[2023-09-01 08:42:04,682] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1683/1998 [6:47:41<1:14:36, 14.21s/it]09/01/2023 08:42:07 - INFO - __main__ -   Step: 1683, LR: 3.2438709677419354e-06, Loss: 0.32856932282447815
[2023-09-01 08:42:17,618] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1684/1998 [6:47:54<1:12:20, 13.82s/it]09/01/2023 08:42:20 - INFO - __main__ -   Step: 1684, LR: 3.2335483870967743e-06, Loss: 0.3233673572540283
[2023-09-01 08:42:31,295] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1685/1998 [6:48:08<1:12:09, 13.83s/it]09/01/2023 08:42:34 - INFO - __main__ -   Step: 1685, LR: 3.223225806451613e-06, Loss: 0.3373756408691406
[2023-09-01 08:42:46,083] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1686/1998 [6:48:24<1:14:19, 14.29s/it]09/01/2023 08:42:49 - INFO - __main__ -   Step: 1686, LR: 3.212903225806452e-06, Loss: 0.2803115248680115
[2023-09-01 08:43:00,366] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1687/1998 [6:48:37<1:13:06, 14.10s/it]09/01/2023 08:43:03 - INFO - __main__ -   Step: 1687, LR: 3.2025806451612908e-06, Loss: 0.27700164914131165
[2023-09-01 08:43:14,626] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 84%|████████▍ | 1688/1998 [6:48:52<1:14:42, 14.46s/it]09/01/2023 08:43:18 - INFO - __main__ -   Step: 1688, LR: 3.1922580645161296e-06, Loss: 0.2968188524246216
[2023-09-01 08:43:29,421] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1689/1998 [6:49:07<1:14:04, 14.38s/it]09/01/2023 08:43:32 - INFO - __main__ -   Step: 1689, LR: 3.181935483870968e-06, Loss: 0.3157045841217041
[2023-09-01 08:43:44,837] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1690/1998 [6:49:22<1:14:34, 14.53s/it]09/01/2023 08:43:47 - INFO - __main__ -   Step: 1690, LR: 3.171612903225807e-06, Loss: 0.2983035147190094
[2023-09-01 08:43:59,288] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1691/1998 [6:49:36<1:14:21, 14.53s/it]09/01/2023 08:44:02 - INFO - __main__ -   Step: 1691, LR: 3.1612903225806453e-06, Loss: 0.29704129695892334
[2023-09-01 08:44:12,287] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1692/1998 [6:49:49<1:12:12, 14.16s/it]09/01/2023 08:44:15 - INFO - __main__ -   Step: 1692, LR: 3.150967741935484e-06, Loss: 0.3177960216999054
[2023-09-01 08:44:26,118] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1693/1998 [6:50:03<1:11:10, 14.00s/it]09/01/2023 08:44:29 - INFO - __main__ -   Step: 1693, LR: 3.1406451612903225e-06, Loss: 0.2584860622882843
[2023-09-01 08:44:40,611] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1694/1998 [6:50:18<1:12:05, 14.23s/it]09/01/2023 08:44:43 - INFO - __main__ -   Step: 1694, LR: 3.1303225806451614e-06, Loss: 0.268045037984848
[2023-09-01 08:44:55,583] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1695/1998 [6:50:33<1:13:29, 14.55s/it]09/01/2023 08:44:59 - INFO - __main__ -   Step: 1695, LR: 3.12e-06, Loss: 0.27990278601646423
[2023-09-01 08:45:11,861] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1696/1998 [6:50:50<1:16:21, 15.17s/it]09/01/2023 08:45:15 - INFO - __main__ -   Step: 1696, LR: 3.109677419354839e-06, Loss: 0.3037071228027344
[2023-09-01 08:45:27,258] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1697/1998 [6:51:04<1:15:03, 14.96s/it]09/01/2023 08:45:30 - INFO - __main__ -   Step: 1697, LR: 3.099354838709678e-06, Loss: 0.3769760727882385
[2023-09-01 08:45:40,506] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▍ | 1698/1998 [6:51:18<1:12:21, 14.47s/it]09/01/2023 08:45:43 - INFO - __main__ -   Step: 1698, LR: 3.0890322580645167e-06, Loss: 0.370445191860199
[2023-09-01 08:45:54,106] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1699/1998 [6:51:31<1:10:53, 14.23s/it]09/01/2023 08:45:57 - INFO - __main__ -   Step: 1699, LR: 3.0787096774193555e-06, Loss: 0.3033810555934906
[2023-09-01 08:46:07,821] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1700/1998 [6:51:45<1:09:28, 13.99s/it]09/01/2023 08:46:10 - INFO - __main__ -   Step: 1700, LR: 3.0683870967741935e-06, Loss: 0.2985142767429352
09/01/2023 08:46:10 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700
09/01/2023 08:46:10 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 08:46:10,646] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 08:46:10,652] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 08:46:10,652] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 08:46:10,652] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 08:46:10,653] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 08:46:10,654] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 08:46:10,654] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 08:46:10,666] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 08:46:10,667] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 08:46:10,667] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 08:46:10,668] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 08:46:10,669] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 08:46:10,669] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 08:46:10,669] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 08:46:10,669] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 08:47:11,448] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 08:47:11,448] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 08:47:13,852] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 08:47:13,852] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 08:47:13,880] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 08:47:13,880] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 08:47:14,732] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 08:47:14,734] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 08:47:14,738] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 08:47:14,738] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 08:47:14,738] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 08:47:14,739] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 08:47:14 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/pytorch_model
09/01/2023 08:47:14 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/scheduler.bin
09/01/2023 08:47:14 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1700/random_states_0.pkl
09/01/2023 08:47:14 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.93it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.91it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:56,  3.95it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:00,  3.66it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.75it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.48it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.47it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.69it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.84it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.90it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.04it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:51,  4.12it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:50,  4.18it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.23it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.23it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.25it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.22it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.02it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.91it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.03it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.11it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:48,  4.17it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.19it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.01it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.63it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.80it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.64it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.86it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  4.00it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.86it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  4.01it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.89it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.70it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.81it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.96it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:46,  4.05it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:49,  3.79it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:47,  3.92it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.03it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.11it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.10it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.82it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:51,  3.53it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:48,  3.73it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.59it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.46it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.49it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:51,  3.44it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.57it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.48it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:50,  3.43it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.47it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.41it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.76it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.61it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.81it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.87it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:42,  3.90it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.99it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.03it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.10it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.14it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.15it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.15it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.20it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.14it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.18it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.97it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.84it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.80it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.93it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.06it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.15it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.85it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.97it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.61it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.72it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.80it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.85it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.93it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.98it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:34,  4.09it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:35,  3.96it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.96it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.99it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  3.99it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.09it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.15it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.10it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.16it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.20it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.03it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:31,  4.13it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:33,  3.87it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.88it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.98it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.99it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.08it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.08it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.14it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.17it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.19it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:29,  4.17it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.80it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.93it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.02it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.11it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.75it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.92it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:28,  4.03it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.88it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  3.99it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.04it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.05it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:26,  4.14it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.19it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.22it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.26it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.30it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.32it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:31<00:23,  4.31it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.33it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.88it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.58it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.77it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.92it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.94it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.09it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:23,  3.92it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.06it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.95it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.09it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.13it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.22it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.25it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.30it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:35<00:20,  4.29it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.29it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.32it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.36it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.34it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.36it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.39it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.39it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.38it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:37<00:17,  4.41it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.35it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.40it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.38it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:16,  4.31it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.84it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.98it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.11it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:39<00:16,  4.21it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.26it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.28it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.33it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:14,  4.34it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.36it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.39it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.42it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.43it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:41<00:13,  4.43it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.41it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.17it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.25it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:42<00:13,  4.26it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.31it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.32it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.12it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:43<00:13,  3.84it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.96it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.07it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.16it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:44<00:12,  3.99it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.11it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.21it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.28it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.30it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:09,  4.31it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.34it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.13it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.11it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.21it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.25it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.31it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.10it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:47<00:08,  4.18it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.24it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.16it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.22it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.28it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.30it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.34it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.37it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.98it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.10it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.19it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.26it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.32it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.36it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.38it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.40it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.42it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:51<00:04,  4.40it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.38it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.38it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.16it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.20it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.24it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.26it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.30it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.34it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.36it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.26it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.32it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.35it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:54<00:01,  4.36it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.39it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.41it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.42it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.43it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.40it/s][A09/01/2023 08:48:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 08:48:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 08:48:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 08:48:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 08:48:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 08:48:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 08:48:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 08:48:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 08:48:11 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 08:48:12 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 08:48:12 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 08:48:12 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 08:48:12 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.97it/s]
09/01/2023 08:48:12 - INFO - __main__ -   Step: 1700, Validation Metrics: {'accuracy': 0.7903897787241922, 'f1_micro': 0.7903897787241922, 'f1_macro': 0.459379080689152, 'f1_weighted': 0.7599595416145697, 'f1_1': 0.8790715497892374, 'f1_-1': 0.3591380686352753, 'f1_0': 0.1399276236429433, 'precision_micro': 0.7903897787241922, 'precision_macro': 0.5380668680437456, 'precision_weighted': 0.7481958998082398, 'precision_1': 0.8302140419811809, 'precision_-1': 0.4787234042553192, 'precision_0': 0.30526315789473685, 'recall_micro': 0.7903897787241922, 'recall_macro': 0.43738741098271755, 'recall_weighted': 0.7903897787241922, 'recall_1': 0.9340390879478827, 'recall_-1': 0.28735632183908044, 'recall_0': 0.09076682316118936}
[2023-09-01 08:48:24,691] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1701/1998 [6:54:01<4:11:44, 50.86s/it]09/01/2023 08:48:27 - INFO - __main__ -   Step: 1701, LR: 3.0580645161290324e-06, Loss: 0.26025867462158203
[2023-09-01 08:48:39,065] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1702/1998 [6:54:16<3:17:35, 40.05s/it]09/01/2023 08:48:42 - INFO - __main__ -   Step: 1702, LR: 3.047741935483871e-06, Loss: 0.24409110844135284
[2023-09-01 08:48:53,163] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1703/1998 [6:54:31<2:38:53, 32.32s/it]09/01/2023 08:48:56 - INFO - __main__ -   Step: 1703, LR: 3.03741935483871e-06, Loss: 0.3231310248374939
[2023-09-01 08:49:07,981] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1704/1998 [6:54:45<2:12:08, 26.97s/it]09/01/2023 08:49:11 - INFO - __main__ -   Step: 1704, LR: 3.0270967741935484e-06, Loss: 0.33800143003463745
[2023-09-01 08:49:21,124] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1705/1998 [6:54:58<1:51:15, 22.78s/it]09/01/2023 08:49:24 - INFO - __main__ -   Step: 1705, LR: 3.0167741935483873e-06, Loss: 0.41044461727142334
[2023-09-01 08:49:35,285] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1706/1998 [6:55:12<1:38:18, 20.20s/it]09/01/2023 08:49:38 - INFO - __main__ -   Step: 1706, LR: 3.006451612903226e-06, Loss: 0.26779845356941223
[2023-09-01 08:49:49,092] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1707/1998 [6:55:26<1:28:45, 18.30s/it]09/01/2023 08:49:52 - INFO - __main__ -   Step: 1707, LR: 2.996129032258065e-06, Loss: 0.30798351764678955
[2023-09-01 08:50:03,194] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 85%|████████▌ | 1708/1998 [6:55:40<1:22:39, 17.10s/it]09/01/2023 08:50:06 - INFO - __main__ -   Step: 1708, LR: 2.985806451612904e-06, Loss: 0.3283342719078064
[2023-09-01 08:50:17,960] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1709/1998 [6:55:55<1:18:26, 16.28s/it]09/01/2023 08:50:20 - INFO - __main__ -   Step: 1709, LR: 2.9754838709677418e-06, Loss: 0.3135460317134857
[2023-09-01 08:50:33,623] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1710/1998 [6:56:11<1:17:57, 16.24s/it]09/01/2023 08:50:37 - INFO - __main__ -   Step: 1710, LR: 2.9651612903225806e-06, Loss: 0.40373560786247253
[2023-09-01 08:50:47,593] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1711/1998 [6:56:24<1:13:43, 15.41s/it]09/01/2023 08:50:50 - INFO - __main__ -   Step: 1711, LR: 2.9548387096774195e-06, Loss: 0.3105279803276062
[2023-09-01 08:51:00,459] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1712/1998 [6:56:37<1:09:39, 14.61s/it]09/01/2023 08:51:03 - INFO - __main__ -   Step: 1712, LR: 2.9445161290322583e-06, Loss: 0.2842685580253601
[2023-09-01 08:51:14,365] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1713/1998 [6:56:51<1:08:21, 14.39s/it]09/01/2023 08:51:17 - INFO - __main__ -   Step: 1713, LR: 2.934193548387097e-06, Loss: 0.36579906940460205
[2023-09-01 08:51:27,076] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1714/1998 [6:57:04<1:05:47, 13.90s/it]09/01/2023 08:51:29 - INFO - __main__ -   Step: 1714, LR: 2.923870967741936e-06, Loss: 0.35560721158981323
[2023-09-01 08:51:40,129] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1715/1998 [6:57:18<1:05:31, 13.89s/it]09/01/2023 08:51:43 - INFO - __main__ -   Step: 1715, LR: 2.9135483870967744e-06, Loss: 0.3189391493797302
[2023-09-01 08:51:55,692] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1716/1998 [6:57:33<1:07:10, 14.29s/it]09/01/2023 08:51:58 - INFO - __main__ -   Step: 1716, LR: 2.903225806451613e-06, Loss: 0.2964816689491272
[2023-09-01 08:52:09,853] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1717/1998 [6:57:47<1:05:56, 14.08s/it]09/01/2023 08:52:12 - INFO - __main__ -   Step: 1717, LR: 2.892903225806452e-06, Loss: 0.31820935010910034
[2023-09-01 08:52:23,736] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1718/1998 [6:58:01<1:06:02, 14.15s/it]09/01/2023 08:52:26 - INFO - __main__ -   Step: 1718, LR: 2.8825806451612905e-06, Loss: 0.2783188819885254
[2023-09-01 08:52:36,866] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1719/1998 [6:58:14<1:04:32, 13.88s/it]09/01/2023 08:52:40 - INFO - __main__ -   Step: 1719, LR: 2.8722580645161293e-06, Loss: 0.2581879496574402
[2023-09-01 08:52:50,318] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1720/1998 [6:58:27<1:03:26, 13.69s/it]09/01/2023 08:52:53 - INFO - __main__ -   Step: 1720, LR: 2.8619354838709677e-06, Loss: 0.3305046260356903
[2023-09-01 08:53:03,317] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1721/1998 [6:58:40<1:02:16, 13.49s/it]09/01/2023 08:53:06 - INFO - __main__ -   Step: 1721, LR: 2.8516129032258065e-06, Loss: 0.3343101143836975
[2023-09-01 08:53:17,364] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1722/1998 [6:58:54<1:02:41, 13.63s/it]09/01/2023 08:53:20 - INFO - __main__ -   Step: 1722, LR: 2.8412903225806454e-06, Loss: 0.34920811653137207
[2023-09-01 08:53:31,515] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▌ | 1723/1998 [6:59:08<1:02:51, 13.72s/it]09/01/2023 08:53:34 - INFO - __main__ -   Step: 1723, LR: 2.8309677419354842e-06, Loss: 0.33170902729034424
[2023-09-01 08:53:45,333] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▋ | 1724/1998 [6:59:23<1:03:29, 13.90s/it]09/01/2023 08:53:48 - INFO - __main__ -   Step: 1724, LR: 2.820645161290323e-06, Loss: 0.3056715130805969
[2023-09-01 08:53:59,060] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▋ | 1725/1998 [6:59:36<1:02:27, 13.73s/it]09/01/2023 08:54:01 - INFO - __main__ -   Step: 1725, LR: 2.810322580645162e-06, Loss: 0.3980923295021057
[2023-09-01 08:54:12,070] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▋ | 1726/1998 [6:59:49<1:01:49, 13.64s/it]09/01/2023 08:54:15 - INFO - __main__ -   Step: 1726, LR: 2.8000000000000003e-06, Loss: 0.29742753505706787
[2023-09-01 08:54:26,849] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▋ | 1727/1998 [7:00:04<1:02:38, 13.87s/it]09/01/2023 08:54:29 - INFO - __main__ -   Step: 1727, LR: 2.7896774193548387e-06, Loss: 0.3887169659137726
[2023-09-01 08:54:40,860] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 86%|████████▋ | 1728/1998 [7:00:18<1:03:23, 14.09s/it]09/01/2023 08:54:44 - INFO - __main__ -   Step: 1728, LR: 2.7793548387096775e-06, Loss: 0.3041617274284363
[2023-09-01 08:54:54,781] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1729/1998 [7:00:32<1:02:33, 13.95s/it]09/01/2023 08:54:57 - INFO - __main__ -   Step: 1729, LR: 2.7690322580645164e-06, Loss: 0.3186466693878174
[2023-09-01 08:55:08,485] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1730/1998 [7:00:46<1:02:16, 13.94s/it]09/01/2023 08:55:11 - INFO - __main__ -   Step: 1730, LR: 2.7587096774193552e-06, Loss: 0.31923824548721313
[2023-09-01 08:55:23,253] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1731/1998 [7:01:00<1:02:53, 14.13s/it]09/01/2023 08:55:26 - INFO - __main__ -   Step: 1731, LR: 2.7483870967741936e-06, Loss: 0.2745914161205292
[2023-09-01 08:55:38,341] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1732/1998 [7:01:15<1:03:38, 14.36s/it]09/01/2023 08:55:41 - INFO - __main__ -   Step: 1732, LR: 2.7380645161290325e-06, Loss: 0.33155328035354614
[2023-09-01 08:55:51,607] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1733/1998 [7:01:29<1:01:55, 14.02s/it]09/01/2023 08:55:54 - INFO - __main__ -   Step: 1733, LR: 2.7277419354838713e-06, Loss: 0.29779431223869324
[2023-09-01 08:56:06,246] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1734/1998 [7:01:43<1:02:40, 14.24s/it]09/01/2023 08:56:09 - INFO - __main__ -   Step: 1734, LR: 2.71741935483871e-06, Loss: 0.25130176544189453
[2023-09-01 08:56:20,286] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1735/1998 [7:01:57<1:02:02, 14.15s/it]09/01/2023 08:56:23 - INFO - __main__ -   Step: 1735, LR: 2.707096774193549e-06, Loss: 0.22412283718585968
[2023-09-01 08:56:34,159] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1736/1998 [7:02:11<1:01:43, 14.13s/it]09/01/2023 08:56:37 - INFO - __main__ -   Step: 1736, LR: 2.696774193548387e-06, Loss: 0.3261605501174927
[2023-09-01 08:56:49,077] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1737/1998 [7:02:26<1:02:19, 14.33s/it]09/01/2023 08:56:52 - INFO - __main__ -   Step: 1737, LR: 2.686451612903226e-06, Loss: 0.3227265775203705
[2023-09-01 08:57:03,331] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1738/1998 [7:02:41<1:02:09, 14.34s/it]09/01/2023 08:57:06 - INFO - __main__ -   Step: 1738, LR: 2.6761290322580646e-06, Loss: 0.24355870485305786
[2023-09-01 08:57:17,226] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1739/1998 [7:02:54<1:01:23, 14.22s/it]09/01/2023 08:57:20 - INFO - __main__ -   Step: 1739, LR: 2.6658064516129035e-06, Loss: 0.26440325379371643
[2023-09-01 08:57:32,523] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1740/1998 [7:03:10<1:02:40, 14.57s/it]09/01/2023 08:57:35 - INFO - __main__ -   Step: 1740, LR: 2.6554838709677423e-06, Loss: 0.3310501277446747
[2023-09-01 08:57:47,240] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1741/1998 [7:03:24<1:02:13, 14.53s/it]09/01/2023 08:57:50 - INFO - __main__ -   Step: 1741, LR: 2.645161290322581e-06, Loss: 0.32267260551452637
[2023-09-01 08:58:01,530] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1742/1998 [7:03:39<1:01:53, 14.51s/it]09/01/2023 08:58:04 - INFO - __main__ -   Step: 1742, LR: 2.6348387096774196e-06, Loss: 0.3097093999385834
[2023-09-01 08:58:16,191] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1743/1998 [7:03:53<1:01:33, 14.48s/it]09/01/2023 08:58:19 - INFO - __main__ -   Step: 1743, LR: 2.6245161290322584e-06, Loss: 0.3592575788497925
[2023-09-01 08:58:30,804] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1744/1998 [7:04:08<1:01:11, 14.45s/it]09/01/2023 08:58:33 - INFO - __main__ -   Step: 1744, LR: 2.614193548387097e-06, Loss: 0.36038774251937866
[2023-09-01 08:58:43,488] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1745/1998 [7:04:21<59:18, 14.06s/it]  09/01/2023 08:58:46 - INFO - __main__ -   Step: 1745, LR: 2.6038709677419356e-06, Loss: 0.2807258367538452
[2023-09-01 08:58:56,936] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1746/1998 [7:04:34<58:15, 13.87s/it]09/01/2023 08:59:00 - INFO - __main__ -   Step: 1746, LR: 2.593548387096774e-06, Loss: 0.3196188509464264
[2023-09-01 08:59:10,713] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1747/1998 [7:04:48<58:31, 13.99s/it]09/01/2023 08:59:14 - INFO - __main__ -   Step: 1747, LR: 2.583225806451613e-06, Loss: 0.35803377628326416
[2023-09-01 08:59:25,630] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 87%|████████▋ | 1748/1998 [7:05:03<59:02, 14.17s/it]09/01/2023 08:59:29 - INFO - __main__ -   Step: 1748, LR: 2.5729032258064517e-06, Loss: 0.284853994846344
[2023-09-01 08:59:40,404] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1749/1998 [7:05:17<58:54, 14.20s/it]09/01/2023 08:59:43 - INFO - __main__ -   Step: 1749, LR: 2.5625806451612906e-06, Loss: 0.2441829890012741
[2023-09-01 08:59:55,156] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1750/1998 [7:05:32<59:42, 14.45s/it]09/01/2023 08:59:58 - INFO - __main__ -   Step: 1750, LR: 2.5522580645161294e-06, Loss: 0.3058615028858185
[2023-09-01 09:00:08,826] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1751/1998 [7:05:46<58:07, 14.12s/it]09/01/2023 09:00:11 - INFO - __main__ -   Step: 1751, LR: 2.5419354838709682e-06, Loss: 0.2651755213737488
[2023-09-01 09:00:22,378] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1752/1998 [7:05:59<57:10, 13.94s/it]09/01/2023 09:00:25 - INFO - __main__ -   Step: 1752, LR: 2.531612903225807e-06, Loss: 0.285281240940094
[2023-09-01 09:00:36,004] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1753/1998 [7:06:13<56:29, 13.84s/it]09/01/2023 09:00:38 - INFO - __main__ -   Step: 1753, LR: 2.521290322580645e-06, Loss: 0.2756829857826233
[2023-09-01 09:00:49,360] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1754/1998 [7:06:26<55:53, 13.74s/it]09/01/2023 09:00:52 - INFO - __main__ -   Step: 1754, LR: 2.510967741935484e-06, Loss: 0.2738395929336548
[2023-09-01 09:01:02,843] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1755/1998 [7:06:40<55:37, 13.73s/it]09/01/2023 09:01:06 - INFO - __main__ -   Step: 1755, LR: 2.5006451612903227e-06, Loss: 0.28473353385925293
[2023-09-01 09:01:18,253] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1756/1998 [7:06:56<58:00, 14.38s/it]09/01/2023 09:01:21 - INFO - __main__ -   Step: 1756, LR: 2.4903225806451616e-06, Loss: 0.32007187604904175
[2023-09-01 09:01:33,475] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1757/1998 [7:07:10<57:46, 14.38s/it]09/01/2023 09:01:36 - INFO - __main__ -   Step: 1757, LR: 2.4800000000000004e-06, Loss: 0.3186700940132141
[2023-09-01 09:01:47,552] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1758/1998 [7:07:24<57:17, 14.32s/it]09/01/2023 09:01:50 - INFO - __main__ -   Step: 1758, LR: 2.469677419354839e-06, Loss: 0.2818085551261902
[2023-09-01 09:02:00,738] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1759/1998 [7:07:37<55:14, 13.87s/it]09/01/2023 09:02:03 - INFO - __main__ -   Step: 1759, LR: 2.4593548387096776e-06, Loss: 0.29539138078689575
[2023-09-01 09:02:13,556] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1760/1998 [7:07:51<54:36, 13.77s/it]09/01/2023 09:02:16 - INFO - __main__ -   Step: 1760, LR: 2.449032258064516e-06, Loss: 0.3784480392932892
[2023-09-01 09:02:27,331] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1761/1998 [7:08:05<54:40, 13.84s/it]09/01/2023 09:02:30 - INFO - __main__ -   Step: 1761, LR: 2.438709677419355e-06, Loss: 0.27959203720092773
[2023-09-01 09:02:42,027] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1762/1998 [7:08:20<55:58, 14.23s/it]09/01/2023 09:02:45 - INFO - __main__ -   Step: 1762, LR: 2.4283870967741937e-06, Loss: 0.26386338472366333
[2023-09-01 09:02:56,610] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1763/1998 [7:08:34<55:18, 14.12s/it]09/01/2023 09:02:59 - INFO - __main__ -   Step: 1763, LR: 2.4180645161290326e-06, Loss: 0.30988818407058716
[2023-09-01 09:03:10,855] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1764/1998 [7:08:48<55:12, 14.16s/it]09/01/2023 09:03:14 - INFO - __main__ -   Step: 1764, LR: 2.407741935483871e-06, Loss: 0.32676830887794495
[2023-09-01 09:03:24,138] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1765/1998 [7:09:01<54:05, 13.93s/it]09/01/2023 09:03:27 - INFO - __main__ -   Step: 1765, LR: 2.39741935483871e-06, Loss: 0.2698790431022644
[2023-09-01 09:03:38,367] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1766/1998 [7:09:15<53:49, 13.92s/it]09/01/2023 09:03:41 - INFO - __main__ -   Step: 1766, LR: 2.3870967741935486e-06, Loss: 0.2996094822883606
[2023-09-01 09:03:52,537] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1767/1998 [7:09:30<54:05, 14.05s/it]09/01/2023 09:03:55 - INFO - __main__ -   Step: 1767, LR: 2.3767741935483875e-06, Loss: 0.26901501417160034
[2023-09-01 09:04:06,405] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 88%|████████▊ | 1768/1998 [7:09:43<53:26, 13.94s/it]09/01/2023 09:04:09 - INFO - __main__ -   Step: 1768, LR: 2.3664516129032263e-06, Loss: 0.24883687496185303
[2023-09-01 09:04:20,055] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▊ | 1769/1998 [7:09:58<53:31, 14.03s/it]09/01/2023 09:04:23 - INFO - __main__ -   Step: 1769, LR: 2.3561290322580647e-06, Loss: 0.38154980540275574
[2023-09-01 09:04:35,208] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▊ | 1770/1998 [7:10:12<54:02, 14.22s/it]09/01/2023 09:04:38 - INFO - __main__ -   Step: 1770, LR: 2.3458064516129036e-06, Loss: 0.3157987594604492
[2023-09-01 09:04:50,531] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▊ | 1771/1998 [7:10:28<55:23, 14.64s/it]09/01/2023 09:04:53 - INFO - __main__ -   Step: 1771, LR: 2.335483870967742e-06, Loss: 0.24918030202388763
[2023-09-01 09:05:05,392] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▊ | 1772/1998 [7:10:42<54:55, 14.58s/it]09/01/2023 09:05:08 - INFO - __main__ -   Step: 1772, LR: 2.325161290322581e-06, Loss: 0.26944130659103394
[2023-09-01 09:05:19,417] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▊ | 1773/1998 [7:10:56<53:45, 14.34s/it]09/01/2023 09:05:22 - INFO - __main__ -   Step: 1773, LR: 2.3148387096774192e-06, Loss: 0.29985877871513367
[2023-09-01 09:05:33,146] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1774/1998 [7:11:10<53:33, 14.34s/it]09/01/2023 09:05:36 - INFO - __main__ -   Step: 1774, LR: 2.304516129032258e-06, Loss: 0.2589675188064575
[2023-09-01 09:05:47,602] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1775/1998 [7:11:25<53:01, 14.27s/it]09/01/2023 09:05:50 - INFO - __main__ -   Step: 1775, LR: 2.294193548387097e-06, Loss: 0.29262256622314453
[2023-09-01 09:06:00,956] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1776/1998 [7:11:38<52:15, 14.12s/it]09/01/2023 09:06:04 - INFO - __main__ -   Step: 1776, LR: 2.2838709677419357e-06, Loss: 0.29938697814941406
[2023-09-01 09:06:14,012] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1777/1998 [7:11:51<50:50, 13.80s/it]09/01/2023 09:06:17 - INFO - __main__ -   Step: 1777, LR: 2.2735483870967746e-06, Loss: 0.3536135256290436
[2023-09-01 09:06:28,938] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1778/1998 [7:12:06<51:05, 13.93s/it]09/01/2023 09:06:31 - INFO - __main__ -   Step: 1778, LR: 2.263225806451613e-06, Loss: 0.3121432662010193
[2023-09-01 09:06:43,602] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1779/1998 [7:12:21<52:27, 14.37s/it]09/01/2023 09:06:47 - INFO - __main__ -   Step: 1779, LR: 2.252903225806452e-06, Loss: 0.2831876277923584
[2023-09-01 09:06:57,695] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1780/1998 [7:12:35<51:20, 14.13s/it]09/01/2023 09:07:00 - INFO - __main__ -   Step: 1780, LR: 2.2425806451612907e-06, Loss: 0.25609517097473145
[2023-09-01 09:07:11,679] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1781/1998 [7:12:49<51:02, 14.11s/it]09/01/2023 09:07:14 - INFO - __main__ -   Step: 1781, LR: 2.2322580645161295e-06, Loss: 0.3249911069869995
[2023-09-01 09:07:24,502] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1782/1998 [7:13:02<49:46, 13.83s/it]09/01/2023 09:07:27 - INFO - __main__ -   Step: 1782, LR: 2.221935483870968e-06, Loss: 0.2555108070373535
[2023-09-01 09:07:38,907] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1783/1998 [7:13:16<49:46, 13.89s/it]09/01/2023 09:07:41 - INFO - __main__ -   Step: 1783, LR: 2.2116129032258067e-06, Loss: 0.351701557636261
[2023-09-01 09:07:53,300] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1784/1998 [7:13:30<49:50, 13.97s/it]09/01/2023 09:07:56 - INFO - __main__ -   Step: 1784, LR: 2.201290322580645e-06, Loss: 0.265184611082077
[2023-09-01 09:08:08,446] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1785/1998 [7:13:46<51:12, 14.43s/it]09/01/2023 09:08:11 - INFO - __main__ -   Step: 1785, LR: 2.190967741935484e-06, Loss: 0.3134608864784241
[2023-09-01 09:08:22,712] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1786/1998 [7:14:00<50:47, 14.38s/it]09/01/2023 09:08:25 - INFO - __main__ -   Step: 1786, LR: 2.180645161290323e-06, Loss: 0.2330511510372162
[2023-09-01 09:08:36,243] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1787/1998 [7:14:13<49:22, 14.04s/it]09/01/2023 09:08:39 - INFO - __main__ -   Step: 1787, LR: 2.1703225806451612e-06, Loss: 0.2767637372016907
[2023-09-01 09:08:49,728] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 89%|████████▉ | 1788/1998 [7:14:27<48:48, 13.94s/it]09/01/2023 09:08:52 - INFO - __main__ -   Step: 1788, LR: 2.16e-06, Loss: 0.38664495944976807
[2023-09-01 09:09:03,549] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1789/1998 [7:14:40<48:22, 13.89s/it]09/01/2023 09:09:06 - INFO - __main__ -   Step: 1789, LR: 2.149677419354839e-06, Loss: 0.3079145550727844
[2023-09-01 09:09:18,491] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1790/1998 [7:14:55<49:16, 14.21s/it]09/01/2023 09:09:21 - INFO - __main__ -   Step: 1790, LR: 2.1393548387096777e-06, Loss: 0.27575552463531494
[2023-09-01 09:09:32,436] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1791/1998 [7:15:10<49:21, 14.30s/it]09/01/2023 09:09:36 - INFO - __main__ -   Step: 1791, LR: 2.129032258064516e-06, Loss: 0.3144404888153076
[2023-09-01 09:09:47,309] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1792/1998 [7:15:24<49:05, 14.30s/it]09/01/2023 09:09:50 - INFO - __main__ -   Step: 1792, LR: 2.118709677419355e-06, Loss: 0.31789344549179077
[2023-09-01 09:10:01,620] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1793/1998 [7:15:39<49:06, 14.37s/it]09/01/2023 09:10:04 - INFO - __main__ -   Step: 1793, LR: 2.108387096774194e-06, Loss: 0.24714048206806183
[2023-09-01 09:10:15,961] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1794/1998 [7:15:53<48:27, 14.25s/it]09/01/2023 09:10:18 - INFO - __main__ -   Step: 1794, LR: 2.0980645161290327e-06, Loss: 0.29722312092781067
[2023-09-01 09:10:29,536] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1795/1998 [7:16:07<47:52, 14.15s/it]09/01/2023 09:10:32 - INFO - __main__ -   Step: 1795, LR: 2.087741935483871e-06, Loss: 0.29099273681640625
[2023-09-01 09:10:43,513] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1796/1998 [7:16:21<47:29, 14.11s/it]09/01/2023 09:10:46 - INFO - __main__ -   Step: 1796, LR: 2.07741935483871e-06, Loss: 0.3010143041610718
[2023-09-01 09:10:56,791] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1797/1998 [7:16:34<46:14, 13.81s/it]09/01/2023 09:10:59 - INFO - __main__ -   Step: 1797, LR: 2.0670967741935487e-06, Loss: 0.25697970390319824
[2023-09-01 09:11:10,755] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|████████▉ | 1798/1998 [7:16:48<46:20, 13.90s/it]09/01/2023 09:11:13 - INFO - __main__ -   Step: 1798, LR: 2.056774193548387e-06, Loss: 0.31203439831733704
[2023-09-01 09:11:25,527] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1799/1998 [7:17:03<46:56, 14.15s/it]09/01/2023 09:11:28 - INFO - __main__ -   Step: 1799, LR: 2.046451612903226e-06, Loss: 0.2836368680000305
[2023-09-01 09:11:39,413] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1800/1998 [7:17:16<46:12, 14.00s/it]09/01/2023 09:11:42 - INFO - __main__ -   Step: 1800, LR: 2.0361290322580644e-06, Loss: 0.27075809240341187
09/01/2023 09:11:42 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800
09/01/2023 09:11:42 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 09:11:42,378] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 09:11:42,384] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 09:11:42,384] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 09:11:42,384] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 09:11:42,384] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 09:11:42,386] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 09:11:42,386] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 09:11:42,398] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 09:11:42,399] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 09:11:42,399] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 09:11:42,400] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 09:11:42,400] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 09:11:42,400] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 09:11:42,400] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 09:11:42,400] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 09:12:41,180] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 09:12:41,180] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 09:12:45,141] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 09:12:45,142] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 09:12:45,429] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 09:12:45,429] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 09:12:46,385] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 09:12:46,385] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 09:12:46,388] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 09:12:46,388] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 09:12:46,389] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 09:12:46,389] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 09:12:46 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/pytorch_model
09/01/2023 09:12:46 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/scheduler.bin
09/01/2023 09:12:46 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1800/random_states_0.pkl
09/01/2023 09:12:46 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.88it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:46,  4.88it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:57,  3.91it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:01,  3.63it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.73it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.46it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:07,  3.28it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.44it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.64it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.81it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.89it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.00it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:52,  4.06it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.15it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.19it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:50,  4.19it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.22it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.19it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:52,  3.99it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:53,  3.88it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  3.98it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:50,  4.07it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.12it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:49,  4.14it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.98it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.61it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.80it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.65it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.84it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  3.97it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:51,  3.83it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:49,  3.96it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:50,  3.86it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.67it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.79it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.93it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.02it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:10<00:50,  3.77it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:48,  3.91it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.00it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.07it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.06it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.80it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.50it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.69it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.56it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.46it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.49it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:13<00:51,  3.43it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.55it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.45it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.40it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.60it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.75it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.59it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:45,  3.75it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:44,  3.82it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:16<00:43,  3.88it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.98it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.03it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.07it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.10it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.12it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:39,  4.12it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.18it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.12it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.18it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.96it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.84it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.80it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.90it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:38,  4.02it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.11it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.83it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.95it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.59it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.71it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:21<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.84it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.92it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.97it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:22<00:35,  4.05it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.93it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.98it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:23<00:34,  3.99it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.07it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.14it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.09it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:24<00:32,  4.15it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.19it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.02it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.10it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:25<00:34,  3.85it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.88it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  3.98it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:32,  3.99it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:26<00:31,  4.00it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:31,  4.06it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.07it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:30,  4.10it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.12it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.14it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:29,  4.14it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.77it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:28<00:30,  3.89it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  3.99it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:29,  4.02it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.11it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:29<00:30,  3.75it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.91it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.04it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.89it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:30<00:27,  4.02it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:26,  4.08it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.09it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.17it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.19it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.22it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.22it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.25it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:24,  4.27it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.27it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.30it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.86it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:33<00:27,  3.57it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.77it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.90it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.93it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.06it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:24,  3.90it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:23,  4.03it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.92it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.06it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.12it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.19it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.23it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.31it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:19,  4.32it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.32it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.33it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:19,  4.37it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:37<00:18,  4.35it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.38it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.39it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:18,  4.37it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.34it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.36it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.34it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.36it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:17,  4.34it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:39<00:17,  4.27it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.82it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.98it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.10it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.19it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.27it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.31it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.34it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:41<00:15,  4.33it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.32it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.32it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.34it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:14,  4.36it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.38it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.39it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.15it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.22it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.21it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.28it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.30it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.11it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.84it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.95it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.05it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.14it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.97it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.09it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:11,  4.17it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.23it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:46<00:10,  4.25it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.26it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.30it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.11it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:47<00:09,  4.09it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.19it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:09,  4.21it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.27it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.09it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.16it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.21it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.14it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.22it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.28it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.31it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.32it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.35it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:50<00:06,  3.97it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.08it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:06,  4.16it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.24it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:51<00:05,  4.30it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.33it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.35it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.38it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.39it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.36it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.39it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.37it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.14it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:53<00:03,  4.19it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.22it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.22it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.27it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:54<00:02,  4.29it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.33it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.26it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.29it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.34it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.34it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.35it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.38it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.37it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:56<00:00,  4.38it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.39it/s][A09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 09:13:43 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.96it/s]
09/01/2023 09:13:43 - INFO - __main__ -   Step: 1800, Validation Metrics: {'accuracy': 0.7909452828441811, 'f1_micro': 0.7909452828441811, 'f1_macro': 0.44870894508117254, 'f1_weighted': 0.7574620176579401, 'f1_1': 0.8795246402093327, 'f1_-1': 0.3482142857142857, 'f1_0': 0.11838790931989925, 'precision_micro': 0.7909452828441811, 'precision_macro': 0.5361694872189231, 'precision_weighted': 0.7458143829615879, 'precision_1': 0.8275543701272056, 'precision_-1': 0.477728285077951, 'precision_0': 0.3032258064516129, 'recall_micro': 0.7909452828441811, 'recall_macro': 0.4286528448462312, 'recall_weighted': 0.7909452828441811, 'recall_1': 0.938459748720335, 'recall_-1': 0.2739463601532567, 'recall_0': 0.07355242566510173}
[2023-09-01 09:13:55,839] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1801/1998 [7:19:33<2:46:40, 50.76s/it]09/01/2023 09:13:58 - INFO - __main__ -   Step: 1801, LR: 2.0258064516129032e-06, Loss: 0.2363956719636917
[2023-09-01 09:14:09,747] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1802/1998 [7:19:46<2:09:10, 39.54s/it]09/01/2023 09:14:12 - INFO - __main__ -   Step: 1802, LR: 2.015483870967742e-06, Loss: 0.29384055733680725
[2023-09-01 09:14:23,322] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1803/1998 [7:20:00<1:43:49, 31.95s/it]09/01/2023 09:14:26 - INFO - __main__ -   Step: 1803, LR: 2.005161290322581e-06, Loss: 0.30562302470207214
[2023-09-01 09:14:37,801] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1804/1998 [7:20:15<1:26:12, 26.66s/it]09/01/2023 09:14:40 - INFO - __main__ -   Step: 1804, LR: 1.9948387096774193e-06, Loss: 0.21063470840454102
[2023-09-01 09:14:51,523] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1805/1998 [7:20:29<1:13:23, 22.82s/it]09/01/2023 09:14:54 - INFO - __main__ -   Step: 1805, LR: 1.984516129032258e-06, Loss: 0.34399598836898804
[2023-09-01 09:15:06,247] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1806/1998 [7:20:43<1:04:51, 20.27s/it]09/01/2023 09:15:08 - INFO - __main__ -   Step: 1806, LR: 1.974193548387097e-06, Loss: 0.2716251611709595
[2023-09-01 09:15:20,227] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1807/1998 [7:20:57<58:45, 18.46s/it]  09/01/2023 09:15:23 - INFO - __main__ -   Step: 1807, LR: 1.963870967741936e-06, Loss: 0.27588939666748047
[2023-09-01 09:15:34,137] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 90%|█████████ | 1808/1998 [7:21:11<53:48, 16.99s/it]09/01/2023 09:15:36 - INFO - __main__ -   Step: 1808, LR: 1.9535483870967747e-06, Loss: 0.30605483055114746
[2023-09-01 09:15:47,871] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1809/1998 [7:21:25<50:57, 16.18s/it]09/01/2023 09:15:51 - INFO - __main__ -   Step: 1809, LR: 1.943225806451613e-06, Loss: 0.269209623336792
[2023-09-01 09:16:03,250] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1810/1998 [7:21:40<49:23, 15.77s/it]09/01/2023 09:16:05 - INFO - __main__ -   Step: 1810, LR: 1.932903225806452e-06, Loss: 0.34703439474105835
[2023-09-01 09:16:17,103] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1811/1998 [7:21:55<48:24, 15.53s/it]09/01/2023 09:16:20 - INFO - __main__ -   Step: 1811, LR: 1.9225806451612903e-06, Loss: 0.29621511697769165
[2023-09-01 09:16:31,910] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1812/1998 [7:22:10<47:31, 15.33s/it]09/01/2023 09:16:35 - INFO - __main__ -   Step: 1812, LR: 1.912258064516129e-06, Loss: 0.2491757869720459
[2023-09-01 09:16:47,702] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1813/1998 [7:22:25<47:11, 15.30s/it]09/01/2023 09:16:50 - INFO - __main__ -   Step: 1813, LR: 1.9019354838709678e-06, Loss: 0.26193100214004517
[2023-09-01 09:17:01,791] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1814/1998 [7:22:39<45:54, 14.97s/it]09/01/2023 09:17:05 - INFO - __main__ -   Step: 1814, LR: 1.8916129032258066e-06, Loss: 0.30091530084609985
[2023-09-01 09:17:16,012] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1815/1998 [7:22:53<44:48, 14.69s/it]09/01/2023 09:17:19 - INFO - __main__ -   Step: 1815, LR: 1.8812903225806453e-06, Loss: 0.3366749882698059
[2023-09-01 09:17:30,194] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1816/1998 [7:23:07<43:33, 14.36s/it]09/01/2023 09:17:32 - INFO - __main__ -   Step: 1816, LR: 1.870967741935484e-06, Loss: 0.3104614317417145
[2023-09-01 09:17:43,484] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1817/1998 [7:23:20<42:27, 14.07s/it]09/01/2023 09:17:46 - INFO - __main__ -   Step: 1817, LR: 1.860645161290323e-06, Loss: 0.2954855263233185
[2023-09-01 09:17:58,322] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1818/1998 [7:23:35<43:00, 14.34s/it]09/01/2023 09:18:01 - INFO - __main__ -   Step: 1818, LR: 1.8503225806451613e-06, Loss: 0.3201889395713806
[2023-09-01 09:18:12,448] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1819/1998 [7:23:49<42:47, 14.35s/it]09/01/2023 09:18:15 - INFO - __main__ -   Step: 1819, LR: 1.8400000000000002e-06, Loss: 0.2646799087524414
[2023-09-01 09:18:26,023] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1820/1998 [7:24:03<41:58, 14.15s/it]09/01/2023 09:18:29 - INFO - __main__ -   Step: 1820, LR: 1.8296774193548388e-06, Loss: 0.3116810917854309
[2023-09-01 09:18:40,780] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1821/1998 [7:24:18<42:31, 14.42s/it]09/01/2023 09:18:44 - INFO - __main__ -   Step: 1821, LR: 1.8193548387096776e-06, Loss: 0.32565221190452576
[2023-09-01 09:18:55,128] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1822/1998 [7:24:32<41:58, 14.31s/it]09/01/2023 09:18:58 - INFO - __main__ -   Step: 1822, LR: 1.8090322580645163e-06, Loss: 0.2929845452308655
[2023-09-01 09:19:09,186] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████ | 1823/1998 [7:24:46<41:40, 14.29s/it]09/01/2023 09:19:12 - INFO - __main__ -   Step: 1823, LR: 1.7987096774193549e-06, Loss: 0.25407496094703674
[2023-09-01 09:19:22,936] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████▏| 1824/1998 [7:25:00<40:54, 14.11s/it]09/01/2023 09:19:26 - INFO - __main__ -   Step: 1824, LR: 1.7883870967741937e-06, Loss: 0.24594643712043762
[2023-09-01 09:19:36,564] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████▏| 1825/1998 [7:25:14<40:23, 14.01s/it]09/01/2023 09:19:40 - INFO - __main__ -   Step: 1825, LR: 1.7780645161290326e-06, Loss: 0.3206028938293457
[2023-09-01 09:19:51,450] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████▏| 1826/1998 [7:25:28<40:27, 14.11s/it]09/01/2023 09:19:54 - INFO - __main__ -   Step: 1826, LR: 1.7677419354838712e-06, Loss: 0.2938878834247589
[2023-09-01 09:20:06,586] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████▏| 1827/1998 [7:25:44<41:21, 14.51s/it]09/01/2023 09:20:09 - INFO - __main__ -   Step: 1827, LR: 1.7574193548387098e-06, Loss: 0.23840157687664032
[2023-09-01 09:20:21,241] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 91%|█████████▏| 1828/1998 [7:25:58<41:13, 14.55s/it]09/01/2023 09:20:24 - INFO - __main__ -   Step: 1828, LR: 1.7470967741935484e-06, Loss: 0.30008119344711304
[2023-09-01 09:20:35,621] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1829/1998 [7:26:13<41:01, 14.56s/it]09/01/2023 09:20:39 - INFO - __main__ -   Step: 1829, LR: 1.7367741935483873e-06, Loss: 0.2695930600166321
[2023-09-01 09:20:50,176] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1830/1998 [7:26:27<40:20, 14.41s/it]09/01/2023 09:20:53 - INFO - __main__ -   Step: 1830, LR: 1.726451612903226e-06, Loss: 0.3048720955848694
[2023-09-01 09:21:05,468] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1831/1998 [7:26:42<40:54, 14.70s/it]09/01/2023 09:21:08 - INFO - __main__ -   Step: 1831, LR: 1.7161290322580645e-06, Loss: 0.31400445103645325
[2023-09-01 09:21:19,211] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1832/1998 [7:26:56<40:03, 14.48s/it]09/01/2023 09:21:22 - INFO - __main__ -   Step: 1832, LR: 1.7058064516129033e-06, Loss: 0.33084946870803833
[2023-09-01 09:21:33,244] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1833/1998 [7:27:10<39:12, 14.26s/it]09/01/2023 09:21:36 - INFO - __main__ -   Step: 1833, LR: 1.6954838709677422e-06, Loss: 0.25868260860443115
[2023-09-01 09:21:46,660] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1834/1998 [7:27:24<38:24, 14.05s/it]09/01/2023 09:21:49 - INFO - __main__ -   Step: 1834, LR: 1.6851612903225808e-06, Loss: 0.24546092748641968
[2023-09-01 09:22:01,181] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1835/1998 [7:27:38<38:31, 14.18s/it]09/01/2023 09:22:04 - INFO - __main__ -   Step: 1835, LR: 1.6748387096774196e-06, Loss: 0.2776644825935364
[2023-09-01 09:22:14,869] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1836/1998 [7:27:52<37:45, 13.98s/it]09/01/2023 09:22:17 - INFO - __main__ -   Step: 1836, LR: 1.664516129032258e-06, Loss: 0.3032975196838379
[2023-09-01 09:22:29,434] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1837/1998 [7:28:06<37:53, 14.12s/it]09/01/2023 09:22:32 - INFO - __main__ -   Step: 1837, LR: 1.6541935483870969e-06, Loss: 0.26833030581474304
[2023-09-01 09:22:42,915] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1838/1998 [7:28:20<37:30, 14.07s/it]09/01/2023 09:22:46 - INFO - __main__ -   Step: 1838, LR: 1.6438709677419357e-06, Loss: 0.24670463800430298
[2023-09-01 09:22:57,290] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1839/1998 [7:28:34<37:19, 14.08s/it]09/01/2023 09:23:00 - INFO - __main__ -   Step: 1839, LR: 1.6335483870967743e-06, Loss: 0.2757055163383484
[2023-09-01 09:23:11,047] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1840/1998 [7:28:48<36:51, 14.00s/it]09/01/2023 09:23:14 - INFO - __main__ -   Step: 1840, LR: 1.623225806451613e-06, Loss: 0.3526885211467743
[2023-09-01 09:23:24,995] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1841/1998 [7:29:02<36:42, 14.03s/it]09/01/2023 09:23:28 - INFO - __main__ -   Step: 1841, LR: 1.6129032258064516e-06, Loss: 0.3019793629646301
[2023-09-01 09:23:38,811] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1842/1998 [7:29:16<36:24, 14.01s/it]09/01/2023 09:23:42 - INFO - __main__ -   Step: 1842, LR: 1.6025806451612904e-06, Loss: 0.26909250020980835
[2023-09-01 09:23:53,341] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1843/1998 [7:29:30<36:04, 13.96s/it]09/01/2023 09:23:55 - INFO - __main__ -   Step: 1843, LR: 1.5922580645161293e-06, Loss: 0.2551490366458893
[2023-09-01 09:24:07,894] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1844/1998 [7:29:45<36:27, 14.20s/it]09/01/2023 09:24:10 - INFO - __main__ -   Step: 1844, LR: 1.5819354838709677e-06, Loss: 0.3728072941303253
[2023-09-01 09:24:21,863] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1845/1998 [7:29:59<36:24, 14.28s/it]09/01/2023 09:24:25 - INFO - __main__ -   Step: 1845, LR: 1.5716129032258065e-06, Loss: 0.28129640221595764
[2023-09-01 09:24:36,423] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1846/1998 [7:30:14<36:28, 14.40s/it]09/01/2023 09:24:39 - INFO - __main__ -   Step: 1846, LR: 1.5612903225806454e-06, Loss: 0.333340048789978
[2023-09-01 09:24:51,059] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1847/1998 [7:30:28<36:25, 14.47s/it]09/01/2023 09:24:54 - INFO - __main__ -   Step: 1847, LR: 1.550967741935484e-06, Loss: 0.2464609295129776
[2023-09-01 09:25:05,344] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 92%|█████████▏| 1848/1998 [7:30:43<35:58, 14.39s/it]09/01/2023 09:25:08 - INFO - __main__ -   Step: 1848, LR: 1.5406451612903228e-06, Loss: 0.370078444480896
[2023-09-01 09:25:19,629] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1849/1998 [7:30:57<35:51, 14.44s/it]09/01/2023 09:25:23 - INFO - __main__ -   Step: 1849, LR: 1.5303225806451612e-06, Loss: 0.25172269344329834
[2023-09-01 09:25:34,118] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1850/1998 [7:31:11<35:18, 14.32s/it]09/01/2023 09:25:37 - INFO - __main__ -   Step: 1850, LR: 1.52e-06, Loss: 0.2904258370399475
[2023-09-01 09:25:47,148] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1851/1998 [7:31:24<34:01, 13.89s/it]09/01/2023 09:25:50 - INFO - __main__ -   Step: 1851, LR: 1.5096774193548389e-06, Loss: 0.2722621262073517
[2023-09-01 09:26:01,583] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1852/1998 [7:31:39<34:12, 14.06s/it]09/01/2023 09:26:04 - INFO - __main__ -   Step: 1852, LR: 1.4993548387096777e-06, Loss: 0.350341796875
[2023-09-01 09:26:15,185] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1853/1998 [7:31:52<33:37, 13.91s/it]09/01/2023 09:26:18 - INFO - __main__ -   Step: 1853, LR: 1.4890322580645161e-06, Loss: 0.3699296712875366
[2023-09-01 09:26:29,305] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1854/1998 [7:32:07<33:53, 14.12s/it]09/01/2023 09:26:32 - INFO - __main__ -   Step: 1854, LR: 1.478709677419355e-06, Loss: 0.255615770816803
[2023-09-01 09:26:44,965] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1855/1998 [7:32:22<34:46, 14.59s/it]09/01/2023 09:26:48 - INFO - __main__ -   Step: 1855, LR: 1.4683870967741936e-06, Loss: 0.3167734742164612
[2023-09-01 09:26:59,513] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1856/1998 [7:32:37<34:27, 14.56s/it]09/01/2023 09:27:02 - INFO - __main__ -   Step: 1856, LR: 1.4580645161290324e-06, Loss: 0.31318947672843933
[2023-09-01 09:27:14,519] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1857/1998 [7:32:51<34:03, 14.49s/it]09/01/2023 09:27:17 - INFO - __main__ -   Step: 1857, LR: 1.4477419354838713e-06, Loss: 0.31530290842056274
[2023-09-01 09:27:27,722] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1858/1998 [7:33:04<32:53, 14.10s/it]09/01/2023 09:27:30 - INFO - __main__ -   Step: 1858, LR: 1.4374193548387097e-06, Loss: 0.23473957180976868
[2023-09-01 09:27:42,325] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1859/1998 [7:33:19<33:16, 14.36s/it]09/01/2023 09:27:45 - INFO - __main__ -   Step: 1859, LR: 1.4270967741935485e-06, Loss: 0.2649078071117401
[2023-09-01 09:27:57,273] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1860/1998 [7:33:35<33:37, 14.62s/it]09/01/2023 09:28:00 - INFO - __main__ -   Step: 1860, LR: 1.4167741935483871e-06, Loss: 0.29177677631378174
[2023-09-01 09:28:11,271] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1861/1998 [7:33:48<32:47, 14.36s/it]09/01/2023 09:28:14 - INFO - __main__ -   Step: 1861, LR: 1.406451612903226e-06, Loss: 0.27496248483657837
[2023-09-01 09:28:26,114] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1862/1998 [7:34:03<32:48, 14.47s/it]09/01/2023 09:28:29 - INFO - __main__ -   Step: 1862, LR: 1.3961290322580646e-06, Loss: 0.3297017812728882
[2023-09-01 09:28:39,944] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1863/1998 [7:34:17<32:27, 14.42s/it]09/01/2023 09:28:43 - INFO - __main__ -   Step: 1863, LR: 1.3858064516129032e-06, Loss: 0.29064875841140747
[2023-09-01 09:28:54,914] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1864/1998 [7:34:32<32:26, 14.52s/it]09/01/2023 09:28:58 - INFO - __main__ -   Step: 1864, LR: 1.375483870967742e-06, Loss: 0.28597304224967957
[2023-09-01 09:29:09,572] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1865/1998 [7:34:47<32:02, 14.46s/it]09/01/2023 09:29:12 - INFO - __main__ -   Step: 1865, LR: 1.365161290322581e-06, Loss: 0.2618204951286316
[2023-09-01 09:29:23,131] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1866/1998 [7:35:00<31:22, 14.26s/it]09/01/2023 09:29:26 - INFO - __main__ -   Step: 1866, LR: 1.3548387096774195e-06, Loss: 0.3520374298095703
[2023-09-01 09:29:37,705] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1867/1998 [7:35:15<31:33, 14.46s/it]09/01/2023 09:29:41 - INFO - __main__ -   Step: 1867, LR: 1.3445161290322581e-06, Loss: 0.26872944831848145
[2023-09-01 09:29:51,870] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 93%|█████████▎| 1868/1998 [7:35:29<30:56, 14.28s/it]09/01/2023 09:29:55 - INFO - __main__ -   Step: 1868, LR: 1.3341935483870968e-06, Loss: 0.2651788294315338
[2023-09-01 09:30:05,700] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▎| 1869/1998 [7:35:43<30:38, 14.25s/it]09/01/2023 09:30:09 - INFO - __main__ -   Step: 1869, LR: 1.3238709677419356e-06, Loss: 0.30791985988616943
[2023-09-01 09:30:20,229] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▎| 1870/1998 [7:35:58<30:27, 14.28s/it]09/01/2023 09:30:23 - INFO - __main__ -   Step: 1870, LR: 1.3135483870967744e-06, Loss: 0.27526694536209106
[2023-09-01 09:30:35,455] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▎| 1871/1998 [7:36:12<30:26, 14.38s/it]09/01/2023 09:30:38 - INFO - __main__ -   Step: 1871, LR: 1.3032258064516129e-06, Loss: 0.2779795527458191
[2023-09-01 09:30:48,841] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▎| 1872/1998 [7:36:26<29:50, 14.21s/it]09/01/2023 09:30:52 - INFO - __main__ -   Step: 1872, LR: 1.2929032258064517e-06, Loss: 0.31182006001472473
[2023-09-01 09:31:02,919] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▎| 1873/1998 [7:36:40<29:37, 14.22s/it]09/01/2023 09:31:06 - INFO - __main__ -   Step: 1873, LR: 1.2825806451612905e-06, Loss: 0.3035435676574707
[2023-09-01 09:31:17,434] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1874/1998 [7:36:55<29:29, 14.27s/it]09/01/2023 09:31:20 - INFO - __main__ -   Step: 1874, LR: 1.2722580645161292e-06, Loss: 0.36599522829055786
[2023-09-01 09:31:31,555] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1875/1998 [7:37:09<29:11, 14.24s/it]09/01/2023 09:31:34 - INFO - __main__ -   Step: 1875, LR: 1.261935483870968e-06, Loss: 0.3022192418575287
[2023-09-01 09:31:44,967] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1876/1998 [7:37:22<28:22, 13.96s/it]09/01/2023 09:31:48 - INFO - __main__ -   Step: 1876, LR: 1.2516129032258064e-06, Loss: 0.26792651414871216
[2023-09-01 09:31:58,593] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1877/1998 [7:37:36<28:05, 13.93s/it]09/01/2023 09:32:02 - INFO - __main__ -   Step: 1877, LR: 1.2412903225806452e-06, Loss: 0.28531938791275024
[2023-09-01 09:32:12,868] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1878/1998 [7:37:50<28:07, 14.06s/it]09/01/2023 09:32:16 - INFO - __main__ -   Step: 1878, LR: 1.230967741935484e-06, Loss: 0.2701665759086609
[2023-09-01 09:32:27,196] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1879/1998 [7:38:04<27:29, 13.86s/it]09/01/2023 09:32:29 - INFO - __main__ -   Step: 1879, LR: 1.2206451612903227e-06, Loss: 0.2801871597766876
[2023-09-01 09:32:40,967] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1880/1998 [7:38:20<28:30, 14.50s/it]09/01/2023 09:32:45 - INFO - __main__ -   Step: 1880, LR: 1.2103225806451613e-06, Loss: 0.2856888771057129
[2023-09-01 09:32:57,865] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1881/1998 [7:38:35<28:47, 14.77s/it]09/01/2023 09:33:01 - INFO - __main__ -   Step: 1881, LR: 1.2000000000000002e-06, Loss: 0.2912357449531555
[2023-09-01 09:33:11,619] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1882/1998 [7:38:48<27:40, 14.31s/it]09/01/2023 09:33:14 - INFO - __main__ -   Step: 1882, LR: 1.1896774193548388e-06, Loss: 0.2972765266895294
[2023-09-01 09:33:25,618] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1883/1998 [7:39:03<27:26, 14.32s/it]09/01/2023 09:33:28 - INFO - __main__ -   Step: 1883, LR: 1.1793548387096774e-06, Loss: 0.23403744399547577
[2023-09-01 09:33:39,555] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1884/1998 [7:39:17<26:59, 14.21s/it]09/01/2023 09:33:42 - INFO - __main__ -   Step: 1884, LR: 1.1690322580645162e-06, Loss: 0.3100367784500122
[2023-09-01 09:33:52,919] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1885/1998 [7:39:30<26:07, 13.87s/it]09/01/2023 09:33:55 - INFO - __main__ -   Step: 1885, LR: 1.158709677419355e-06, Loss: 0.2600034475326538
[2023-09-01 09:34:07,343] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1886/1998 [7:39:44<26:14, 14.05s/it]09/01/2023 09:34:10 - INFO - __main__ -   Step: 1886, LR: 1.1483870967741937e-06, Loss: 0.2903529405593872
[2023-09-01 09:34:22,206] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1887/1998 [7:40:00<26:40, 14.42s/it]09/01/2023 09:34:25 - INFO - __main__ -   Step: 1887, LR: 1.1380645161290323e-06, Loss: 0.3627283573150635
[2023-09-01 09:34:36,918] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 94%|█████████▍| 1888/1998 [7:40:14<26:27, 14.43s/it]09/01/2023 09:34:40 - INFO - __main__ -   Step: 1888, LR: 1.127741935483871e-06, Loss: 0.2869579792022705
[2023-09-01 09:34:50,081] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1889/1998 [7:40:27<25:34, 14.08s/it]09/01/2023 09:34:53 - INFO - __main__ -   Step: 1889, LR: 1.1174193548387098e-06, Loss: 0.25119948387145996
[2023-09-01 09:35:04,040] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1890/1998 [7:40:42<25:32, 14.19s/it]09/01/2023 09:35:07 - INFO - __main__ -   Step: 1890, LR: 1.1070967741935484e-06, Loss: 0.2544146776199341
[2023-09-01 09:35:18,419] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1891/1998 [7:40:55<24:55, 13.97s/it]09/01/2023 09:35:21 - INFO - __main__ -   Step: 1891, LR: 1.0967741935483872e-06, Loss: 0.32201576232910156
[2023-09-01 09:35:31,280] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1892/1998 [7:41:08<24:07, 13.66s/it]09/01/2023 09:35:34 - INFO - __main__ -   Step: 1892, LR: 1.0864516129032259e-06, Loss: 0.2724619507789612
[2023-09-01 09:35:44,350] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1893/1998 [7:41:22<23:50, 13.63s/it]09/01/2023 09:35:47 - INFO - __main__ -   Step: 1893, LR: 1.0761290322580647e-06, Loss: 0.3067687153816223
[2023-09-01 09:35:58,398] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1894/1998 [7:41:36<23:45, 13.70s/it]09/01/2023 09:36:01 - INFO - __main__ -   Step: 1894, LR: 1.0658064516129033e-06, Loss: 0.3012056350708008
[2023-09-01 09:36:12,484] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1895/1998 [7:41:50<23:41, 13.80s/it]09/01/2023 09:36:15 - INFO - __main__ -   Step: 1895, LR: 1.055483870967742e-06, Loss: 0.2995256781578064
[2023-09-01 09:36:27,310] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1896/1998 [7:42:04<24:01, 14.13s/it]09/01/2023 09:36:30 - INFO - __main__ -   Step: 1896, LR: 1.0451612903225808e-06, Loss: 0.29130321741104126
[2023-09-01 09:36:42,438] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1897/1998 [7:42:19<24:09, 14.35s/it]09/01/2023 09:36:45 - INFO - __main__ -   Step: 1897, LR: 1.0348387096774194e-06, Loss: 0.32034382224082947
[2023-09-01 09:36:56,965] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▍| 1898/1998 [7:42:34<24:11, 14.52s/it]09/01/2023 09:37:00 - INFO - __main__ -   Step: 1898, LR: 1.0245161290322582e-06, Loss: 0.3703196048736572
[2023-09-01 09:37:12,674] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1899/1998 [7:42:50<24:47, 15.02s/it]09/01/2023 09:37:16 - INFO - __main__ -   Step: 1899, LR: 1.0141935483870969e-06, Loss: 0.2642805576324463
[2023-09-01 09:37:27,237] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1900/1998 [7:43:04<23:56, 14.66s/it]09/01/2023 09:37:30 - INFO - __main__ -   Step: 1900, LR: 1.0038709677419355e-06, Loss: 0.2879793047904968
09/01/2023 09:37:30 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900
09/01/2023 09:37:30 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 09:37:30,268] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 09:37:30,274] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 09:37:30,275] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 09:37:30,275] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 09:37:30,275] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 09:37:30,276] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 09:37:30,276] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 09:37:30,289] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 09:37:30,289] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 09:37:30,289] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 09:37:30,290] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 09:37:30,291] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
[2023-09-01 09:37:30,291] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 09:37:30,291] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 09:37:30,291] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 09:38:27,758] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 09:38:27,758] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 09:38:31,020] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 09:38:31,020] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 09:38:33,916] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 09:38:33,917] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 09:38:34,519] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 09:38:34,519] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 09:38:34,523] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 09:38:34,523] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 09:38:34,523] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 09:38:34,524] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 09:38:34 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/pytorch_model
09/01/2023 09:38:34 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/scheduler.bin
09/01/2023 09:38:34 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/step_1900/random_states_0.pkl
09/01/2023 09:38:34 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:38,  5.91it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:45,  4.90it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:57,  3.93it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:01,  3.65it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.75it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.47it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.46it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.67it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.82it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:55,  3.90it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:53,  4.04it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:51,  4.12it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:51,  4.16it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:50,  4.23it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.25it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:49,  4.26it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.22it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.02it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.92it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.02it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.12it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:49,  4.15it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.18it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  3.99it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.62it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.80it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.65it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.85it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  4.00it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.86it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  4.01it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.91it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.71it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.81it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.97it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:47,  4.04it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:49,  3.78it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:47,  3.92it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.01it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.09it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.08it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.81it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.52it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.70it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.56it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.45it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.48it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:51,  3.43it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.56it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.42it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.45it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.40it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:47,  3.59it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.75it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.59it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:44,  3.79it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.84it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:43,  3.88it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  3.98it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:41,  4.02it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.08it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.11it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:39,  4.15it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.16it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:38,  4.19it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.16it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.21it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  3.97it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.85it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.80it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.91it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.04it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.13it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.83it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:38,  3.94it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.60it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.70it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.79it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.85it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.92it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.98it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:35,  4.06it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.94it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.93it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.97it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  3.98it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.07it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:33,  4.12it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.08it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.12it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:32,  4.17it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:33,  4.01it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:32,  4.12it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:33,  3.86it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.89it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  4.00it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:31,  4.01it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  3.99it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:31,  4.06it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.08it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.14it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.17it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:29,  4.19it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.18it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.81it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.91it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.01it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.10it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.74it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:29,  3.92it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:28,  4.02it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.88it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  3.99it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:27,  4.04it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.05it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:26,  4.13it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.18it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.21it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.25it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.29it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.31it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:32<00:23,  4.29it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.32it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.88it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.61it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.81it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.94it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.96it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.09it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:23,  3.93it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.07it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.96it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.10it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:35<00:21,  4.12it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.21it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.24it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.29it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:36<00:20,  4.27it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.29it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.34it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:18,  4.37it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.34it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.37it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:18,  4.38it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.40it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.39it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:38<00:17,  4.39it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.34it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:17,  4.38it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.36it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:17,  4.29it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.83it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  3.96it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:17,  4.08it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:40<00:16,  4.18it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:16,  4.23it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.25it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.31it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:15,  4.32it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:41<00:14,  4.35it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.38it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:14,  4.40it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.41it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:42<00:13,  4.41it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.38it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:14,  4.14it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.23it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:43<00:13,  4.25it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.31it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.31it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.11it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:44<00:13,  3.83it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.94it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.08it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.17it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:45<00:12,  3.99it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.11it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.20it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.28it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.30it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:46<00:10,  4.27it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.31it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.12it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.10it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:47<00:09,  4.19it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.25it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.30it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.10it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:48<00:08,  4.18it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:08,  4.22it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.16it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.22it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:49<00:07,  4.29it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:49<00:06,  4.30it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.35it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.39it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  3.97it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:50<00:06,  4.07it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.17it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.25it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.31it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:51<00:05,  4.34it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.38it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.41it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.43it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:52<00:04,  4.41it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:52<00:03,  4.38it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.40it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.16it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.21it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:53<00:03,  4.25it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.28it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.30it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.33it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:54<00:02,  4.33it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.25it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.30it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.33it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:55<00:01,  4.35it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:55<00:00,  4.39it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.40it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.40it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.42it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:56<00:00,  4.41it/s][A09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 09:39:31 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 09:39:32 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.97it/s]
09/01/2023 09:39:32 - INFO - __main__ -   Step: 1900, Validation Metrics: {'accuracy': 0.7887232663642255, 'f1_micro': 0.7887232663642255, 'f1_macro': 0.4602334744553045, 'f1_weighted': 0.7594916598112679, 'f1_1': 0.8778320258928082, 'f1_-1': 0.3625592417061611, 'f1_0': 0.1403091557669441, 'precision_micro': 0.7887232663642255, 'precision_macro': 0.5326056201721308, 'precision_weighted': 0.7471917286053451, 'precision_1': 0.8305823730924945, 'precision_-1': 0.4751552795031056, 'precision_0': 0.29207920792079206, 'recall_micro': 0.7887232663642255, 'recall_macro': 0.4387389918738744, 'recall_weighted': 0.7887232663642255, 'recall_1': 0.9307817589576547, 'recall_-1': 0.29310344827586204, 'recall_0': 0.09233176838810642}
[2023-09-01 09:39:42,810] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1901/1998 [7:45:20<1:22:37, 51.11s/it]09/01/2023 09:39:46 - INFO - __main__ -   Step: 1901, LR: 9.935483870967743e-07, Loss: 0.2880507707595825
[2023-09-01 09:39:56,775] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1902/1998 [7:45:33<1:03:29, 39.68s/it]09/01/2023 09:39:59 - INFO - __main__ -   Step: 1902, LR: 9.83225806451613e-07, Loss: 0.36273568868637085
[2023-09-01 09:40:10,818] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1903/1998 [7:45:48<51:05, 32.26s/it]  09/01/2023 09:40:14 - INFO - __main__ -   Step: 1903, LR: 9.729032258064516e-07, Loss: 0.298922061920166
[2023-09-01 09:40:26,587] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1904/1998 [7:46:05<43:00, 27.45s/it]09/01/2023 09:40:30 - INFO - __main__ -   Step: 1904, LR: 9.625806451612904e-07, Loss: 0.32718077301979065
[2023-09-01 09:40:40,983] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1905/1998 [7:46:18<35:57, 23.20s/it]09/01/2023 09:40:43 - INFO - __main__ -   Step: 1905, LR: 9.522580645161291e-07, Loss: 0.22525592148303986
[2023-09-01 09:40:55,724] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1906/1998 [7:46:32<31:37, 20.63s/it]09/01/2023 09:40:58 - INFO - __main__ -   Step: 1906, LR: 9.419354838709678e-07, Loss: 0.3447427749633789
[2023-09-01 09:41:10,231] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1907/1998 [7:46:47<28:29, 18.79s/it]09/01/2023 09:41:13 - INFO - __main__ -   Step: 1907, LR: 9.316129032258066e-07, Loss: 0.3363201916217804
[2023-09-01 09:41:24,643] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 95%|█████████▌| 1908/1998 [7:47:02<26:28, 17.65s/it]09/01/2023 09:41:28 - INFO - __main__ -   Step: 1908, LR: 9.212903225806452e-07, Loss: 0.33033841848373413
[2023-09-01 09:41:39,532] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1909/1998 [7:47:17<24:48, 16.72s/it]09/01/2023 09:41:42 - INFO - __main__ -   Step: 1909, LR: 9.10967741935484e-07, Loss: 0.2603999078273773
[2023-09-01 09:41:53,119] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1910/1998 [7:47:30<23:05, 15.75s/it]09/01/2023 09:41:56 - INFO - __main__ -   Step: 1910, LR: 9.006451612903226e-07, Loss: 0.33907926082611084
[2023-09-01 09:42:06,444] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1911/1998 [7:47:44<21:56, 15.13s/it]09/01/2023 09:42:09 - INFO - __main__ -   Step: 1911, LR: 8.903225806451614e-07, Loss: 0.2853297293186188
[2023-09-01 09:42:20,815] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1912/1998 [7:47:58<21:08, 14.75s/it]09/01/2023 09:42:23 - INFO - __main__ -   Step: 1912, LR: 8.8e-07, Loss: 0.25112152099609375
[2023-09-01 09:42:34,179] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1913/1998 [7:48:11<20:26, 14.42s/it]09/01/2023 09:42:37 - INFO - __main__ -   Step: 1913, LR: 8.696774193548388e-07, Loss: 0.2392725646495819
[2023-09-01 09:42:49,185] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1914/1998 [7:48:26<20:23, 14.57s/it]09/01/2023 09:42:52 - INFO - __main__ -   Step: 1914, LR: 8.593548387096774e-07, Loss: 0.3410799205303192
[2023-09-01 09:43:03,161] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1915/1998 [7:48:40<19:54, 14.40s/it]09/01/2023 09:43:06 - INFO - __main__ -   Step: 1915, LR: 8.490322580645162e-07, Loss: 0.27836716175079346
[2023-09-01 09:43:16,595] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1916/1998 [7:48:53<19:14, 14.08s/it]09/01/2023 09:43:19 - INFO - __main__ -   Step: 1916, LR: 8.38709677419355e-07, Loss: 0.30938395857810974
[2023-09-01 09:43:28,899] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1917/1998 [7:49:06<18:21, 13.60s/it]09/01/2023 09:43:31 - INFO - __main__ -   Step: 1917, LR: 8.283870967741936e-07, Loss: 0.2644793391227722
[2023-09-01 09:43:42,665] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1918/1998 [7:49:20<18:17, 13.72s/it]09/01/2023 09:43:45 - INFO - __main__ -   Step: 1918, LR: 8.180645161290323e-07, Loss: 0.306098073720932
[2023-09-01 09:43:57,531] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1919/1998 [7:49:35<18:26, 14.00s/it]09/01/2023 09:44:00 - INFO - __main__ -   Step: 1919, LR: 8.07741935483871e-07, Loss: 0.2652759253978729
[2023-09-01 09:44:11,262] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1920/1998 [7:49:48<18:00, 13.85s/it]09/01/2023 09:44:14 - INFO - __main__ -   Step: 1920, LR: 7.974193548387098e-07, Loss: 0.29345422983169556
[2023-09-01 09:44:25,715] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1921/1998 [7:50:03<18:10, 14.17s/it]09/01/2023 09:44:29 - INFO - __main__ -   Step: 1921, LR: 7.870967741935484e-07, Loss: 0.3103479743003845
[2023-09-01 09:44:39,759] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1922/1998 [7:50:17<17:47, 14.05s/it]09/01/2023 09:44:42 - INFO - __main__ -   Step: 1922, LR: 7.767741935483871e-07, Loss: 0.2556590139865875
[2023-09-01 09:44:53,954] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▌| 1923/1998 [7:50:31<17:34, 14.06s/it]09/01/2023 09:44:56 - INFO - __main__ -   Step: 1923, LR: 7.664516129032259e-07, Loss: 0.29084569215774536
[2023-09-01 09:45:08,486] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▋| 1924/1998 [7:50:46<17:36, 14.27s/it]09/01/2023 09:45:11 - INFO - __main__ -   Step: 1924, LR: 7.561290322580646e-07, Loss: 0.40540987253189087
[2023-09-01 09:45:22,320] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▋| 1925/1998 [7:51:00<17:17, 14.21s/it]09/01/2023 09:45:25 - INFO - __main__ -   Step: 1925, LR: 7.458064516129033e-07, Loss: 0.25971275568008423
[2023-09-01 09:45:36,244] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▋| 1926/1998 [7:51:14<17:10, 14.31s/it]09/01/2023 09:45:40 - INFO - __main__ -   Step: 1926, LR: 7.354838709677419e-07, Loss: 0.27899080514907837
[2023-09-01 09:45:50,589] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▋| 1927/1998 [7:51:28<16:39, 14.08s/it]09/01/2023 09:45:53 - INFO - __main__ -   Step: 1927, LR: 7.251612903225808e-07, Loss: 0.3163143992424011
[2023-09-01 09:46:04,620] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 96%|█████████▋| 1928/1998 [7:51:41<16:10, 13.86s/it]09/01/2023 09:46:07 - INFO - __main__ -   Step: 1928, LR: 7.148387096774194e-07, Loss: 0.2978840470314026
[2023-09-01 09:46:18,235] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1929/1998 [7:51:56<16:08, 14.03s/it]09/01/2023 09:46:21 - INFO - __main__ -   Step: 1929, LR: 7.045161290322581e-07, Loss: 0.2739800810813904
[2023-09-01 09:46:33,026] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1930/1998 [7:52:10<15:55, 14.05s/it]09/01/2023 09:46:35 - INFO - __main__ -   Step: 1930, LR: 6.941935483870968e-07, Loss: 0.2878130078315735
[2023-09-01 09:46:46,687] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1931/1998 [7:52:24<15:41, 14.05s/it]09/01/2023 09:46:49 - INFO - __main__ -   Step: 1931, LR: 6.838709677419356e-07, Loss: 0.3377675712108612
[2023-09-01 09:47:00,893] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1932/1998 [7:52:38<15:24, 14.02s/it]09/01/2023 09:47:03 - INFO - __main__ -   Step: 1932, LR: 6.735483870967742e-07, Loss: 0.2914818227291107
[2023-09-01 09:47:13,680] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1933/1998 [7:52:51<14:55, 13.78s/it]09/01/2023 09:47:16 - INFO - __main__ -   Step: 1933, LR: 6.63225806451613e-07, Loss: 0.25724613666534424
[2023-09-01 09:47:28,221] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1934/1998 [7:53:05<14:50, 13.91s/it]09/01/2023 09:47:31 - INFO - __main__ -   Step: 1934, LR: 6.529032258064516e-07, Loss: 0.3065783381462097
[2023-09-01 09:47:41,684] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1935/1998 [7:53:19<14:32, 13.84s/it]09/01/2023 09:47:44 - INFO - __main__ -   Step: 1935, LR: 6.425806451612904e-07, Loss: 0.2752699851989746
[2023-09-01 09:47:55,846] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1936/1998 [7:53:33<14:17, 13.84s/it]09/01/2023 09:47:58 - INFO - __main__ -   Step: 1936, LR: 6.322580645161291e-07, Loss: 0.29720473289489746
[2023-09-01 09:48:09,163] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1937/1998 [7:53:46<14:02, 13.81s/it]09/01/2023 09:48:12 - INFO - __main__ -   Step: 1937, LR: 6.219354838709678e-07, Loss: 0.2694430649280548
[2023-09-01 09:48:23,569] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1938/1998 [7:54:01<13:59, 14.00s/it]09/01/2023 09:48:26 - INFO - __main__ -   Step: 1938, LR: 6.116129032258065e-07, Loss: 0.39201977849006653
[2023-09-01 09:48:37,348] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1939/1998 [7:54:15<13:41, 13.93s/it]09/01/2023 09:48:40 - INFO - __main__ -   Step: 1939, LR: 6.012903225806452e-07, Loss: 0.33862727880477905
[2023-09-01 09:48:51,112] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1940/1998 [7:54:28<13:23, 13.85s/it]09/01/2023 09:48:54 - INFO - __main__ -   Step: 1940, LR: 5.90967741935484e-07, Loss: 0.2844346761703491
[2023-09-01 09:49:05,141] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1941/1998 [7:54:43<13:19, 14.02s/it]09/01/2023 09:49:08 - INFO - __main__ -   Step: 1941, LR: 5.806451612903227e-07, Loss: 0.2976893186569214
[2023-09-01 09:49:19,406] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1942/1998 [7:54:56<12:53, 13.81s/it]09/01/2023 09:49:21 - INFO - __main__ -   Step: 1942, LR: 5.703225806451613e-07, Loss: 0.24232301115989685
[2023-09-01 09:49:33,221] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1943/1998 [7:55:11<12:52, 14.04s/it]09/01/2023 09:49:36 - INFO - __main__ -   Step: 1943, LR: 5.6e-07, Loss: 0.2931743264198303
[2023-09-01 09:49:47,488] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1944/1998 [7:55:24<12:32, 13.94s/it]09/01/2023 09:49:50 - INFO - __main__ -   Step: 1944, LR: 5.496774193548388e-07, Loss: 0.2818734049797058
[2023-09-01 09:50:00,489] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1945/1998 [7:55:38<12:10, 13.79s/it]09/01/2023 09:50:03 - INFO - __main__ -   Step: 1945, LR: 5.393548387096775e-07, Loss: 0.26513463258743286
[2023-09-01 09:50:14,758] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1946/1998 [7:55:53<12:17, 14.17s/it]09/01/2023 09:50:18 - INFO - __main__ -   Step: 1946, LR: 5.290322580645161e-07, Loss: 0.3252125382423401
[2023-09-01 09:50:30,182] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1947/1998 [7:56:07<12:10, 14.33s/it]09/01/2023 09:50:33 - INFO - __main__ -   Step: 1947, LR: 5.187096774193549e-07, Loss: 0.2661133408546448
[2023-09-01 09:50:44,349] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 97%|█████████▋| 1948/1998 [7:56:21<11:43, 14.07s/it]09/01/2023 09:50:46 - INFO - __main__ -   Step: 1948, LR: 5.083870967741936e-07, Loss: 0.35886865854263306
[2023-09-01 09:50:58,034] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1949/1998 [7:56:35<11:28, 14.06s/it]09/01/2023 09:51:00 - INFO - __main__ -   Step: 1949, LR: 4.980645161290323e-07, Loss: 0.20218847692012787
[2023-09-01 09:51:12,294] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1950/1998 [7:56:49<11:16, 14.09s/it]09/01/2023 09:51:15 - INFO - __main__ -   Step: 1950, LR: 4.87741935483871e-07, Loss: 0.3073054850101471
[2023-09-01 09:51:25,100] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1951/1998 [7:57:02<10:44, 13.71s/it]09/01/2023 09:51:27 - INFO - __main__ -   Step: 1951, LR: 4.774193548387098e-07, Loss: 0.30367040634155273
[2023-09-01 09:51:39,094] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1952/1998 [7:57:16<10:33, 13.78s/it]09/01/2023 09:51:41 - INFO - __main__ -   Step: 1952, LR: 4.6709677419354845e-07, Loss: 0.23853060603141785
[2023-09-01 09:51:52,072] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1953/1998 [7:57:29<10:12, 13.60s/it]09/01/2023 09:51:55 - INFO - __main__ -   Step: 1953, LR: 4.567741935483871e-07, Loss: 0.287555992603302
[2023-09-01 09:52:05,063] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1954/1998 [7:57:43<09:57, 13.59s/it]09/01/2023 09:52:08 - INFO - __main__ -   Step: 1954, LR: 4.4645161290322586e-07, Loss: 0.31275033950805664
[2023-09-01 09:52:19,157] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1955/1998 [7:57:57<09:48, 13.69s/it]09/01/2023 09:52:22 - INFO - __main__ -   Step: 1955, LR: 4.3612903225806453e-07, Loss: 0.2604956030845642
[2023-09-01 09:52:34,036] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1956/1998 [7:58:11<09:47, 13.98s/it]09/01/2023 09:52:37 - INFO - __main__ -   Step: 1956, LR: 4.2580645161290326e-07, Loss: 0.26799529790878296
[2023-09-01 09:52:48,575] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1957/1998 [7:58:25<09:37, 14.07s/it]09/01/2023 09:52:51 - INFO - __main__ -   Step: 1957, LR: 4.1548387096774194e-07, Loss: 0.3436039388179779
[2023-09-01 09:53:02,601] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1958/1998 [7:58:39<09:17, 13.93s/it]09/01/2023 09:53:05 - INFO - __main__ -   Step: 1958, LR: 4.0516129032258067e-07, Loss: 0.37890690565109253
[2023-09-01 09:53:16,196] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1959/1998 [7:58:53<09:00, 13.87s/it]09/01/2023 09:53:18 - INFO - __main__ -   Step: 1959, LR: 3.9483870967741935e-07, Loss: 0.27749067544937134
[2023-09-01 09:53:29,550] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1960/1998 [7:59:07<08:46, 13.86s/it]09/01/2023 09:53:32 - INFO - __main__ -   Step: 1960, LR: 3.8451612903225813e-07, Loss: 0.3045542240142822
[2023-09-01 09:53:41,787] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1961/1998 [7:59:19<08:17, 13.45s/it]09/01/2023 09:53:45 - INFO - __main__ -   Step: 1961, LR: 3.741935483870968e-07, Loss: 0.2831987738609314
[2023-09-01 09:53:55,942] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1962/1998 [7:59:33<08:08, 13.57s/it]09/01/2023 09:53:59 - INFO - __main__ -   Step: 1962, LR: 3.6387096774193554e-07, Loss: 0.28602325916290283
[2023-09-01 09:54:09,083] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1963/1998 [7:59:46<07:51, 13.47s/it]09/01/2023 09:54:12 - INFO - __main__ -   Step: 1963, LR: 3.535483870967742e-07, Loss: 0.2863520383834839
[2023-09-01 09:54:23,930] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1964/1998 [8:00:01<07:47, 13.75s/it]09/01/2023 09:54:26 - INFO - __main__ -   Step: 1964, LR: 3.4322580645161294e-07, Loss: 0.2533038556575775
[2023-09-01 09:54:37,257] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1965/1998 [8:00:15<07:38, 13.88s/it]09/01/2023 09:54:40 - INFO - __main__ -   Step: 1965, LR: 3.329032258064516e-07, Loss: 0.31794828176498413
[2023-09-01 09:54:51,715] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1966/1998 [8:00:28<07:20, 13.76s/it]09/01/2023 09:54:54 - INFO - __main__ -   Step: 1966, LR: 3.2258064516129035e-07, Loss: 0.35943958163261414
[2023-09-01 09:55:05,780] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1967/1998 [8:00:43<07:12, 13.96s/it]09/01/2023 09:55:08 - INFO - __main__ -   Step: 1967, LR: 3.1225806451612903e-07, Loss: 0.234345942735672
[2023-09-01 09:55:19,118] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 98%|█████████▊| 1968/1998 [8:00:56<06:57, 13.90s/it]09/01/2023 09:55:22 - INFO - __main__ -   Step: 1968, LR: 3.0193548387096776e-07, Loss: 0.27204930782318115
[2023-09-01 09:55:33,809] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▊| 1969/1998 [8:01:11<06:50, 14.16s/it]09/01/2023 09:55:37 - INFO - __main__ -   Step: 1969, LR: 2.916129032258065e-07, Loss: 0.3303111791610718
[2023-09-01 09:55:48,973] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▊| 1970/1998 [8:01:26<06:44, 14.44s/it]09/01/2023 09:55:52 - INFO - __main__ -   Step: 1970, LR: 2.8129032258064516e-07, Loss: 0.2529222071170807
[2023-09-01 09:56:03,838] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▊| 1971/1998 [8:01:41<06:32, 14.54s/it]09/01/2023 09:56:07 - INFO - __main__ -   Step: 1971, LR: 2.709677419354839e-07, Loss: 0.2115153819322586
[2023-09-01 09:56:17,397] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▊| 1972/1998 [8:01:54<06:08, 14.16s/it]09/01/2023 09:56:20 - INFO - __main__ -   Step: 1972, LR: 2.6064516129032257e-07, Loss: 0.294269859790802
[2023-09-01 09:56:31,218] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▊| 1973/1998 [8:02:08<05:52, 14.09s/it]09/01/2023 09:56:34 - INFO - __main__ -   Step: 1973, LR: 2.503225806451613e-07, Loss: 0.28488796949386597
[2023-09-01 09:56:45,133] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1974/1998 [8:02:22<05:37, 14.06s/it]09/01/2023 09:56:48 - INFO - __main__ -   Step: 1974, LR: 2.4000000000000003e-07, Loss: 0.2669817805290222
[2023-09-01 09:56:58,463] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1975/1998 [8:02:36<05:18, 13.83s/it]09/01/2023 09:57:01 - INFO - __main__ -   Step: 1975, LR: 2.2967741935483873e-07, Loss: 0.23102131485939026
[2023-09-01 09:57:13,267] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1976/1998 [8:02:50<05:09, 14.05s/it]09/01/2023 09:57:16 - INFO - __main__ -   Step: 1976, LR: 2.1935483870967744e-07, Loss: 0.26821327209472656
[2023-09-01 09:57:28,375] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1977/1998 [8:03:06<05:05, 14.54s/it]09/01/2023 09:57:31 - INFO - __main__ -   Step: 1977, LR: 2.0903225806451614e-07, Loss: 0.34604740142822266
[2023-09-01 09:57:42,587] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1978/1998 [8:03:20<04:46, 14.31s/it]09/01/2023 09:57:45 - INFO - __main__ -   Step: 1978, LR: 1.9870967741935487e-07, Loss: 0.2749041020870209
[2023-09-01 09:57:56,813] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1979/1998 [8:03:33<04:29, 14.18s/it]09/01/2023 09:57:59 - INFO - __main__ -   Step: 1979, LR: 1.8838709677419358e-07, Loss: 0.2753754258155823
[2023-09-01 09:58:11,838] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1980/1998 [8:03:49<04:20, 14.47s/it]09/01/2023 09:58:14 - INFO - __main__ -   Step: 1980, LR: 1.7806451612903228e-07, Loss: 0.2669084966182709
[2023-09-01 09:58:25,342] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1981/1998 [8:04:02<04:02, 14.28s/it]09/01/2023 09:58:28 - INFO - __main__ -   Step: 1981, LR: 1.6774193548387098e-07, Loss: 0.24888409674167633
[2023-09-01 09:58:39,010] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1982/1998 [8:04:16<03:46, 14.16s/it]09/01/2023 09:58:42 - INFO - __main__ -   Step: 1982, LR: 1.5741935483870969e-07, Loss: 0.3115234375
[2023-09-01 09:58:53,882] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1983/1998 [8:04:31<03:32, 14.20s/it]09/01/2023 09:58:56 - INFO - __main__ -   Step: 1983, LR: 1.470967741935484e-07, Loss: 0.2480211704969406
[2023-09-01 09:59:08,045] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1984/1998 [8:04:45<03:19, 14.26s/it]09/01/2023 09:59:11 - INFO - __main__ -   Step: 1984, LR: 1.3677419354838712e-07, Loss: 0.2761898934841156
[2023-09-01 09:59:21,873] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1985/1998 [8:04:59<03:03, 14.11s/it]09/01/2023 09:59:24 - INFO - __main__ -   Step: 1985, LR: 1.2645161290322582e-07, Loss: 0.32706141471862793
[2023-09-01 09:59:35,168] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1986/1998 [8:05:12<02:47, 13.94s/it]09/01/2023 09:59:38 - INFO - __main__ -   Step: 1986, LR: 1.1612903225806454e-07, Loss: 0.292161762714386
[2023-09-01 09:59:49,830] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1987/1998 [8:05:27<02:36, 14.21s/it]09/01/2023 09:59:53 - INFO - __main__ -   Step: 1987, LR: 1.0580645161290323e-07, Loss: 0.3570730686187744
[2023-09-01 10:00:03,983] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 99%|█████████▉| 1988/1998 [8:05:41<02:21, 14.17s/it]09/01/2023 10:00:07 - INFO - __main__ -   Step: 1988, LR: 9.548387096774193e-08, Loss: 0.35849958658218384
[2023-09-01 10:00:17,808] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
100%|█████████▉| 1989/1998 [8:05:55<02:06, 14.04s/it]09/01/2023 10:00:21 - INFO - __main__ -   Step: 1989, LR: 8.516129032258066e-08, Loss: 0.304538369178772
[2023-09-01 10:00:30,925] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
100%|█████████▉| 1990/1998 [8:06:09<01:51, 13.90s/it]09/01/2023 10:00:34 - INFO - __main__ -   Step: 1990, LR: 7.483870967741935e-08, Loss: 0.30348798632621765
[2023-09-01 10:00:47,825] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
100%|█████████▉| 1991/1998 [8:06:25<01:42, 14.71s/it]09/01/2023 10:00:51 - INFO - __main__ -   Step: 1991, LR: 6.451612903225807e-08, Loss: 0.3513607084751129
[2023-09-01 10:01:01,957] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
100%|█████████▉| 1992/1998 [8:06:39<01:26, 14.33s/it]09/01/2023 10:01:04 - INFO - __main__ -   Step: 1992, LR: 5.419354838709678e-08, Loss: 0.24583196640014648
[2023-09-01 10:01:16,123] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
100%|█████████▉| 1993/1998 [8:06:53<01:11, 14.39s/it]09/01/2023 10:01:19 - INFO - __main__ -   Step: 1993, LR: 4.387096774193549e-08, Loss: 0.27585697174072266
[2023-09-01 10:01:29,639] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
100%|█████████▉| 1994/1998 [8:07:06<00:56, 14.02s/it]09/01/2023 10:01:32 - INFO - __main__ -   Step: 1994, LR: 3.3548387096774194e-08, Loss: 0.2532613277435303
[2023-09-01 10:01:43,047] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
100%|█████████▉| 1995/1998 [8:07:20<00:42, 14.06s/it]09/01/2023 10:01:46 - INFO - __main__ -   Step: 1995, LR: 2.3225806451612904e-08, Loss: 0.29166045784950256
[2023-09-01 10:01:57,138] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
100%|█████████▉| 1996/1998 [8:07:34<00:27, 13.98s/it]09/01/2023 10:02:00 - INFO - __main__ -   Step: 1996, LR: 1.2903225806451614e-08, Loss: 0.24513444304466248
[2023-09-01 10:02:10,673] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
100%|█████████▉| 1997/1998 [8:07:47<00:13, 13.72s/it]09/01/2023 10:02:13 - INFO - __main__ -   Step: 1997, LR: 2.580645161290323e-09, Loss: 0.2742665708065033
100%|██████████| 1998/1998 [8:07:55<00:00, 12.03s/it]09/01/2023 10:02:21 - INFO - __main__ -   Step: 1998, LR: 0.0, Loss: 0.19430851936340332
09/01/2023 10:02:21 - INFO - accelerate.accelerator - Saving current state to /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2
09/01/2023 10:02:21 - INFO - accelerate.accelerator - Saving DeepSpeed Model and Optimizer
[2023-09-01 10:02:21,526] [INFO] [logging.py:96:log_dist] [Rank 0] [Torch] Checkpoint pytorch_model is about to be saved!
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/torch/nn/modules/module.py:1802: UserWarning: Positional args are being deprecated, use kwargs instead. Refer to https://pytorch.org/docs/master/generated/torch.nn.Module.html#torch.nn.Module.state_dict for details.
  warnings.warn(
[2023-09-01 10:02:21,532] [INFO] [logging.py:96:log_dist] [Rank 1] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt
[2023-09-01 10:02:21,532] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt...
[2023-09-01 10:02:21,532] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt...
[2023-09-01 10:02:21,532] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt...
[2023-09-01 10:02:21,533] [INFO] [logging.py:96:log_dist] [Rank 0] Saving model checkpoint: /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt
[2023-09-01 10:02:21,533] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt...
[2023-09-01 10:02:21,546] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_1_mp_rank_00_model_states.pt.
[2023-09-01 10:02:21,547] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_3_mp_rank_00_model_states.pt.
[2023-09-01 10:02:21,547] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_2_mp_rank_00_model_states.pt.
[2023-09-01 10:02:21,547] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/zero_pp_rank_0_mp_rank_00_model_states.pt.
[2023-09-01 10:02:21,548] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt...
[2023-09-01 10:02:21,548] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt...
[2023-09-01 10:02:21,548] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt...
[2023-09-01 10:02:21,548] [INFO] [torch_checkpoint_engine.py:21:save] [Torch] Saving /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt...
100%|██████████| 1998/1998 [8:08:14<00:00, 12.03s/it][2023-09-01 10:03:23,597] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt.
[2023-09-01 10:03:23,597] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_1_mp_rank_00_optim_states.pt
[2023-09-01 10:03:25,968] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt.
[2023-09-01 10:03:25,969] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_0_mp_rank_00_optim_states.pt
[2023-09-01 10:03:26,755] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt.
[2023-09-01 10:03:26,755] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_2_mp_rank_00_optim_states.pt
[2023-09-01 10:03:26,861] [INFO] [torch_checkpoint_engine.py:23:save] [Torch] Saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt.
[2023-09-01 10:03:26,861] [INFO] [engine.py:3285:_save_zero_checkpoint] zero checkpoint saved /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model/bf16_zero_pp_rank_3_mp_rank_00_optim_states.pt
[2023-09-01 10:03:26,864] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 10:03:26,865] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 10:03:26,865] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
[2023-09-01 10:03:26,865] [INFO] [torch_checkpoint_engine.py:33:commit] [Torch] Checkpoint pytorch_model is ready now!
09/01/2023 10:03:26 - INFO - accelerate.accelerator - DeepSpeed Model and Optimizer saved to output dir /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/pytorch_model
09/01/2023 10:03:26 - INFO - accelerate.checkpointing - Scheduler state saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/scheduler.bin
09/01/2023 10:03:26 - INFO - accelerate.checkpointing - Random states saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/epoch_2/random_states_0.pkl
09/01/2023 10:03:26 - INFO - __main__ - ***** Running Validation *****

Evaluating:   0%|          | 0/228 [00:00<?, ?it/s][Astep: 0
step: 1

Evaluating:   1%|          | 2/228 [00:00<00:39,  5.77it/s][Astep: 2

Evaluating:   1%|▏         | 3/228 [00:00<00:46,  4.85it/s][Astep: 3

Evaluating:   2%|▏         | 4/228 [00:00<00:57,  3.91it/s][Astep: 4

Evaluating:   2%|▏         | 5/228 [00:01<01:01,  3.64it/s][Astep: 5

Evaluating:   3%|▎         | 6/228 [00:01<00:59,  3.74it/s][Astep: 6

Evaluating:   3%|▎         | 7/228 [00:01<01:03,  3.47it/s][Astep: 7

Evaluating:   4%|▎         | 8/228 [00:02<01:06,  3.29it/s][Astep: 8

Evaluating:   4%|▍         | 9/228 [00:02<01:03,  3.46it/s][Astep: 9

Evaluating:   4%|▍         | 10/228 [00:02<00:59,  3.68it/s][Astep: 10

Evaluating:   5%|▍         | 11/228 [00:02<00:56,  3.83it/s][Astep: 11

Evaluating:   5%|▌         | 12/228 [00:03<00:54,  3.93it/s][Astep: 12

Evaluating:   6%|▌         | 13/228 [00:03<00:52,  4.06it/s][Astep: 13

Evaluating:   6%|▌         | 14/228 [00:03<00:51,  4.13it/s][Astep: 14

Evaluating:   7%|▋         | 15/228 [00:03<00:50,  4.19it/s][Astep: 15

Evaluating:   7%|▋         | 16/228 [00:04<00:49,  4.25it/s][Astep: 16

Evaluating:   7%|▋         | 17/228 [00:04<00:49,  4.28it/s][Astep: 17

Evaluating:   8%|▊         | 18/228 [00:04<00:48,  4.31it/s][Astep: 18

Evaluating:   8%|▊         | 19/228 [00:04<00:49,  4.24it/s][Astep: 19

Evaluating:   9%|▉         | 20/228 [00:05<00:51,  4.03it/s][Astep: 20

Evaluating:   9%|▉         | 21/228 [00:05<00:52,  3.92it/s][Astep: 21

Evaluating:  10%|▉         | 22/228 [00:05<00:51,  4.03it/s][Astep: 22

Evaluating:  10%|█         | 23/228 [00:05<00:49,  4.11it/s][Astep: 23

Evaluating:  11%|█         | 24/228 [00:06<00:48,  4.17it/s][Astep: 24

Evaluating:  11%|█         | 25/228 [00:06<00:48,  4.20it/s][Astep: 25

Evaluating:  11%|█▏        | 26/228 [00:06<00:50,  4.01it/s][Astep: 26

Evaluating:  12%|█▏        | 27/228 [00:06<00:55,  3.63it/s][Astep: 27

Evaluating:  12%|█▏        | 28/228 [00:07<00:52,  3.83it/s][Astep: 28

Evaluating:  13%|█▎        | 29/228 [00:07<00:54,  3.66it/s][Astep: 29

Evaluating:  13%|█▎        | 30/228 [00:07<00:51,  3.87it/s][Astep: 30

Evaluating:  14%|█▎        | 31/228 [00:07<00:49,  4.00it/s][Astep: 31

Evaluating:  14%|█▍        | 32/228 [00:08<00:50,  3.85it/s][Astep: 32

Evaluating:  14%|█▍        | 33/228 [00:08<00:48,  4.00it/s][Astep: 33

Evaluating:  15%|█▍        | 34/228 [00:08<00:49,  3.89it/s][Astep: 34

Evaluating:  15%|█▌        | 35/228 [00:08<00:52,  3.70it/s][Astep: 35

Evaluating:  16%|█▌        | 36/228 [00:09<00:50,  3.80it/s][Astep: 36

Evaluating:  16%|█▌        | 37/228 [00:09<00:48,  3.97it/s][Astep: 37

Evaluating:  17%|█▋        | 38/228 [00:09<00:46,  4.06it/s][Astep: 38

Evaluating:  17%|█▋        | 39/228 [00:09<00:49,  3.79it/s][Astep: 39

Evaluating:  18%|█▊        | 40/228 [00:10<00:47,  3.94it/s][Astep: 40

Evaluating:  18%|█▊        | 41/228 [00:10<00:46,  4.04it/s][Astep: 41

Evaluating:  18%|█▊        | 42/228 [00:10<00:45,  4.12it/s][Astep: 42

Evaluating:  19%|█▉        | 43/228 [00:10<00:45,  4.09it/s][Astep: 43

Evaluating:  19%|█▉        | 44/228 [00:11<00:48,  3.81it/s][Astep: 44

Evaluating:  20%|█▉        | 45/228 [00:11<00:52,  3.51it/s][Astep: 45

Evaluating:  20%|██        | 46/228 [00:11<00:49,  3.71it/s][Astep: 46

Evaluating:  21%|██        | 47/228 [00:12<00:50,  3.57it/s][Astep: 47

Evaluating:  21%|██        | 48/228 [00:12<00:52,  3.45it/s][Astep: 48

Evaluating:  21%|██▏       | 49/228 [00:12<00:51,  3.48it/s][Astep: 49

Evaluating:  22%|██▏       | 50/228 [00:12<00:52,  3.41it/s][Astep: 50

Evaluating:  22%|██▏       | 51/228 [00:13<00:49,  3.54it/s][Astep: 51

Evaluating:  23%|██▎       | 52/228 [00:13<00:50,  3.47it/s][Astep: 52

Evaluating:  23%|██▎       | 53/228 [00:13<00:51,  3.41it/s][Astep: 53

Evaluating:  24%|██▎       | 54/228 [00:14<00:50,  3.45it/s][Astep: 54

Evaluating:  24%|██▍       | 55/228 [00:14<00:50,  3.40it/s][Astep: 55

Evaluating:  25%|██▍       | 56/228 [00:14<00:48,  3.58it/s][Astep: 56

Evaluating:  25%|██▌       | 57/228 [00:14<00:45,  3.73it/s][Astep: 57

Evaluating:  25%|██▌       | 58/228 [00:15<00:47,  3.55it/s][Astep: 58

Evaluating:  26%|██▌       | 59/228 [00:15<00:45,  3.76it/s][Astep: 59

Evaluating:  26%|██▋       | 60/228 [00:15<00:43,  3.83it/s][Astep: 60

Evaluating:  27%|██▋       | 61/228 [00:15<00:43,  3.87it/s][Astep: 61

Evaluating:  27%|██▋       | 62/228 [00:16<00:41,  4.00it/s][Astep: 62

Evaluating:  28%|██▊       | 63/228 [00:16<00:40,  4.03it/s][Astep: 63

Evaluating:  28%|██▊       | 64/228 [00:16<00:40,  4.09it/s][Astep: 64

Evaluating:  29%|██▊       | 65/228 [00:16<00:39,  4.13it/s][Astep: 65

Evaluating:  29%|██▉       | 66/228 [00:17<00:38,  4.17it/s][Astep: 66

Evaluating:  29%|██▉       | 67/228 [00:17<00:38,  4.19it/s][Astep: 67

Evaluating:  30%|██▉       | 68/228 [00:17<00:37,  4.23it/s][Astep: 68

Evaluating:  30%|███       | 69/228 [00:17<00:38,  4.16it/s][Astep: 69

Evaluating:  31%|███       | 70/228 [00:18<00:37,  4.22it/s][Astep: 70

Evaluating:  31%|███       | 71/228 [00:18<00:39,  4.01it/s][Astep: 71

Evaluating:  32%|███▏      | 72/228 [00:18<00:40,  3.87it/s][Astep: 72

Evaluating:  32%|███▏      | 73/228 [00:18<00:40,  3.81it/s][Astep: 73

Evaluating:  32%|███▏      | 74/228 [00:19<00:39,  3.94it/s][Astep: 74

Evaluating:  33%|███▎      | 75/228 [00:19<00:37,  4.07it/s][Astep: 75

Evaluating:  33%|███▎      | 76/228 [00:19<00:36,  4.15it/s][Astep: 76

Evaluating:  34%|███▍      | 77/228 [00:19<00:39,  3.86it/s][Astep: 77

Evaluating:  34%|███▍      | 78/228 [00:20<00:37,  3.99it/s][Astep: 78

Evaluating:  35%|███▍      | 79/228 [00:20<00:41,  3.62it/s][Astep: 79

Evaluating:  35%|███▌      | 80/228 [00:20<00:39,  3.73it/s][Astep: 80

Evaluating:  36%|███▌      | 81/228 [00:20<00:38,  3.80it/s][Astep: 81

Evaluating:  36%|███▌      | 82/228 [00:21<00:37,  3.86it/s][Astep: 82

Evaluating:  36%|███▋      | 83/228 [00:21<00:36,  3.94it/s][Astep: 83

Evaluating:  37%|███▋      | 84/228 [00:21<00:36,  3.99it/s][Astep: 84

Evaluating:  37%|███▋      | 85/228 [00:21<00:35,  4.06it/s][Astep: 85

Evaluating:  38%|███▊      | 86/228 [00:22<00:36,  3.94it/s][Astep: 86

Evaluating:  38%|███▊      | 87/228 [00:22<00:35,  3.94it/s][Astep: 87

Evaluating:  39%|███▊      | 88/228 [00:22<00:35,  3.98it/s][Astep: 88

Evaluating:  39%|███▉      | 89/228 [00:22<00:34,  4.00it/s][Astep: 89

Evaluating:  39%|███▉      | 90/228 [00:23<00:33,  4.09it/s][Astep: 90

Evaluating:  40%|███▉      | 91/228 [00:23<00:32,  4.17it/s][Astep: 91

Evaluating:  40%|████      | 92/228 [00:23<00:33,  4.12it/s][Astep: 92

Evaluating:  41%|████      | 93/228 [00:23<00:32,  4.17it/s][Astep: 93

Evaluating:  41%|████      | 94/228 [00:24<00:31,  4.22it/s][Astep: 94

Evaluating:  42%|████▏     | 95/228 [00:24<00:32,  4.05it/s][Astep: 95

Evaluating:  42%|████▏     | 96/228 [00:24<00:31,  4.15it/s][Astep: 96

Evaluating:  43%|████▎     | 97/228 [00:24<00:33,  3.87it/s][Astep: 97

Evaluating:  43%|████▎     | 98/228 [00:25<00:33,  3.89it/s][Astep: 98

Evaluating:  43%|████▎     | 99/228 [00:25<00:32,  4.00it/s][Astep: 99

Evaluating:  44%|████▍     | 100/228 [00:25<00:31,  4.01it/s][Astep: 100

Evaluating:  44%|████▍     | 101/228 [00:25<00:31,  3.99it/s][Astep: 101

Evaluating:  45%|████▍     | 102/228 [00:26<00:30,  4.08it/s][Astep: 102

Evaluating:  45%|████▌     | 103/228 [00:26<00:30,  4.09it/s][Astep: 103

Evaluating:  46%|████▌     | 104/228 [00:26<00:29,  4.15it/s][Astep: 104

Evaluating:  46%|████▌     | 105/228 [00:26<00:29,  4.18it/s][Astep: 105

Evaluating:  46%|████▋     | 106/228 [00:27<00:28,  4.22it/s][Astep: 106

Evaluating:  47%|████▋     | 107/228 [00:27<00:28,  4.19it/s][Astep: 107

Evaluating:  47%|████▋     | 108/228 [00:27<00:31,  3.81it/s][Astep: 108

Evaluating:  48%|████▊     | 109/228 [00:27<00:30,  3.92it/s][Astep: 109

Evaluating:  48%|████▊     | 110/228 [00:28<00:29,  4.02it/s][Astep: 110

Evaluating:  49%|████▊     | 111/228 [00:28<00:28,  4.04it/s][Astep: 111

Evaluating:  49%|████▉     | 112/228 [00:28<00:28,  4.14it/s][Astep: 112

Evaluating:  50%|████▉     | 113/228 [00:28<00:30,  3.76it/s][Astep: 113

Evaluating:  50%|█████     | 114/228 [00:29<00:28,  3.95it/s][Astep: 114

Evaluating:  50%|█████     | 115/228 [00:29<00:27,  4.07it/s][Astep: 115

Evaluating:  51%|█████     | 116/228 [00:29<00:28,  3.92it/s][Astep: 116

Evaluating:  51%|█████▏    | 117/228 [00:29<00:27,  4.05it/s][Astep: 117

Evaluating:  52%|█████▏    | 118/228 [00:30<00:26,  4.10it/s][Astep: 118

Evaluating:  52%|█████▏    | 119/228 [00:30<00:26,  4.11it/s][Astep: 119

Evaluating:  53%|█████▎    | 120/228 [00:30<00:25,  4.20it/s][Astep: 120

Evaluating:  53%|█████▎    | 121/228 [00:30<00:25,  4.22it/s][Astep: 121

Evaluating:  54%|█████▎    | 122/228 [00:31<00:25,  4.23it/s][Astep: 122

Evaluating:  54%|█████▍    | 123/228 [00:31<00:24,  4.26it/s][Astep: 123

Evaluating:  54%|█████▍    | 124/228 [00:31<00:24,  4.29it/s][Astep: 124

Evaluating:  55%|█████▍    | 125/228 [00:31<00:23,  4.31it/s][Astep: 125

Evaluating:  55%|█████▌    | 126/228 [00:31<00:23,  4.28it/s][Astep: 126

Evaluating:  56%|█████▌    | 127/228 [00:32<00:23,  4.33it/s][Astep: 127

Evaluating:  56%|█████▌    | 128/228 [00:32<00:25,  3.88it/s][Astep: 128

Evaluating:  57%|█████▋    | 129/228 [00:32<00:27,  3.59it/s][Astep: 129

Evaluating:  57%|█████▋    | 130/228 [00:33<00:25,  3.80it/s][Astep: 130

Evaluating:  57%|█████▋    | 131/228 [00:33<00:24,  3.95it/s][Astep: 131

Evaluating:  58%|█████▊    | 132/228 [00:33<00:24,  3.97it/s][Astep: 132

Evaluating:  58%|█████▊    | 133/228 [00:33<00:23,  4.10it/s][Astep: 133

Evaluating:  59%|█████▉    | 134/228 [00:34<00:23,  3.92it/s][Astep: 134

Evaluating:  59%|█████▉    | 135/228 [00:34<00:22,  4.07it/s][Astep: 135

Evaluating:  60%|█████▉    | 136/228 [00:34<00:23,  3.95it/s][Astep: 136

Evaluating:  60%|██████    | 137/228 [00:34<00:22,  4.07it/s][Astep: 137

Evaluating:  61%|██████    | 138/228 [00:34<00:21,  4.12it/s][Astep: 138

Evaluating:  61%|██████    | 139/228 [00:35<00:21,  4.22it/s][Astep: 139

Evaluating:  61%|██████▏   | 140/228 [00:35<00:20,  4.26it/s][Astep: 140

Evaluating:  62%|██████▏   | 141/228 [00:35<00:20,  4.34it/s][Astep: 141

Evaluating:  62%|██████▏   | 142/228 [00:35<00:19,  4.35it/s][Astep: 142

Evaluating:  63%|██████▎   | 143/228 [00:36<00:19,  4.34it/s][Astep: 143

Evaluating:  63%|██████▎   | 144/228 [00:36<00:19,  4.38it/s][Astep: 144

Evaluating:  64%|██████▎   | 145/228 [00:36<00:18,  4.41it/s][Astep: 145

Evaluating:  64%|██████▍   | 146/228 [00:36<00:18,  4.40it/s][Astep: 146

Evaluating:  64%|██████▍   | 147/228 [00:37<00:18,  4.43it/s][Astep: 147

Evaluating:  65%|██████▍   | 148/228 [00:37<00:17,  4.47it/s][Astep: 148

Evaluating:  65%|██████▌   | 149/228 [00:37<00:17,  4.46it/s][Astep: 149

Evaluating:  66%|██████▌   | 150/228 [00:37<00:17,  4.42it/s][Astep: 150

Evaluating:  66%|██████▌   | 151/228 [00:37<00:17,  4.42it/s][Astep: 151

Evaluating:  67%|██████▋   | 152/228 [00:38<00:17,  4.39it/s][Astep: 152

Evaluating:  67%|██████▋   | 153/228 [00:38<00:16,  4.43it/s][Astep: 153

Evaluating:  68%|██████▊   | 154/228 [00:38<00:16,  4.39it/s][Astep: 154

Evaluating:  68%|██████▊   | 155/228 [00:38<00:16,  4.31it/s][Astep: 155

Evaluating:  68%|██████▊   | 156/228 [00:39<00:18,  3.84it/s][Astep: 156

Evaluating:  69%|██████▉   | 157/228 [00:39<00:17,  4.00it/s][Astep: 157

Evaluating:  69%|██████▉   | 158/228 [00:39<00:16,  4.13it/s][Astep: 158

Evaluating:  70%|██████▉   | 159/228 [00:39<00:16,  4.22it/s][Astep: 159

Evaluating:  70%|███████   | 160/228 [00:40<00:15,  4.29it/s][Astep: 160

Evaluating:  71%|███████   | 161/228 [00:40<00:15,  4.33it/s][Astep: 161

Evaluating:  71%|███████   | 162/228 [00:40<00:15,  4.38it/s][Astep: 162

Evaluating:  71%|███████▏  | 163/228 [00:40<00:14,  4.37it/s][Astep: 163

Evaluating:  72%|███████▏  | 164/228 [00:40<00:14,  4.39it/s][Astep: 164

Evaluating:  72%|███████▏  | 165/228 [00:41<00:14,  4.42it/s][Astep: 165

Evaluating:  73%|███████▎  | 166/228 [00:41<00:13,  4.44it/s][Astep: 166

Evaluating:  73%|███████▎  | 167/228 [00:41<00:13,  4.45it/s][Astep: 167

Evaluating:  74%|███████▎  | 168/228 [00:41<00:13,  4.47it/s][Astep: 168

Evaluating:  74%|███████▍  | 169/228 [00:42<00:13,  4.48it/s][Astep: 169

Evaluating:  75%|███████▍  | 170/228 [00:42<00:13,  4.20it/s][Astep: 170

Evaluating:  75%|███████▌  | 171/228 [00:42<00:13,  4.29it/s][Astep: 171

Evaluating:  75%|███████▌  | 172/228 [00:42<00:13,  4.27it/s][Astep: 172

Evaluating:  76%|███████▌  | 173/228 [00:43<00:12,  4.34it/s][Astep: 173

Evaluating:  76%|███████▋  | 174/228 [00:43<00:12,  4.35it/s][Astep: 174

Evaluating:  77%|███████▋  | 175/228 [00:43<00:12,  4.14it/s][Astep: 175

Evaluating:  77%|███████▋  | 176/228 [00:43<00:13,  3.86it/s][Astep: 176

Evaluating:  78%|███████▊  | 177/228 [00:44<00:12,  3.99it/s][Astep: 177

Evaluating:  78%|███████▊  | 178/228 [00:44<00:12,  4.10it/s][Astep: 178

Evaluating:  79%|███████▊  | 179/228 [00:44<00:11,  4.19it/s][Astep: 179

Evaluating:  79%|███████▉  | 180/228 [00:44<00:11,  4.01it/s][Astep: 180

Evaluating:  79%|███████▉  | 181/228 [00:45<00:11,  4.15it/s][Astep: 181

Evaluating:  80%|███████▉  | 182/228 [00:45<00:10,  4.25it/s][Astep: 182

Evaluating:  80%|████████  | 183/228 [00:45<00:10,  4.32it/s][Astep: 183

Evaluating:  81%|████████  | 184/228 [00:45<00:10,  4.32it/s][Astep: 184

Evaluating:  81%|████████  | 185/228 [00:45<00:09,  4.33it/s][Astep: 185

Evaluating:  82%|████████▏ | 186/228 [00:46<00:09,  4.38it/s][Astep: 186

Evaluating:  82%|████████▏ | 187/228 [00:46<00:09,  4.15it/s][Astep: 187

Evaluating:  82%|████████▏ | 188/228 [00:46<00:09,  4.14it/s][Astep: 188

Evaluating:  83%|████████▎ | 189/228 [00:46<00:09,  4.24it/s][Astep: 189

Evaluating:  83%|████████▎ | 190/228 [00:47<00:08,  4.28it/s][Astep: 190

Evaluating:  84%|████████▍ | 191/228 [00:47<00:08,  4.34it/s][Astep: 191

Evaluating:  84%|████████▍ | 192/228 [00:47<00:08,  4.12it/s][Astep: 192

Evaluating:  85%|████████▍ | 193/228 [00:47<00:08,  4.20it/s][Astep: 193

Evaluating:  85%|████████▌ | 194/228 [00:48<00:07,  4.27it/s][Astep: 194

Evaluating:  86%|████████▌ | 195/228 [00:48<00:07,  4.18it/s][Astep: 195

Evaluating:  86%|████████▌ | 196/228 [00:48<00:07,  4.27it/s][Astep: 196

Evaluating:  86%|████████▋ | 197/228 [00:48<00:07,  4.33it/s][Astep: 197

Evaluating:  87%|████████▋ | 198/228 [00:48<00:06,  4.36it/s][Astep: 198

Evaluating:  87%|████████▋ | 199/228 [00:49<00:06,  4.40it/s][Astep: 199

Evaluating:  88%|████████▊ | 200/228 [00:49<00:06,  4.42it/s][Astep: 200

Evaluating:  88%|████████▊ | 201/228 [00:49<00:06,  4.01it/s][Astep: 201

Evaluating:  89%|████████▊ | 202/228 [00:49<00:06,  4.10it/s][Astep: 202

Evaluating:  89%|████████▉ | 203/228 [00:50<00:05,  4.20it/s][Astep: 203

Evaluating:  89%|████████▉ | 204/228 [00:50<00:05,  4.29it/s][Astep: 204

Evaluating:  90%|████████▉ | 205/228 [00:50<00:05,  4.35it/s][Astep: 205

Evaluating:  90%|█████████ | 206/228 [00:50<00:04,  4.40it/s][Astep: 206

Evaluating:  91%|█████████ | 207/228 [00:51<00:04,  4.44it/s][Astep: 207

Evaluating:  91%|█████████ | 208/228 [00:51<00:04,  4.45it/s][Astep: 208

Evaluating:  92%|█████████▏| 209/228 [00:51<00:04,  4.44it/s][Astep: 209

Evaluating:  92%|█████████▏| 210/228 [00:51<00:04,  4.42it/s][Astep: 210

Evaluating:  93%|█████████▎| 211/228 [00:51<00:03,  4.42it/s][Astep: 211

Evaluating:  93%|█████████▎| 212/228 [00:52<00:03,  4.44it/s][Astep: 212

Evaluating:  93%|█████████▎| 213/228 [00:52<00:03,  4.19it/s][Astep: 213

Evaluating:  94%|█████████▍| 214/228 [00:52<00:03,  4.23it/s][Astep: 214

Evaluating:  94%|█████████▍| 215/228 [00:52<00:03,  4.27it/s][Astep: 215

Evaluating:  95%|█████████▍| 216/228 [00:53<00:02,  4.29it/s][Astep: 216

Evaluating:  95%|█████████▌| 217/228 [00:53<00:02,  4.33it/s][Astep: 217

Evaluating:  96%|█████████▌| 218/228 [00:53<00:02,  4.36it/s][Astep: 218

Evaluating:  96%|█████████▌| 219/228 [00:53<00:02,  4.40it/s][Astep: 219

Evaluating:  96%|█████████▋| 220/228 [00:54<00:01,  4.30it/s][Astep: 220

Evaluating:  97%|█████████▋| 221/228 [00:54<00:01,  4.35it/s][Astep: 221

Evaluating:  97%|█████████▋| 222/228 [00:54<00:01,  4.41it/s][Astep: 222

Evaluating:  98%|█████████▊| 223/228 [00:54<00:01,  4.42it/s][Astep: 223

Evaluating:  98%|█████████▊| 224/228 [00:54<00:00,  4.44it/s][Astep: 224

Evaluating:  99%|█████████▊| 225/228 [00:55<00:00,  4.46it/s][Astep: 225

Evaluating:  99%|█████████▉| 226/228 [00:55<00:00,  4.46it/s][Astep: 226

Evaluating: 100%|█████████▉| 227/228 [00:55<00:00,  4.47it/s][Astep: 227

Evaluating: 100%|██████████| 228/228 [00:55<00:00,  4.49it/s][A09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/accuracy/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/f1/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/precision/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 10:04:23 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
09/01/2023 10:04:24 - INFO - evaluate.module - Removing /data/users/zhangjunlei/tyx/.cache/huggingface/metrics/recall/default/default_experiment-1-0.arrow
Evaluating: 100%|██████████| 228/228 [00:57<00:00,  3.99it/s]
09/01/2023 10:04:24 - INFO - __main__ -   Step: 1998, Validation Metrics: {'accuracy': 0.7890936024442181, 'f1_micro': 0.789093602444218, 'f1_macro': 0.4577880965827272, 'f1_weighted': 0.7590273900710807, 'f1_1': 0.8780487804878049, 'f1_-1': 0.36034618410700237, 'f1_0': 0.13496932515337423, 'precision_micro': 0.7890936024442181, 'precision_macro': 0.537300044399969, 'precision_weighted': 0.7471916591575012, 'precision_1': 0.8301378381179397, 'precision_-1': 0.4692622950819672, 'precision_0': 0.3125, 'recall_micro': 0.7890936024442181, 'recall_macro': 0.43678854123795663, 'recall_weighted': 0.7890936024442181, 'recall_1': 0.9318287575616566, 'recall_-1': 0.29246487867177523, 'recall_0': 0.08607198748043818}
wandb: Waiting for W&B process to finish... (success).
wandb: - 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: \ 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: | 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: / 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: - 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: \ 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: | 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: / 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: - 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: \ 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: | 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: / 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: - 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: \ 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: | 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: / 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: - 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: \ 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: | 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: / 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: - 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: \ 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: | 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: / 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: - 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: \ 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: | 0.016 MB of 0.016 MB uploaded (0.000 MB deduped)wandb: 
wandb: Run history:
wandb:           accuracy █▄▄▄▃▄▂▄▁▃▄▄▄▅▁▁▃▂▂▂▂
wandb:              f1_-1 █▁▂▂▄▂▄▁▅▄▅▄▄▄▅▅▅▅▅▅▅
wandb:               f1_0 ▂▁▁▆▃▃▃▃▇▄▅▇▄▄▇█▆█▇██
wandb:               f1_1 █▅▄▅▃▅▂▅▁▄▄▄▄▅▁▁▃▂▂▂▂
wandb:           f1_macro █▁▂▄▄▃▅▂▆▅▆▆▅▄▇▇▇▇▆▇▇
wandb:           f1_micro █▄▄▄▃▄▂▄▁▃▄▄▄▅▁▁▃▂▂▂▂
wandb:        f1_weighted █▁▁▂▃▂▃▁▃▄▄▄▄▄▄▄▄▄▄▄▄
wandb:      learning_rate ███▇▇▇▇▇▇▆▆▆▆▆▅▅▅▅▅▅▄▄▄▄▄▄▃▃▃▃▃▂▂▂▂▂▂▁▁▁
wandb:       precision_-1 █▅▄▅▂▅▂▅▁▃▃▄▃▅▂▁▃▃▃▃▂
wandb:        precision_0 ▆▁▁▅▆▆▇█▆█▆▆▇▇▄▄▅▄▄▄▄
wandb:        precision_1 █▁▂▂▄▂▄▁▅▄▅▄▄▃▅▆▅▅▅▅▅
wandb:    precision_macro █▁▁▅▅▆▇█▅▇▆▆▇▇▃▃▄▄▄▄▄
wandb:    precision_micro █▄▄▄▃▄▂▄▁▃▄▄▄▅▁▁▃▂▂▂▂
wandb: precision_weighted █▁▁▄▄▄▅▅▄▅▅▅▅▅▃▃▄▄▃▃▃
wandb:          recall_-1 █▁▂▂▄▂▅▁▅▄▅▄▄▃▅▆▅▅▅▅▅
wandb:           recall_0 ▂▁▁▅▃▃▃▃▆▃▅▆▄▃▇█▆█▆█▇
wandb:           recall_1 ▆█▇▇▄▇▃█▂▅▅▅▅▇▂▁▃▃▃▂▂
wandb:       recall_macro █▁▂▃▄▂▅▁▆▅▅▅▅▄▆▇▆▆▆▆▆
wandb:       recall_micro █▄▄▄▃▄▂▄▁▃▄▄▄▅▁▁▃▂▂▂▂
wandb:    recall_weighted █▄▄▄▃▄▂▄▁▃▄▄▄▅▁▁▃▂▂▂▂
wandb:         train_loss ▆▆█▆▇▇█▆▆▆▅▅▆▄▅▆▄▆▅▃▆▃▅▅▅▆▁▂▂▂▃▁▁▂▁▂▃▁▁▃
wandb: 
wandb: Run summary:
wandb:           accuracy 0.78909
wandb:              f1_-1 0.36035
wandb:               f1_0 0.13497
wandb:               f1_1 0.87805
wandb:           f1_macro 0.45779
wandb:           f1_micro 0.78909
wandb:        f1_weighted 0.75903
wandb:      learning_rate 0.0
wandb:       precision_-1 0.46926
wandb:        precision_0 0.3125
wandb:        precision_1 0.83014
wandb:    precision_macro 0.5373
wandb:    precision_micro 0.78909
wandb: precision_weighted 0.74719
wandb:          recall_-1 0.29246
wandb:           recall_0 0.08607
wandb:           recall_1 0.93183
wandb:       recall_macro 0.43679
wandb:       recall_micro 0.78909
wandb:    recall_weighted 0.78909
wandb:         train_loss 0.19431
wandb: 
wandb: 🚀 View run breezy-voice-53 at: https://wandb.ai/kidrain61/step-reward/runs/d3cdifa0
wandb: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)
wandb: Find logs at: ./wandb/wandb/run-20230901_015418-d3cdifa0/logs
tokenizer config file saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/tokenizer_config.json
Special tokens file saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/special_tokens_map.json
added tokens file saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/added_tokens.json
Configuration saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/config.json
Configuration saved in /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/generation_config.json
[W CUDAGuardImpl.h:46] Warning: CUDA warning: driver shutting down (function uncheckedGetDevice)
[W CUDAGuardImpl.h:62] Warning: CUDA warning: driver shutting down (function uncheckedSetDevice)
The model is bigger than the maximum size per checkpoint (10GB) and is going to be split in 3 checkpoint shards. You can find where each parameters has been saved in the index located at /data/users/zhangjunlei/tyx/reward-by-prm800k/models/llama2-13b-direct-prediction-002validation-bs=128-gas=16/pytorch_model.bin.index.json.
/data/users/zhangjunlei/anaconda3/envs/open-instruct/lib/python3.10/site-packages/wandb/sdk/wandb_run.py:2089: UserWarning: Run (d3cdifa0) is finished. The call to `_console_raw_callback` will be ignored. Please make sure that you are using an active run.
  lambda data: self._console_raw_callback("stderr", data),
100%|██████████| 1998/1998 [8:11:05<00:00, 14.75s/it]
